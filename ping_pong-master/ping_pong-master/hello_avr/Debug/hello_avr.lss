
hello_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000180  00800100  00001a20  00001ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  00800280  00800280  00001c34  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000230  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000035a3  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d44  00000000  00000000  00005463  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ccc  00000000  00000000  000061a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000052c  00000000  00000000  00006e74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000874  00000000  00000000  000073a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001626  00000000  00000000  00007c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000290  00000000  00000000  0000923a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__ctors_end>
       4:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__vector_1>
       8:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
       c:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__vector_3>
      10:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      14:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      18:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      1c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      20:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      24:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      28:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      2c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      30:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      34:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      38:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      3c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      40:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      44:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      48:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      4c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      50:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__vector_20>
      54:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      58:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      5c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      60:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      64:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      68:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>
      6c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__bad_interrupt>

00000070 <Menu_3_1>:
      70:	07 01 b3 01 b3 01 58 01 b3 01 8a 04 95 04 70 72     ......X.......pr
      80:	65 73 73 20 71 20 66 6f 72 20 64 65 62 75 67 20     ess q for debug 
      90:	69 6e 66 6f 00                                      info.

00000095 <Menu_2_3>:
      95:	07 03 b3 01 ad 00 7c 01 b3 01 8a 04 00 00 54 75     ......|.......Tu
      a5:	6e 69 6e 67 20 4b 64 00                             ning Kd.

000000ad <Menu_2_2>:
      ad:	07 02 95 00 c5 00 7c 01 b3 01 8a 04 00 00 54 75     ......|.......Tu
      bd:	6e 69 6e 67 20 4b 69 00                             ning Ki.

000000c5 <Menu_2_1>:
      c5:	07 01 ad 00 b3 01 7c 01 b3 01 8a 04 00 00 54 75     ......|.......Tu
      d5:	6e 69 6e 67 20 4b 70 00                             ning Kp.

000000dd <Menu_1_3>:
      dd:	07 03 b3 01 f5 00 99 01 b3 01 8a 04 00 00 41 75     ..............Au
      ed:	74 6f 20 50 6c 61 79 00                             to Play.

000000f5 <Menu_1_2>:
      f5:	07 02 dd 00 18 01 99 01 b3 01 8a 04 00 00 50 6c     ..............Pl
     105:	61 79 20 77 69 74 68 20 53 6d 61 72 74 50 68 6f     ay with SmartPho
     115:	6e 65 00                                            ne.

00000118 <Menu_1_1>:
     118:	07 01 f5 00 b3 01 99 01 b3 01 8a 04 00 00 50 6c     ..............Pl
     128:	61 79 20 77 69 74 68 20 4a 6f 79 73 74 69 63 6b     ay with Joystick
	...

00000139 <Menu_4>:
     139:	14 05 b3 01 58 01 b3 01 b3 01 8a 04 00 00 43 61     ....X.........Ca
     149:	6e 20 61 6c 6d 6f 73 74 20 64 6f 6e 65 21 00        n almost done!.

00000158 <Menu_3>:
     158:	0f 04 39 01 7c 01 b3 01 70 00 8a 04 00 00 4f 6e     ..9.|...p.....On
     168:	20 74 68 65 20 46 6c 79 20 44 65 62 75 67 67 69      the Fly Debuggi
     178:	6e 67 21 00                                         ng!.

0000017c <Menu_2>:
     17c:	0a 03 58 01 99 01 b3 01 c5 00 8a 04 00 00 4f 6e     ..X...........On
     18c:	6c 69 6e 65 20 54 75 6e 69 6e 67 21 00              line Tuning!.

00000199 <Menu_1>:
     199:	05 02 7c 01 b3 01 b3 01 18 01 8a 04 00 00 4c 65     ..|...........Le
     1a9:	74 27 73 20 50 6c 61 79 21 00                       t's Play!.

000001b3 <NULL_MENU>:
	...

000001c1 <font>:
     1c1:	00 00 00 00 00 00 00 5e 00 00 00 0e 00 0e 00 28     .......^.......(
     1d1:	7c 28 7c 28 08 54 7c 54 20 26 10 08 64 00 28 54     |(|(.T|T &..d.(T
     1e1:	28 40 00 00 00 0e 00 00 00 3c 42 00 00 00 42 3c     (@.......<B...B<
     1f1:	00 00 00 54 38 54 00 10 10 7c 10 10 00 80 60 20     ...T8T...|....` 
     201:	00 10 10 10 10 00 00 60 60 00 00 20 10 08 04 00     .......``.. ....
     211:	00 3c 42 3c 00 00 44 7e 40 00 44 62 52 4c 00 22     .<B<..D~@.DbRL."
     221:	4a 4a 36 00 18 14 7e 10 00 2e 4a 4a 32 00 3c 4a     JJ6...~...JJ2.<J
     231:	4a 30 00 02 62 1a 06 00 34 4a 4a 34 00 0c 52 52     J0..b...4JJ4..RR
     241:	3c 00 00 6c 6c 00 00 80 6c 2c 00 00 00 10 28 44     <..ll...l,....(D
     251:	00 28 28 28 28 00 00 44 28 10 00 00 04 52 0c 00     .((((..D(....R..
     261:	3c 42 5a 1c 00 7c 12 12 7c 00 7e 4a 4a 34 00 3c     <BZ..|..|.~JJ4.<
     271:	42 42 24 00 7e 42 42 3c 00 7e 4a 4a 42 00 7e 0a     BB$.~BB<.~JJB.~.
     281:	0a 02 00 3c 42 52 74 00 7e 08 08 7e 00 00 42 7e     ...<BRt.~..~..B~
     291:	42 00 20 40 40 3e 00 7e 18 24 42 00 7e 40 40 40     B. @@>.~.$B.~@@@
     2a1:	00 7e 0c 0c 7e 00 7e 0c 30 7e 00 3c 42 42 3c 00     .~..~.~.0~.<BB<.
     2b1:	7e 12 12 0c 00 3c 62 42 bc 00 7e 12 32 4c 00 24     ~....<bB..~.2L.$
     2c1:	4a 52 24 00 00 02 7e 02 00 3e 40 40 3e 00 1e 60     JR$...~..>@@>..`
     2d1:	60 1e 00 7e 30 30 7e 00 66 18 18 66 00 00 0e 70     `..~00~.f..f...p
     2e1:	0e 00 62 52 4a 46 00 00 7e 42 42 00 04 08 10 20     ..bRJF..~BB.... 
     2f1:	00 00 42 42 7e 00 00 04 02 04 00 40 40 40 40 00     ..BB~......@@@@.
     301:	00 02 04 00 00 30 48 28 78 00 7e 48 48 30 00 30     .....0H(x.~HH0.0
     311:	48 48 00 00 30 48 48 7e 00 30 68 58 10 00 10 7c     HH..0HH~.0hX...|
     321:	12 04 00 50 a8 a8 98 00 7e 08 08 70 00 00 48 7a     ...P....~..p..Hz
     331:	40 00 00 40 80 7a 00 7e 10 28 40 00 00 42 7e 40     @..@.z.~.(@..B~@
     341:	00 78 10 18 70 00 78 08 08 70 00 30 48 48 30 00     .x..p.x..p.0HH0.
     351:	f8 48 48 30 00 30 48 48 f8 00 78 08 08 10 00 50     .HH0.0HH..x....P
     361:	58 68 28 00 08 3e 48 40 00 38 40 40 78 00 00 38     Xh(..>H@.8@@x..8
     371:	40 38 00 78 60 60 78 00 48 30 30 48 00 18 a0 40     @8.x``x.H00H...@
     381:	38 00 48 68 58 48 00 00 08 3c 42 00 00 00 7e 00     8.HhXH...<B...~.
     391:	00 00 42 3c 08 00 04 02 04 02 00                    ..B<.......

0000039c <__ctors_end>:
     39c:	11 24       	eor	r1, r1
     39e:	1f be       	out	0x3f, r1	; 63
     3a0:	cf ef       	ldi	r28, 0xFF	; 255
     3a2:	d4 e0       	ldi	r29, 0x04	; 4
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	cd bf       	out	0x3d, r28	; 61

000003a8 <__do_copy_data>:
     3a8:	12 e0       	ldi	r17, 0x02	; 2
     3aa:	a0 e0       	ldi	r26, 0x00	; 0
     3ac:	b1 e0       	ldi	r27, 0x01	; 1
     3ae:	e0 e2       	ldi	r30, 0x20	; 32
     3b0:	fa e1       	ldi	r31, 0x1A	; 26
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <__do_copy_data+0x10>
     3b4:	05 90       	lpm	r0, Z+
     3b6:	0d 92       	st	X+, r0
     3b8:	a0 38       	cpi	r26, 0x80	; 128
     3ba:	b1 07       	cpc	r27, r17
     3bc:	d9 f7       	brne	.-10     	; 0x3b4 <__do_copy_data+0xc>

000003be <__do_clear_bss>:
     3be:	22 e0       	ldi	r18, 0x02	; 2
     3c0:	a0 e8       	ldi	r26, 0x80	; 128
     3c2:	b2 e0       	ldi	r27, 0x02	; 2
     3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <.do_clear_bss_start>

000003c6 <.do_clear_bss_loop>:
     3c6:	1d 92       	st	X+, r1

000003c8 <.do_clear_bss_start>:
     3c8:	a1 3b       	cpi	r26, 0xB1	; 177
     3ca:	b2 07       	cpc	r27, r18
     3cc:	e1 f7       	brne	.-8      	; 0x3c6 <.do_clear_bss_loop>
     3ce:	0e 94 b8 04 	call	0x970	; 0x970 <main>
     3d2:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <_exit>

000003d6 <__bad_interrupt>:
     3d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003da <adc_read>:
uint8_t adc_read(int channel)
{
	uint8_t data=0;
	int i=0;
	
	volatile uint8_t *p_write= (uint8_t *) (ADC_ADDR_START+channel);
     3da:	fc 01       	movw	r30, r24
     3dc:	fc 5e       	subi	r31, 0xEC	; 236
	volatile uint8_t *p_read= (uint8_t*) (ADC_ADDR_START);
	*p_write=channel;		//select Channel of ADC
     3de:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e0:	26 ea       	ldi	r18, 0xA6	; 166
     3e2:	2a 95       	dec	r18
     3e4:	f1 f7       	brne	.-4      	; 0x3e2 <adc_read+0x8>
     3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <adc_read+0xe>
	_delay_us(500);
	
	data=*p_read;		//read data from ADC
     3e8:	80 91 00 14 	lds	r24, 0x1400
	i=data;
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	36 ea       	ldi	r19, 0xA6	; 166
     3f0:	3a 95       	dec	r19
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <adc_read+0x16>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <adc_read+0x1c>
	_delay_us(500);
	data=*p_read;		//read data from ADC
     3f6:	20 91 00 14 	lds	r18, 0x1400
	i+=data;
     3fa:	82 0f       	add	r24, r18
     3fc:	91 1d       	adc	r25, r1
     3fe:	26 ea       	ldi	r18, 0xA6	; 166
     400:	2a 95       	dec	r18
     402:	f1 f7       	brne	.-4      	; 0x400 <adc_read+0x26>
     404:	00 c0       	rjmp	.+0      	; 0x406 <adc_read+0x2c>
	_delay_us(500);
	data=*p_read;		//read data from ADC
     406:	20 91 00 14 	lds	r18, 0x1400
     40a:	36 ea       	ldi	r19, 0xA6	; 166
     40c:	3a 95       	dec	r19
     40e:	f1 f7       	brne	.-4      	; 0x40c <adc_read+0x32>
     410:	00 c0       	rjmp	.+0      	; 0x412 <adc_read+0x38>
	i+=data;
     412:	82 0f       	add	r24, r18
     414:	91 1d       	adc	r25, r1
	_delay_us(500);

	data=(uint8_t) (i/3);		//Average 3 samples
     416:	63 e0       	ldi	r22, 0x03	; 3
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	0e 94 76 09 	call	0x12ec	; 0x12ec <__divmodhi4>
     41e:	86 2f       	mov	r24, r22
	return data;
	
}
     420:	08 95       	ret

00000422 <adc_calibrate>:
	
	
	volatile uint8_t *p_read= (uint8_t *) (ADC_ADDR_START);
	
	
	data=*p_read;		//read data from ADC
     422:	80 91 00 14 	lds	r24, 0x1400
     426:	8a e0       	ldi	r24, 0x0A	; 10
     428:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t adc_calibrate(int channel)
{
	uint8_t data=0;
	uint16_t i=0;
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0
	
	
	data=*p_read;		//read data from ADC
	int j;
	for(j = 0; j< 10; j++){
		data=*p_read;
     42e:	e0 e0       	ldi	r30, 0x00	; 0
     430:	f4 e1       	ldi	r31, 0x14	; 20
     432:	40 81       	ld	r20, Z
		i+=data;
     434:	24 0f       	add	r18, r20
     436:	31 1d       	adc	r19, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     438:	a7 ea       	ldi	r26, 0xA7	; 167
     43a:	b1 e6       	ldi	r27, 0x61	; 97
     43c:	11 97       	sbiw	r26, 0x01	; 1
     43e:	f1 f7       	brne	.-4      	; 0x43c <adc_calibrate+0x1a>
     440:	00 c0       	rjmp	.+0      	; 0x442 <adc_calibrate+0x20>
     442:	00 00       	nop
     444:	01 97       	sbiw	r24, 0x01	; 1
	volatile uint8_t *p_read= (uint8_t *) (ADC_ADDR_START);
	
	
	data=*p_read;		//read data from ADC
	int j;
	for(j = 0; j< 10; j++){
     446:	00 97       	sbiw	r24, 0x00	; 0
     448:	a1 f7       	brne	.-24     	; 0x432 <adc_calibrate+0x10>
		data=*p_read;
		i+=data;
		_delay_ms(100);	
	}
	data=(uint8_t) (i/10);			//Average 10 samples
     44a:	ad ec       	ldi	r26, 0xCD	; 205
     44c:	bc ec       	ldi	r27, 0xCC	; 204
     44e:	0e 94 8a 09 	call	0x1314	; 0x1314 <__umulhisi3>
     452:	96 95       	lsr	r25
     454:	87 95       	ror	r24
     456:	96 95       	lsr	r25
     458:	87 95       	ror	r24
     45a:	96 95       	lsr	r25
     45c:	87 95       	ror	r24
	return data;
	
}
     45e:	08 95       	ret

00000460 <adc_init>:

static uint8_t x_mean=0,y_mean=0;

void adc_init(void)
{
	MCUCR |= (1<<SRE);		//Enable XMEM interface
     460:	85 b7       	in	r24, 0x35	; 53
     462:	80 68       	ori	r24, 0x80	; 128
     464:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);		//Mask out higher 4 bits of address
     466:	80 b7       	in	r24, 0x30	; 48
     468:	80 62       	ori	r24, 0x20	; 32
     46a:	80 bf       	out	0x30, r24	; 48
	x_mean=adc_calibrate(X_CH);
     46c:	86 e0       	ldi	r24, 0x06	; 6
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 11 02 	call	0x422	; 0x422 <adc_calibrate>
     474:	80 93 81 02 	sts	0x0281, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     478:	80 e1       	ldi	r24, 0x10	; 16
     47a:	8a 95       	dec	r24
     47c:	f1 f7       	brne	.-4      	; 0x47a <adc_init+0x1a>
     47e:	00 c0       	rjmp	.+0      	; 0x480 <adc_init+0x20>
	_delay_us(50);
	y_mean=adc_calibrate(Y_CH);
     480:	84 e0       	ldi	r24, 0x04	; 4
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 11 02 	call	0x422	; 0x422 <adc_calibrate>
     488:	80 93 80 02 	sts	0x0280, r24
     48c:	80 e1       	ldi	r24, 0x10	; 16
     48e:	8a 95       	dec	r24
     490:	f1 f7       	brne	.-4      	; 0x48e <adc_init+0x2e>
     492:	00 c0       	rjmp	.+0      	; 0x494 <adc_init+0x34>
     494:	08 95       	ret

00000496 <adc_get_position>:
	*y_val=(signed int) ((*y_val-y_mean)*100/128);
}

//struct adc_pos {int16_t x; int16_t y;};
	
struct adc_pos adc_get_position(void){
     496:	cf 93       	push	r28
	struct adc_pos pos;

	int raw;

	pos.x = adc_read(X_CH);
     498:	86 e0       	ldi	r24, 0x06	; 6
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 ed 01 	call	0x3da	; 0x3da <adc_read>
     4a0:	c8 2f       	mov	r28, r24
	pos.y = adc_read(Y_CH);//-y_mean;
     4a2:	84 e0       	ldi	r24, 0x04	; 4
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 ed 01 	call	0x3da	; 0x3da <adc_read>
	//
	return pos;
     4aa:	6c 2f       	mov	r22, r28
     4ac:	78 2f       	mov	r23, r24
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	cf 91       	pop	r28
     4b2:	08 95       	ret

000004b4 <spi_config>:
     4b4:	87 b3       	in	r24, 0x17	; 23
     4b6:	80 6b       	ori	r24, 0xB0	; 176
     4b8:	87 bb       	out	0x17, r24	; 23
     4ba:	c4 9a       	sbi	0x18, 4	; 24
     4bc:	8d b1       	in	r24, 0x0d	; 13
     4be:	80 65       	ori	r24, 0x50	; 80
     4c0:	8d b9       	out	0x0d, r24	; 13
     4c2:	08 95       	ret

000004c4 <spi_chipselect>:
     4c4:	81 30       	cpi	r24, 0x01	; 1
     4c6:	11 f4       	brne	.+4      	; 0x4cc <spi_chipselect+0x8>
     4c8:	c4 98       	cbi	0x18, 4	; 24
     4ca:	08 95       	ret
     4cc:	c4 9a       	sbi	0x18, 4	; 24
     4ce:	08 95       	ret

000004d0 <spi_tx_rx>:
     4d0:	8f b9       	out	0x0f, r24	; 15
     4d2:	77 9b       	sbis	0x0e, 7	; 14
     4d4:	fe cf       	rjmp	.-4      	; 0x4d2 <spi_tx_rx+0x2>
     4d6:	8f b1       	in	r24, 0x0f	; 15
     4d8:	08 95       	ret

000004da <can_reset>:
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     4e0:	80 ec       	ldi	r24, 0xC0	; 192
     4e2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     4ec:	08 95       	ret

000004ee <can_rx_if_clear>:
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     4f4:	85 e0       	ldi	r24, 0x05	; 5
     4f6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     4fa:	8c e2       	ldi	r24, 0x2C	; 44
     4fc:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     500:	8f ef       	ldi	r24, 0xFF	; 255
     502:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     512:	08 95       	ret

00000514 <can_transmit>:
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	c8 2f       	mov	r28, r24
     522:	d6 2f       	mov	r29, r22
     524:	04 2f       	mov	r16, r20
     526:	e2 2e       	mov	r14, r18
     528:	13 2f       	mov	r17, r19
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     530:	83 e0       	ldi	r24, 0x03	; 3
     532:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     536:	8c 2f       	mov	r24, r28
     538:	82 95       	swap	r24
     53a:	80 7f       	andi	r24, 0xF0	; 240
     53c:	0f 2e       	mov	r0, r31
     53e:	f0 e3       	ldi	r31, 0x30	; 48
     540:	ff 2e       	mov	r15, r31
     542:	f0 2d       	mov	r31, r0
     544:	f8 0e       	add	r15, r24
     546:	8f 2d       	mov	r24, r15
     548:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     564:	8f 2d       	mov	r24, r15
     566:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     56a:	83 e0       	ldi	r24, 0x03	; 3
     56c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     582:	c2 95       	swap	r28
     584:	c0 7f       	andi	r28, 0xF0	; 240
     586:	81 e3       	ldi	r24, 0x31	; 49
     588:	8c 0f       	add	r24, r28
     58a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     58e:	8d 2f       	mov	r24, r29
     590:	86 95       	lsr	r24
     592:	86 95       	lsr	r24
     594:	86 95       	lsr	r24
     596:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     5a6:	82 e0       	ldi	r24, 0x02	; 2
     5a8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     5ac:	82 e3       	ldi	r24, 0x32	; 50
     5ae:	8c 0f       	add	r24, r28
     5b0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     5b4:	8d 2f       	mov	r24, r29
     5b6:	82 95       	swap	r24
     5b8:	88 0f       	add	r24, r24
     5ba:	80 7e       	andi	r24, 0xE0	; 224
     5bc:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     5d2:	85 e3       	ldi	r24, 0x35	; 53
     5d4:	8c 0f       	add	r24, r28
     5d6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     5da:	80 2f       	mov	r24, r16
     5dc:	8f 70       	andi	r24, 0x0F	; 15
     5de:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     5ee:	82 e0       	ldi	r24, 0x02	; 2
     5f0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     5f4:	86 e3       	ldi	r24, 0x36	; 54
     5f6:	8c 0f       	add	r24, r28
     5f8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     5fc:	00 23       	and	r16, r16
     5fe:	49 f0       	breq	.+18     	; 0x612 <can_transmit+0xfe>
     600:	ce 2d       	mov	r28, r14
     602:	d1 2f       	mov	r29, r17
     604:	10 e0       	ldi	r17, 0x00	; 0
     606:	89 91       	ld	r24, Y+
     608:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     60c:	1f 5f       	subi	r17, 0xFF	; 255
     60e:	10 13       	cpse	r17, r16
     610:	fa cf       	rjmp	.-12     	; 0x606 <can_transmit+0xf2>
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     624:	8f 2d       	mov	r24, r15
     626:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     62a:	88 e0       	ldi	r24, 0x08	; 8
     62c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     636:	0e 94 77 02 	call	0x4ee	; 0x4ee <can_rx_if_clear>
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	1f 91       	pop	r17
     640:	0f 91       	pop	r16
     642:	ff 90       	pop	r15
     644:	ef 90       	pop	r14
     646:	08 95       	ret

00000648 <can_write_reg>:
     648:	cf 93       	push	r28
     64a:	c6 2f       	mov	r28, r22
     64c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     650:	8c 2f       	mov	r24, r28
     652:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <can_receive>:
     65a:	8f 92       	push	r8
     65c:	9f 92       	push	r9
     65e:	af 92       	push	r10
     660:	bf 92       	push	r11
     662:	cf 92       	push	r12
     664:	df 92       	push	r13
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
     676:	2e 97       	sbiw	r28, 0x0e	; 14
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	6c 01       	movw	r12, r24
     684:	5b 01       	movw	r10, r22
     686:	84 2e       	mov	r8, r20
     688:	95 2e       	mov	r9, r21
     68a:	8e 01       	movw	r16, r28
     68c:	0f 5f       	subi	r16, 0xFF	; 255
     68e:	1f 4f       	sbci	r17, 0xFF	; 255
     690:	8e e0       	ldi	r24, 0x0E	; 14
     692:	f8 01       	movw	r30, r16
     694:	11 92       	st	Z+, r1
     696:	8a 95       	dec	r24
     698:	e9 f7       	brne	.-6      	; 0x694 <can_receive+0x3a>
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     6a0:	80 eb       	ldi	r24, 0xB0	; 176
     6a2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     6b2:	f8 2e       	mov	r15, r24
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     6c0:	83 e0       	ldi	r24, 0x03	; 3
     6c2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     6c6:	8f 2d       	mov	r24, r15
     6c8:	82 95       	swap	r24
     6ca:	86 95       	lsr	r24
     6cc:	86 95       	lsr	r24
     6ce:	83 70       	andi	r24, 0x03	; 3
     6d0:	81 5a       	subi	r24, 0xA1	; 161
     6d2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     6d6:	7e 01       	movw	r14, r28
     6d8:	ff e0       	ldi	r31, 0x0F	; 15
     6da:	ef 0e       	add	r14, r31
     6dc:	f1 1c       	adc	r15, r1
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     6e4:	f8 01       	movw	r30, r16
     6e6:	81 93       	st	Z+, r24
     6e8:	8f 01       	movw	r16, r30
     6ea:	ee 15       	cp	r30, r14
     6ec:	ff 05       	cpc	r31, r15
     6ee:	b9 f7       	brne	.-18     	; 0x6de <can_receive+0x84>
     6f0:	8a 81       	ldd	r24, Y+2	; 0x02
     6f2:	88 0f       	add	r24, r24
     6f4:	88 0f       	add	r24, r24
     6f6:	88 0f       	add	r24, r24
     6f8:	f6 01       	movw	r30, r12
     6fa:	80 83       	st	Z, r24
     6fc:	8b 81       	ldd	r24, Y+3	; 0x03
     6fe:	82 95       	swap	r24
     700:	86 95       	lsr	r24
     702:	87 70       	andi	r24, 0x07	; 7
     704:	81 83       	std	Z+1, r24	; 0x01
     706:	8e 81       	ldd	r24, Y+6	; 0x06
     708:	f5 01       	movw	r30, r10
     70a:	80 83       	st	Z, r24
     70c:	fe 01       	movw	r30, r28
     70e:	37 96       	adiw	r30, 0x07	; 7
     710:	a8 2d       	mov	r26, r8
     712:	b9 2d       	mov	r27, r9
     714:	81 91       	ld	r24, Z+
     716:	8d 93       	st	X+, r24
     718:	ee 16       	cp	r14, r30
     71a:	ff 06       	cpc	r15, r31
     71c:	d9 f7       	brne	.-10     	; 0x714 <can_receive+0xba>
     71e:	0e 94 77 02 	call	0x4ee	; 0x4ee <can_rx_if_clear>
     722:	2e 96       	adiw	r28, 0x0e	; 14
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	f8 94       	cli
     728:	de bf       	out	0x3e, r29	; 62
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	cd bf       	out	0x3d, r28	; 61
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	df 90       	pop	r13
     73c:	cf 90       	pop	r12
     73e:	bf 90       	pop	r11
     740:	af 90       	pop	r10
     742:	9f 90       	pop	r9
     744:	8f 90       	pop	r8
     746:	08 95       	ret

00000748 <can_read_status>:
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     74e:	83 e0       	ldi	r24, 0x03	; 3
     750:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     754:	8e ef       	ldi	r24, 0xFE	; 254
     756:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     760:	08 95       	ret

00000762 <can_config>:
     762:	cf 93       	push	r28
     764:	c8 2f       	mov	r28, r24
     766:	0e 94 6d 02 	call	0x4da	; 0x4da <can_reset>
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     776:	60 e8       	ldi	r22, 0x80	; 128
     778:	8f ef       	ldi	r24, 0xFF	; 255
     77a:	0e 94 24 03 	call	0x648	; 0x648 <can_write_reg>
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     784:	0e 94 a4 03 	call	0x748	; 0x748 <can_read_status>
     788:	82 95       	swap	r24
     78a:	86 95       	lsr	r24
     78c:	87 70       	andi	r24, 0x07	; 7
     78e:	84 30       	cpi	r24, 0x04	; 4
     790:	49 f0       	breq	.+18     	; 0x7a4 <can_config+0x42>
     792:	2e e1       	ldi	r18, 0x1E	; 30
     794:	31 e0       	ldi	r19, 0x01	; 1
     796:	3f 93       	push	r19
     798:	2f 93       	push	r18
     79a:	0e 94 1e 0a 	call	0x143c	; 0x143c <printf>
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	08 c0       	rjmp	.+16     	; 0x7b4 <can_config+0x52>
     7a4:	24 e4       	ldi	r18, 0x44	; 68
     7a6:	31 e0       	ldi	r19, 0x01	; 1
     7a8:	3f 93       	push	r19
     7aa:	2f 93       	push	r18
     7ac:	0e 94 1e 0a 	call	0x143c	; 0x143c <printf>
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	88 e1       	ldi	r24, 0x18	; 24
     7b6:	94 e0       	ldi	r25, 0x04	; 4
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <can_config+0x56>
     7bc:	00 c0       	rjmp	.+0      	; 0x7be <can_config+0x5c>
     7be:	00 00       	nop
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	80 e2       	ldi	r24, 0x20	; 32
     7d0:	0e 94 24 03 	call	0x648	; 0x648 <can_write_reg>
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     7da:	88 e1       	ldi	r24, 0x18	; 24
     7dc:	94 e0       	ldi	r25, 0x04	; 4
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	f1 f7       	brne	.-4      	; 0x7de <can_config+0x7c>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <can_config+0x82>
     7e4:	00 00       	nop
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     7ec:	82 e0       	ldi	r24, 0x02	; 2
     7ee:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	84 e2       	ldi	r24, 0x24	; 36
     7f6:	0e 94 24 03 	call	0x648	; 0x648 <can_write_reg>
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     800:	88 e1       	ldi	r24, 0x18	; 24
     802:	94 e0       	ldi	r25, 0x04	; 4
     804:	01 97       	sbiw	r24, 0x01	; 1
     806:	f1 f7       	brne	.-4      	; 0x804 <can_config+0xa2>
     808:	00 c0       	rjmp	.+0      	; 0x80a <can_config+0xa8>
     80a:	00 00       	nop
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	81 e2       	ldi	r24, 0x21	; 33
     81c:	0e 94 24 03 	call	0x648	; 0x648 <can_write_reg>
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     826:	88 e1       	ldi	r24, 0x18	; 24
     828:	94 e0       	ldi	r25, 0x04	; 4
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	f1 f7       	brne	.-4      	; 0x82a <can_config+0xc8>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <can_config+0xce>
     830:	00 00       	nop
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	85 e2       	ldi	r24, 0x25	; 37
     842:	0e 94 24 03 	call	0x648	; 0x648 <can_write_reg>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     84c:	88 e1       	ldi	r24, 0x18	; 24
     84e:	94 e0       	ldi	r25, 0x04	; 4
     850:	01 97       	sbiw	r24, 0x01	; 1
     852:	f1 f7       	brne	.-4      	; 0x850 <can_config+0xee>
     854:	00 c0       	rjmp	.+0      	; 0x856 <can_config+0xf4>
     856:	00 00       	nop
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     864:	63 e0       	ldi	r22, 0x03	; 3
     866:	8b e2       	ldi	r24, 0x2B	; 43
     868:	0e 94 24 03 	call	0x648	; 0x648 <can_write_reg>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     872:	88 e1       	ldi	r24, 0x18	; 24
     874:	94 e0       	ldi	r25, 0x04	; 4
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	f1 f7       	brne	.-4      	; 0x876 <can_config+0x114>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <can_config+0x11a>
     87c:	00 00       	nop
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     88a:	63 e0       	ldi	r22, 0x03	; 3
     88c:	8a e2       	ldi	r24, 0x2A	; 42
     88e:	0e 94 24 03 	call	0x648	; 0x648 <can_write_reg>
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     898:	88 e1       	ldi	r24, 0x18	; 24
     89a:	94 e0       	ldi	r25, 0x04	; 4
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <can_config+0x13a>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <can_config+0x140>
     8a2:	00 00       	nop
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     8b0:	61 ed       	ldi	r22, 0xD1	; 209
     8b2:	89 e2       	ldi	r24, 0x29	; 41
     8b4:	0e 94 24 03 	call	0x648	; 0x648 <can_write_reg>
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     8be:	88 e1       	ldi	r24, 0x18	; 24
     8c0:	94 e0       	ldi	r25, 0x04	; 4
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <can_config+0x160>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <can_config+0x166>
     8c8:	00 00       	nop
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     8d6:	61 e4       	ldi	r22, 0x41	; 65
     8d8:	88 e2       	ldi	r24, 0x28	; 40
     8da:	0e 94 24 03 	call	0x648	; 0x648 <can_write_reg>
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     8e4:	88 e1       	ldi	r24, 0x18	; 24
     8e6:	94 e0       	ldi	r25, 0x04	; 4
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <can_config+0x186>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <can_config+0x18c>
     8ee:	00 00       	nop
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     8f6:	82 e0       	ldi	r24, 0x02	; 2
     8f8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <spi_tx_rx>
     8fc:	6c 2f       	mov	r22, r28
     8fe:	62 95       	swap	r22
     900:	66 0f       	add	r22, r22
     902:	60 7e       	andi	r22, 0xE0	; 224
     904:	8f ef       	ldi	r24, 0xFF	; 255
     906:	0e 94 24 03 	call	0x648	; 0x648 <can_write_reg>
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <spi_chipselect>
     910:	cf 91       	pop	r28
     912:	08 95       	ret

00000914 <generic_SelectCallback>:
static void genric_draw_fun(uint8_t x, uint8_t y, const char *str){
	oled_goto_xy(x,y);
	oled_putstr_P(str);
}

void generic_SelectCallback(uint8_t x, uint8_t y, const char* str){
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	ea 01       	movw	r28, r20
	oled_goto_xy(x,y);
     91a:	0e 94 65 08 	call	0x10ca	; 0x10ca <oled_goto_xy>
	oled_putstr_P_inverse(str);
     91e:	ce 01       	movw	r24, r28
     920:	0e 94 4a 09 	call	0x1294	; 0x1294 <oled_putstr_P_inverse>
}
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <enable_debug_mode_display>:
/************************************************************************/
/* enable_debug_mode_display                                            */
/************************************************************************/
int flag_enable_debug_mode_display = 0;
void enable_debug_mode_display(void){
	oled_goto_xy(6,0);
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	86 e0       	ldi	r24, 0x06	; 6
     92e:	0e 94 65 08 	call	0x10ca	; 0x10ca <oled_goto_xy>
	puts("Into Debug mode");
     932:	8e e5       	ldi	r24, 0x5E	; 94
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 32 0a 	call	0x1464	; 0x1464 <puts>
	flag_enable_debug_mode_display = 1;
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	90 93 8d 02 	sts	0x028D, r25
     942:	80 93 8c 02 	sts	0x028C, r24
     946:	08 95       	ret

00000948 <genric_draw_fun>:





static void genric_draw_fun(uint8_t x, uint8_t y, const char *str){
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	ea 01       	movw	r28, r20
	oled_goto_xy(x,y);
     94e:	0e 94 65 08 	call	0x10ca	; 0x10ca <oled_goto_xy>
	oled_putstr_P(str);
     952:	ce 01       	movw	r24, r28
     954:	0e 94 b8 08 	call	0x1170	; 0x1170 <oled_putstr_P>
}
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <plunger>:
/************************************************************************/
/*			PLUNGER FUCNTION TO ACTIVATE SOLENOID                      */
/************************************************************************/
void plunger(void)
{
	cli();
     95e:	f8 94       	cli
	PORTB &= ~(1<<PB0);			// clear PORTB_0 pin 1 when switch is pressed, will be used for plunger
     960:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 ef       	ldi	r25, 0xF0	; 240
     966:	01 97       	sbiw	r24, 0x01	; 1
     968:	f1 f7       	brne	.-4      	; 0x966 <plunger+0x8>
						
	_delay_ms(50);             //can be changed!!!
	PORTB |= (1<<PB0);			// Set PORTB_0
     96a:	c0 9a       	sbi	0x18, 0	; 24
	sei();
     96c:	78 94       	sei
     96e:	08 95       	ret

00000970 <main>:
char rx_buff[20];
int rx_count=0;


int main(void)
{	/* Set up the default menu text write callback, and navigate to an absolute menu item entry. */
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	a0 97       	sbiw	r28, 0x20	; 32
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
		stdout = &oled_stdout;
     984:	8e e0       	ldi	r24, 0x0E	; 14
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	90 93 ae 02 	sts	0x02AE, r25
     98c:	80 93 ad 02 	sts	0x02AD, r24
		usart_init(MYUBRR);
     990:	8f e1       	ldi	r24, 0x1F	; 31
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <usart_init>

		fprintf(&usart_stdout,"Usart says hello!\n");
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	31 e0       	ldi	r19, 0x01	; 1
     99c:	42 e1       	ldi	r20, 0x12	; 18
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	61 e0       	ldi	r22, 0x01	; 1
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	8e e6       	ldi	r24, 0x6E	; 110
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <fwrite>
		oled_init();
     9ac:	0e 94 32 08 	call	0x1064	; 0x1064 <oled_init>
		oled_clear();
     9b0:	0e 94 c9 08 	call	0x1192	; 0x1192 <oled_clear>
		oled_putstr_inverse("hello world!!\n");
     9b4:	81 e8       	ldi	r24, 0x81	; 129
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 3b 09 	call	0x1276	; 0x1276 <oled_putstr_inverse>
		adc_init();
     9bc:	0e 94 30 02 	call	0x460	; 0x460 <adc_init>
	
	
		//INTERRUPT CONFIGURATION and Plunger Configuration (INT2 is for CAN and INT 0 is for solenoid)

		DDRB= (1<<PB0);							//Make PB0 as output for plunger
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	87 bb       	out	0x17, r24	; 23
		PORTB = (1<<PB0);
     9c4:	88 bb       	out	0x18, r24	; 24
		
		sei();									//Enable Global Interrupts
     9c6:	78 94       	sei
		GICR |= (1<<INT0) | (1<<INT2);			//Enable INT_2, falling edge (ISC2 is zero)
     9c8:	8b b7       	in	r24, 0x3b	; 59
     9ca:	80 66       	ori	r24, 0x60	; 96
     9cc:	8b bf       	out	0x3b, r24	; 59
		MCUCR |= (1<<ISC01);					//Falling edge interrupt for Plunger
     9ce:	85 b7       	in	r24, 0x35	; 53
     9d0:	82 60       	ori	r24, 0x02	; 2
     9d2:	85 bf       	out	0x35, r24	; 53
	//	uart_config();
	//	fdevopen(&uart_transmit, (void *) 0);		//UART write function
	//
		//SPI and CAN functions

		spi_config();
     9d4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <spi_config>

		can_reset();
     9d8:	0e 94 6d 02 	call	0x4da	; 0x4da <can_reset>

		can_config(NORMAL);		//configure in loop back mode
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 b1 03 	call	0x762	; 0x762 <can_config>
		//
	Menu_SetGenericWriteCallback(genric_draw_fun);
     9e4:	84 ea       	ldi	r24, 0xA4	; 164
     9e6:	94 e0       	ldi	r25, 0x04	; 4
     9e8:	0e 94 27 08 	call	0x104e	; 0x104e <Menu_SetGenericWriteCallback>
	Menu_SetGenericClear(oled_clear);
     9ec:	89 ec       	ldi	r24, 0xC9	; 201
     9ee:	98 e0       	ldi	r25, 0x08	; 8
     9f0:	0e 94 68 07 	call	0xed0	; 0xed0 <Menu_SetGenericClear>
	oled_clear();
     9f4:	0e 94 c9 08 	call	0x1192	; 0x1192 <oled_clear>
	Menu_Navigate(&Menu_1);
     9f8:	89 e9       	ldi	r24, 0x99	; 153
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	0e 94 e7 07 	call	0xfce	; 0xfce <Menu_Navigate>
	Menu_DrawBase();
     a00:	0e 94 7f 07 	call	0xefe	; 0xefe <Menu_DrawBase>
	Menu_Navigate(&Menu_1);
     a04:	89 e9       	ldi	r24, 0x99	; 153
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	0e 94 e7 07 	call	0xfce	; 0xfce <Menu_Navigate>
	tx_data[3] = 8;//KP
     a0c:	88 e0       	ldi	r24, 0x08	; 8
     a0e:	8c 87       	std	Y+12, r24	; 0x0c
	tx_data[4] = 5;//KI
     a10:	85 e0       	ldi	r24, 0x05	; 5
     a12:	8d 87       	std	Y+13, r24	; 0x0d
	tx_data[5] = 5;//KD
     a14:	8e 87       	std	Y+14, r24	; 0x0e
     a16:	5e 01       	movw	r10, r28
     a18:	23 e1       	ldi	r18, 0x13	; 19
     a1a:	a2 0e       	add	r10, r18
     a1c:	b1 1c       	adc	r11, r1
     a1e:	8e 01       	movw	r16, r28
     a20:	08 5f       	subi	r16, 0xF8	; 248
     a22:	1f 4f       	sbci	r17, 0xFF	; 255
     a24:	8a 2c       	mov	r8, r10
     a26:	9b 2c       	mov	r9, r11
				if (flag_enable_debug_mode_display)
				{
					int print_temp[7];
					oled_goto_xy(5,1);
					print_temp[0] = (0x80 & tx_data[1] )? (tx_data[1] + 0xff00):tx_data[1];
					printf("data Tran: %d, x:%3d, y:%3d, tranx: %d, %d, %d, %d, %d"\
     a28:	0f 2e       	mov	r0, r31
     a2a:	f0 e9       	ldi	r31, 0x90	; 144
     a2c:	cf 2e       	mov	r12, r31
     a2e:	f1 e0       	ldi	r31, 0x01	; 1
     a30:	df 2e       	mov	r13, r31
     a32:	f0 2d       	mov	r31, r0
						print_temp[i] = (0x80 & rx_data[i] )? (rx_data[i] + 0xff00):rx_data[i];
					}
					int16_t encoder_val = (uint8_t)rx_data[5]*0x100 + (uint8_t)rx_data[6];
					int16_t set_val =  (uint8_t)rx_data[3]*0x100 + (uint8_t)rx_data[4];
					//int a = (0x80 & rx_data[2] )? (rx_data[2] + 0xff00):rx_data[2];
					printf("Receive Data: %3i, %3i, SP: %5d, ENC: %5d\n",print_temp[0],print_temp[1],set_val,encoder_val);
     a34:	0f 2e       	mov	r0, r31
     a36:	f7 ec       	ldi	r31, 0xC7	; 199
     a38:	ef 2e       	mov	r14, r31
     a3a:	f1 e0       	ldi	r31, 0x01	; 1
     a3c:	ff 2e       	mov	r15, r31
     a3e:	f0 2d       	mov	r31, r0
	tx_data[4] = 5;//KI
	tx_data[5] = 5;//KD
	while (1)
    {
		
			switch (button_val)
     a40:	80 91 8e 02 	lds	r24, 0x028E
     a44:	83 30       	cpi	r24, 0x03	; 3
     a46:	31 f1       	breq	.+76     	; 0xa94 <main+0x124>
     a48:	28 f4       	brcc	.+10     	; 0xa54 <main+0xe4>
     a4a:	81 30       	cpi	r24, 0x01	; 1
     a4c:	49 f0       	breq	.+18     	; 0xa60 <main+0xf0>
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	a1 f0       	breq	.+40     	; 0xa7a <main+0x10a>
     a52:	3c c0       	rjmp	.+120    	; 0xacc <main+0x15c>
     a54:	84 30       	cpi	r24, 0x04	; 4
     a56:	59 f1       	breq	.+86     	; 0xaae <main+0x13e>
     a58:	85 30       	cpi	r24, 0x05	; 5
     a5a:	09 f4       	brne	.+2      	; 0xa5e <main+0xee>
     a5c:	35 c0       	rjmp	.+106    	; 0xac8 <main+0x158>
     a5e:	36 c0       	rjmp	.+108    	; 0xacc <main+0x15c>
			{
				case BUTTON_UP:
					Menu_Navigate(MENU_PREVIOUS);
     a60:	0e 94 63 07 	call	0xec6	; 0xec6 <Menu_GetCurrentMenu>
     a64:	04 96       	adiw	r24, 0x04	; 4
     a66:	fc 01       	movw	r30, r24
     a68:	85 91       	lpm	r24, Z+
     a6a:	94 91       	lpm	r25, Z
     a6c:	0e 94 e7 07 	call	0xfce	; 0xfce <Menu_Navigate>
					flag_enable_debug_mode_display = 0;
     a70:	10 92 8d 02 	sts	0x028D, r1
     a74:	10 92 8c 02 	sts	0x028C, r1
					break;
     a78:	29 c0       	rjmp	.+82     	; 0xacc <main+0x15c>
				case BUTTON_DOWN:
					flag_enable_debug_mode_display = 0;
     a7a:	10 92 8d 02 	sts	0x028D, r1
     a7e:	10 92 8c 02 	sts	0x028C, r1
					Menu_Navigate(MENU_NEXT);
     a82:	0e 94 63 07 	call	0xec6	; 0xec6 <Menu_GetCurrentMenu>
     a86:	02 96       	adiw	r24, 0x02	; 2
     a88:	fc 01       	movw	r30, r24
     a8a:	85 91       	lpm	r24, Z+
     a8c:	94 91       	lpm	r25, Z
     a8e:	0e 94 e7 07 	call	0xfce	; 0xfce <Menu_Navigate>
					break;
     a92:	1c c0       	rjmp	.+56     	; 0xacc <main+0x15c>
				case BUTTON_LEFT:
					Menu_Navigate(MENU_PARENT);
     a94:	0e 94 63 07 	call	0xec6	; 0xec6 <Menu_GetCurrentMenu>
     a98:	06 96       	adiw	r24, 0x06	; 6
     a9a:	fc 01       	movw	r30, r24
     a9c:	85 91       	lpm	r24, Z+
     a9e:	94 91       	lpm	r25, Z
     aa0:	0e 94 e7 07 	call	0xfce	; 0xfce <Menu_Navigate>
					flag_enable_debug_mode_display = 0;
     aa4:	10 92 8d 02 	sts	0x028D, r1
     aa8:	10 92 8c 02 	sts	0x028C, r1
					break;
     aac:	0f c0       	rjmp	.+30     	; 0xacc <main+0x15c>
				case BUTTON_RIGHT:
					Menu_Navigate(MENU_CHILD);
     aae:	0e 94 63 07 	call	0xec6	; 0xec6 <Menu_GetCurrentMenu>
     ab2:	08 96       	adiw	r24, 0x08	; 8
     ab4:	fc 01       	movw	r30, r24
     ab6:	85 91       	lpm	r24, Z+
     ab8:	94 91       	lpm	r25, Z
     aba:	0e 94 e7 07 	call	0xfce	; 0xfce <Menu_Navigate>
					flag_enable_debug_mode_display = 0;
     abe:	10 92 8d 02 	sts	0x028D, r1
     ac2:	10 92 8c 02 	sts	0x028C, r1
					break;
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <main+0x15c>
				case BUTTON_ENTER:
					Menu_EnterCurrentItem();
     ac8:	0e 94 6d 07 	call	0xeda	; 0xeda <Menu_EnterCurrentItem>
					break;
				default:
					break;
			}
			button_val = BUTTON_NONE;
     acc:	10 92 8e 02 	sts	0x028E, r1
		
			//while (1)
			{
			adc_pos_t pos = adc_get_position();
     ad0:	0e 94 4b 02 	call	0x496	; 0x496 <adc_get_position>
     ad4:	76 2e       	mov	r7, r22
     ad6:	67 2e       	mov	r6, r23
     ad8:	58 2e       	mov	r5, r24
     ada:	8f ef       	ldi	r24, 0xFF	; 255
     adc:	9f ed       	ldi	r25, 0xDF	; 223
     ade:	21 e0       	ldi	r18, 0x01	; 1
     ae0:	81 50       	subi	r24, 0x01	; 1
     ae2:	90 40       	sbci	r25, 0x00	; 0
     ae4:	20 40       	sbci	r18, 0x00	; 0
     ae6:	e1 f7       	brne	.-8      	; 0xae0 <main+0x170>
     ae8:	00 c0       	rjmp	.+0      	; 0xaea <main+0x17a>
     aea:	00 00       	nop
			_delay_ms(125);
			/************************************************************************ /
			/ *       arrange  the frame to send to can                              * /
			/ ************************************************************************/
			tx_data[0] = pos.x*0xff00;
     aec:	19 86       	std	Y+9, r1	; 0x09
			tx_data[1] = pos.x;//(int8_t)((pos.x & 0x8000)? (((pos.x)|0x7f)+ 0x80):(pos.x));
     aee:	7a 86       	std	Y+10, r7	; 0x0a
			tx_data[2] = 255-pos.y;
     af0:	86 2d       	mov	r24, r6
     af2:	80 95       	com	r24
     af4:	8b 87       	std	Y+11, r24	; 0x0b
			tx_data[6] = 0;
			tx_data[7] = 0;*/
			
			//int x = (0x80 & pos.x )? (pos.x + 0xff00):pos.x;
			//int y = (0x80 & pos.y )? (pos.y + 0xff00):pos.y;
			can_transmit(0,0x05,8,tx_data);			//BUFFER 0, ID 0x05, 8 data bytes and data=stored string
     af6:	9e 01       	movw	r18, r28
     af8:	27 5f       	subi	r18, 0xF7	; 247
     afa:	3f 4f       	sbci	r19, 0xFF	; 255
     afc:	48 e0       	ldi	r20, 0x08	; 8
     afe:	65 e0       	ldi	r22, 0x05	; 5
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	0e 94 8a 02 	call	0x514	; 0x514 <can_transmit>
					, tx_data[0],pos.x,pos.y,tx_data[3],tx_data[4],tx_data[5],tx_data[6],tx_data[7]);		//0 is pattern, 1 is x and 2 is y
			*/

			
			//CAN RECEIVE FLAG PART
			if(can_rx_flag)
     b06:	80 91 88 02 	lds	r24, 0x0288
     b0a:	90 91 89 02 	lds	r25, 0x0289
     b0e:	89 2b       	or	r24, r25
     b10:	69 f0       	breq	.+26     	; 0xb2c <main+0x1bc>
					encoder upper byte from node 2
					encoder lower byte from node 2
																						* /
				/ ************************************************************************/

				can_rx_flag=0;
     b12:	10 92 89 02 	sts	0x0289, r1
     b16:	10 92 88 02 	sts	0x0288, r1
				can_receive(rx_id,rx_length,rx_data);
     b1a:	ae 01       	movw	r20, r28
     b1c:	4f 5f       	subi	r20, 0xFF	; 255
     b1e:	5f 4f       	sbci	r21, 0xFF	; 255
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	ce 01       	movw	r24, r28
     b26:	41 96       	adiw	r24, 0x11	; 17
     b28:	0e 94 2d 03 	call	0x65a	; 0x65a <can_receive>
				*/

			}
			
			// enable debug mode displaying
				if (flag_enable_debug_mode_display)
     b2c:	20 91 8c 02 	lds	r18, 0x028C
     b30:	30 91 8d 02 	lds	r19, 0x028D
     b34:	23 2b       	or	r18, r19
     b36:	09 f4       	brne	.+2      	; 0xb3a <main+0x1ca>
     b38:	63 c0       	rjmp	.+198    	; 0xc00 <main+0x290>
				{
					int print_temp[7];
					oled_goto_xy(5,1);
     b3a:	61 e0       	ldi	r22, 0x01	; 1
     b3c:	85 e0       	ldi	r24, 0x05	; 5
     b3e:	0e 94 65 08 	call	0x10ca	; 0x10ca <oled_goto_xy>
					print_temp[0] = (0x80 & tx_data[1] )? (tx_data[1] + 0xff00):tx_data[1];
     b42:	8a 85       	ldd	r24, Y+10	; 0x0a
     b44:	88 23       	and	r24, r24
     b46:	1c f4       	brge	.+6      	; 0xb4e <main+0x1de>
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	9a 95       	dec	r25
     b4c:	01 c0       	rjmp	.+2      	; 0xb50 <main+0x1e0>
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	9c 8b       	std	Y+20, r25	; 0x14
     b52:	8b 8b       	std	Y+19, r24	; 0x13
					printf("data Tran: %d, x:%3d, y:%3d, tranx: %d, %d, %d, %d, %d"\
     b54:	88 89       	ldd	r24, Y+16	; 0x10
     b56:	1f 92       	push	r1
     b58:	8f 93       	push	r24
     b5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b5c:	1f 92       	push	r1
     b5e:	8f 93       	push	r24
     b60:	8e 85       	ldd	r24, Y+14	; 0x0e
     b62:	1f 92       	push	r1
     b64:	8f 93       	push	r24
     b66:	8d 85       	ldd	r24, Y+13	; 0x0d
     b68:	1f 92       	push	r1
     b6a:	8f 93       	push	r24
     b6c:	8c 85       	ldd	r24, Y+12	; 0x0c
     b6e:	1f 92       	push	r1
     b70:	8f 93       	push	r24
     b72:	5f 92       	push	r5
     b74:	6f 92       	push	r6
     b76:	1f 92       	push	r1
     b78:	7f 92       	push	r7
     b7a:	89 85       	ldd	r24, Y+9	; 0x09
     b7c:	1f 92       	push	r1
     b7e:	8f 93       	push	r24
     b80:	df 92       	push	r13
     b82:	cf 92       	push	r12
     b84:	0e 94 1e 0a 	call	0x143c	; 0x143c <printf>
					, tx_data[0],pos.x,pos.y,tx_data[3],tx_data[4],tx_data[5],tx_data[6],tx_data[7]);		//0 is pattern, 1 is x and 2 is y
					oled_goto_xy(5,4);
     b88:	64 e0       	ldi	r22, 0x04	; 4
     b8a:	85 e0       	ldi	r24, 0x05	; 5
     b8c:	0e 94 65 08 	call	0x10ca	; 0x10ca <oled_goto_xy>
     b90:	fe 01       	movw	r30, r28
     b92:	31 96       	adiw	r30, 0x01	; 1
     b94:	a8 2d       	mov	r26, r8
     b96:	b9 2d       	mov	r27, r9
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
					
					int i;
					for (i = 0; i< 7; i++)
					{
						print_temp[i] = (0x80 & rx_data[i] )? (rx_data[i] + 0xff00):rx_data[i];
     ba2:	81 91       	ld	r24, Z+
     ba4:	88 23       	and	r24, r24
     ba6:	1c f4       	brge	.+6      	; 0xbae <main+0x23e>
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	9a 95       	dec	r25
     bac:	01 c0       	rjmp	.+2      	; 0xbb0 <main+0x240>
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	8d 93       	st	X+, r24
     bb2:	9d 93       	st	X+, r25
					printf("data Tran: %d, x:%3d, y:%3d, tranx: %d, %d, %d, %d, %d"\
					, tx_data[0],pos.x,pos.y,tx_data[3],tx_data[4],tx_data[5],tx_data[6],tx_data[7]);		//0 is pattern, 1 is x and 2 is y
					oled_goto_xy(5,4);
					
					int i;
					for (i = 0; i< 7; i++)
     bb4:	e0 17       	cp	r30, r16
     bb6:	f1 07       	cpc	r31, r17
     bb8:	a1 f7       	brne	.-24     	; 0xba2 <main+0x232>
					{
						print_temp[i] = (0x80 & rx_data[i] )? (rx_data[i] + 0xff00):rx_data[i];
					}
					int16_t encoder_val = (uint8_t)rx_data[5]*0x100 + (uint8_t)rx_data[6];
     bba:	8e 81       	ldd	r24, Y+6	; 0x06
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	98 2f       	mov	r25, r24
     bc0:	88 27       	eor	r24, r24
     bc2:	2f 81       	ldd	r18, Y+7	; 0x07
     bc4:	82 0f       	add	r24, r18
     bc6:	91 1d       	adc	r25, r1
					int16_t set_val =  (uint8_t)rx_data[3]*0x100 + (uint8_t)rx_data[4];
					//int a = (0x80 & rx_data[2] )? (rx_data[2] + 0xff00):rx_data[2];
					printf("Receive Data: %3i, %3i, SP: %5d, ENC: %5d\n",print_temp[0],print_temp[1],set_val,encoder_val);
     bc8:	9f 93       	push	r25
     bca:	8f 93       	push	r24
					for (i = 0; i< 7; i++)
					{
						print_temp[i] = (0x80 & rx_data[i] )? (rx_data[i] + 0xff00):rx_data[i];
					}
					int16_t encoder_val = (uint8_t)rx_data[5]*0x100 + (uint8_t)rx_data[6];
					int16_t set_val =  (uint8_t)rx_data[3]*0x100 + (uint8_t)rx_data[4];
     bcc:	8c 81       	ldd	r24, Y+4	; 0x04
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	98 2f       	mov	r25, r24
     bd2:	88 27       	eor	r24, r24
     bd4:	2d 81       	ldd	r18, Y+5	; 0x05
     bd6:	82 0f       	add	r24, r18
     bd8:	91 1d       	adc	r25, r1
					//int a = (0x80 & rx_data[2] )? (rx_data[2] + 0xff00):rx_data[2];
					printf("Receive Data: %3i, %3i, SP: %5d, ENC: %5d\n",print_temp[0],print_temp[1],set_val,encoder_val);
     bda:	9f 93       	push	r25
     bdc:	8f 93       	push	r24
     bde:	8e 89       	ldd	r24, Y+22	; 0x16
     be0:	8f 93       	push	r24
     be2:	8d 89       	ldd	r24, Y+21	; 0x15
     be4:	8f 93       	push	r24
     be6:	8c 89       	ldd	r24, Y+20	; 0x14
     be8:	8f 93       	push	r24
     bea:	8b 89       	ldd	r24, Y+19	; 0x13
     bec:	8f 93       	push	r24
     bee:	ff 92       	push	r15
     bf0:	ef 92       	push	r14
     bf2:	0e 94 1e 0a 	call	0x143c	; 0x143c <printf>
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61



				//PLUNGER FLAG PART

				if(flag_plunger)
     c00:	80 91 86 02 	lds	r24, 0x0286
     c04:	90 91 87 02 	lds	r25, 0x0287
     c08:	89 2b       	or	r24, r25
     c0a:	31 f0       	breq	.+12     	; 0xc18 <main+0x2a8>
				{
					flag_plunger=0;     //clear flag
     c0c:	10 92 87 02 	sts	0x0287, r1
     c10:	10 92 86 02 	sts	0x0286, r1
					plunger();             //call plunger functions
     c14:	0e 94 af 04 	call	0x95e	; 0x95e <plunger>
				}
			
				// Terminal command parsing
				if(is_main_not_fetch_the_buffer){
     c18:	80 91 84 02 	lds	r24, 0x0284
     c1c:	90 91 85 02 	lds	r25, 0x0285
     c20:	89 2b       	or	r24, r25
     c22:	09 f4       	brne	.+2      	; 0xc26 <main+0x2b6>
     c24:	0d cf       	rjmp	.-486    	; 0xa40 <main+0xd0>
					
					oled_goto_xy(0,0);
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	0e 94 65 08 	call	0x10ca	; 0x10ca <oled_goto_xy>
					printf("%s",rx_buff);
     c2e:	87 e9       	ldi	r24, 0x97	; 151
     c30:	92 e0       	ldi	r25, 0x02	; 2
     c32:	9f 93       	push	r25
     c34:	8f 93       	push	r24
     c36:	82 ef       	ldi	r24, 0xF2	; 242
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	9f 93       	push	r25
     c3c:	8f 93       	push	r24
     c3e:	0e 94 1e 0a 	call	0x143c	; 0x143c <printf>
					is_main_not_fetch_the_buffer = 0;
     c42:	10 92 85 02 	sts	0x0285, r1
     c46:	10 92 84 02 	sts	0x0284, r1
					// menu navigation cmd
					if (!strcmp("e\n",rx_buff))
     c4a:	67 e9       	ldi	r22, 0x97	; 151
     c4c:	72 e0       	ldi	r23, 0x02	; 2
     c4e:	85 ef       	ldi	r24, 0xF5	; 245
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	0e 94 cb 09 	call	0x1396	; 0x1396 <strcmp>
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	89 2b       	or	r24, r25
     c60:	21 f4       	brne	.+8      	; 0xc6a <main+0x2fa>
					{
						button_val = BUTTON_UP;
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	80 93 8e 02 	sts	0x028E, r24
     c68:	7f c0       	rjmp	.+254    	; 0xd68 <main+0x3f8>
					} else if (!strcmp("d\n",rx_buff))
     c6a:	67 e9       	ldi	r22, 0x97	; 151
     c6c:	72 e0       	ldi	r23, 0x02	; 2
     c6e:	8c e7       	ldi	r24, 0x7C	; 124
     c70:	92 e0       	ldi	r25, 0x02	; 2
     c72:	0e 94 cb 09 	call	0x1396	; 0x1396 <strcmp>
     c76:	89 2b       	or	r24, r25
     c78:	21 f4       	brne	.+8      	; 0xc82 <main+0x312>
					{
						button_val = BUTTON_DOWN;
     c7a:	82 e0       	ldi	r24, 0x02	; 2
     c7c:	80 93 8e 02 	sts	0x028E, r24
     c80:	73 c0       	rjmp	.+230    	; 0xd68 <main+0x3f8>
					} else if (!strcmp("s\n",rx_buff))
     c82:	67 e9       	ldi	r22, 0x97	; 151
     c84:	72 e0       	ldi	r23, 0x02	; 2
     c86:	88 ef       	ldi	r24, 0xF8	; 248
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	0e 94 cb 09 	call	0x1396	; 0x1396 <strcmp>
     c8e:	89 2b       	or	r24, r25
     c90:	21 f4       	brne	.+8      	; 0xc9a <main+0x32a>
					{
						button_val = BUTTON_LEFT;
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	80 93 8e 02 	sts	0x028E, r24
     c98:	67 c0       	rjmp	.+206    	; 0xd68 <main+0x3f8>
					} else if (!strcmp("f\n",rx_buff))
     c9a:	67 e9       	ldi	r22, 0x97	; 151
     c9c:	72 e0       	ldi	r23, 0x02	; 2
     c9e:	8b ef       	ldi	r24, 0xFB	; 251
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	0e 94 cb 09 	call	0x1396	; 0x1396 <strcmp>
     ca6:	89 2b       	or	r24, r25
     ca8:	21 f4       	brne	.+8      	; 0xcb2 <main+0x342>
					{
						button_val = BUTTON_RIGHT;
     caa:	84 e0       	ldi	r24, 0x04	; 4
     cac:	80 93 8e 02 	sts	0x028E, r24
     cb0:	5b c0       	rjmp	.+182    	; 0xd68 <main+0x3f8>
					}  else if (!strcmp("q\n",rx_buff))
     cb2:	67 e9       	ldi	r22, 0x97	; 151
     cb4:	72 e0       	ldi	r23, 0x02	; 2
     cb6:	8e ef       	ldi	r24, 0xFE	; 254
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	0e 94 cb 09 	call	0x1396	; 0x1396 <strcmp>
     cbe:	89 2b       	or	r24, r25
     cc0:	21 f4       	brne	.+8      	; 0xcca <main+0x35a>
					{
						button_val = BUTTON_ENTER;
     cc2:	85 e0       	ldi	r24, 0x05	; 5
     cc4:	80 93 8e 02 	sts	0x028E, r24
     cc8:	4f c0       	rjmp	.+158    	; 0xd68 <main+0x3f8>
					}	else 
					// Online Tuning Mode
					if (!strcmp("config\n",rx_buff))
     cca:	67 e9       	ldi	r22, 0x97	; 151
     ccc:	72 e0       	ldi	r23, 0x02	; 2
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	92 e0       	ldi	r25, 0x02	; 2
     cd2:	0e 94 cb 09 	call	0x1396	; 0x1396 <strcmp>
     cd6:	89 2b       	or	r24, r25
     cd8:	79 f5       	brne	.+94     	; 0xd38 <main+0x3c8>
					{	
						flag_enable_debug_mode_display = 0;
     cda:	10 92 8d 02 	sts	0x028D, r1
     cde:	10 92 8c 02 	sts	0x028C, r1
						Menu_Navigate(&Menu_2_1);
     ce2:	85 ec       	ldi	r24, 0xC5	; 197
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 e7 07 	call	0xfce	; 0xfce <Menu_Navigate>
						oled_goto_xy(6,0);
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	86 e0       	ldi	r24, 0x06	; 6
     cee:	0e 94 65 08 	call	0x10ca	; 0x10ca <oled_goto_xy>
						puts("Into PID config mode");
     cf2:	89 e0       	ldi	r24, 0x09	; 9
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	0e 94 32 0a 	call	0x1464	; 0x1464 <puts>
						oled_goto_xy(2,5);
     cfa:	65 e0       	ldi	r22, 0x05	; 5
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	0e 94 65 08 	call	0x10ca	; 0x10ca <oled_goto_xy>
						printf("Current Kp%2d, Ki%2d, Kd%2d",tx_data[3],tx_data[4],tx_data[5]);
     d02:	8e 85       	ldd	r24, Y+14	; 0x0e
     d04:	1f 92       	push	r1
     d06:	8f 93       	push	r24
     d08:	8d 85       	ldd	r24, Y+13	; 0x0d
     d0a:	1f 92       	push	r1
     d0c:	8f 93       	push	r24
     d0e:	8c 85       	ldd	r24, Y+12	; 0x0c
     d10:	1f 92       	push	r1
     d12:	8f 93       	push	r24
     d14:	8e e1       	ldi	r24, 0x1E	; 30
     d16:	92 e0       	ldi	r25, 0x02	; 2
     d18:	9f 93       	push	r25
     d1a:	8f 93       	push	r24
     d1c:	0e 94 1e 0a 	call	0x143c	; 0x143c <printf>
						flag_enable_online_tuning = 1;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	90 93 8b 02 	sts	0x028B, r25
     d28:	80 93 8a 02 	sts	0x028A, r24
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
     d36:	18 c0       	rjmp	.+48     	; 0xd68 <main+0x3f8>
					}else 
					// Play Mode
					if (!strcmp("play\n",rx_buff))
     d38:	67 e9       	ldi	r22, 0x97	; 151
     d3a:	72 e0       	ldi	r23, 0x02	; 2
     d3c:	8a e3       	ldi	r24, 0x3A	; 58
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	0e 94 cb 09 	call	0x1396	; 0x1396 <strcmp>
     d44:	89 2b       	or	r24, r25
     d46:	81 f4       	brne	.+32     	; 0xd68 <main+0x3f8>
					{	
						flag_enable_debug_mode_display = 0;
     d48:	10 92 8d 02 	sts	0x028D, r1
     d4c:	10 92 8c 02 	sts	0x028C, r1
						Menu_Navigate(&Menu_1_1);
     d50:	88 e1       	ldi	r24, 0x18	; 24
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	0e 94 e7 07 	call	0xfce	; 0xfce <Menu_Navigate>
						oled_goto_xy(6,0);
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	86 e0       	ldi	r24, 0x06	; 6
     d5c:	0e 94 65 08 	call	0x10ca	; 0x10ca <oled_goto_xy>
						puts("Into Play mode");
     d60:	80 e4       	ldi	r24, 0x40	; 64
     d62:	92 e0       	ldi	r25, 0x02	; 2
     d64:	0e 94 32 0a 	call	0x1464	; 0x1464 <puts>
					}
					if (!strcmp("debug\n",rx_buff))
     d68:	67 e9       	ldi	r22, 0x97	; 151
     d6a:	72 e0       	ldi	r23, 0x02	; 2
     d6c:	8f e4       	ldi	r24, 0x4F	; 79
     d6e:	92 e0       	ldi	r25, 0x02	; 2
     d70:	0e 94 cb 09 	call	0x1396	; 0x1396 <strcmp>
     d74:	89 2b       	or	r24, r25
     d76:	31 f4       	brne	.+12     	; 0xd84 <main+0x414>
					{
						Menu_Navigate(&Menu_3_1);
     d78:	80 e7       	ldi	r24, 0x70	; 112
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	0e 94 e7 07 	call	0xfce	; 0xfce <Menu_Navigate>
						/*oled_goto_xy(6,0);
						puts("Into Debug mode");*/
						Menu_EnterCurrentItem();
     d80:	0e 94 6d 07 	call	0xeda	; 0xeda <Menu_EnterCurrentItem>
					}
					
					/************************************************************************/
					/*    online changing pid gains enabled                                 */
					/************************************************************************/
					if (flag_enable_online_tuning)
     d84:	80 91 8a 02 	lds	r24, 0x028A
     d88:	90 91 8b 02 	lds	r25, 0x028B
     d8c:	89 2b       	or	r24, r25
     d8e:	09 f4       	brne	.+2      	; 0xd92 <main+0x422>
     d90:	57 ce       	rjmp	.-850    	; 0xa40 <main+0xd0>
					{	
						printf("changing kp\n");
     d92:	86 e5       	ldi	r24, 0x56	; 86
     d94:	92 e0       	ldi	r25, 0x02	; 2
     d96:	0e 94 32 0a 	call	0x1464	; 0x1464 <puts>
						if (!strncmp("kp ",rx_buff,3)){
     d9a:	43 e0       	ldi	r20, 0x03	; 3
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	67 e9       	ldi	r22, 0x97	; 151
     da0:	72 e0       	ldi	r23, 0x02	; 2
     da2:	82 e6       	ldi	r24, 0x62	; 98
     da4:	92 e0       	ldi	r25, 0x02	; 2
     da6:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <strncmp>
     daa:	89 2b       	or	r24, r25
     dac:	09 f0       	breq	.+2      	; 0xdb0 <main+0x440>
     dae:	3c ce       	rjmp	.-904    	; 0xa28 <main+0xb8>
							printf("changing kp2\n");
     db0:	86 e6       	ldi	r24, 0x66	; 102
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	0e 94 32 0a 	call	0x1464	; 0x1464 <puts>
							tx_data[3] = atoi(&rx_buff[3]);
     db8:	8a e9       	ldi	r24, 0x9A	; 154
     dba:	92 e0       	ldi	r25, 0x02	; 2
     dbc:	0e 94 ad 09 	call	0x135a	; 0x135a <atoi>
     dc0:	8c 87       	std	Y+12, r24	; 0x0c
							printf("new kp: %d\n",tx_data[3]);
     dc2:	99 27       	eor	r25, r25
     dc4:	9f 93       	push	r25
     dc6:	8f 93       	push	r24
     dc8:	83 e7       	ldi	r24, 0x73	; 115
     dca:	92 e0       	ldi	r25, 0x02	; 2
     dcc:	9f 93       	push	r25
     dce:	8f 93       	push	r24
     dd0:	0e 94 1e 0a 	call	0x143c	; 0x143c <printf>
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	20 ce       	rjmp	.-960    	; 0xa1e <main+0xae>

00000dde <__vector_3>:
                                                                               */
      /************************************************************************/


ISR(INT2_vect)
{
     dde:	1f 92       	push	r1
     de0:	0f 92       	push	r0
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	0f 92       	push	r0
     de6:	11 24       	eor	r1, r1
     de8:	8f 93       	push	r24
     dea:	9f 93       	push	r25
	can_rx_flag=1;					//set receive (CAN receive NOT UART!!!) flag for main function, flag will be cleared in main.
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	90 93 89 02 	sts	0x0289, r25
     df4:	80 93 88 02 	sts	0x0288, r24
	GIFR &= ~(1<<INTF2);		//clear interrupt flag
     df8:	8a b7       	in	r24, 0x3a	; 58
     dfa:	8f 7d       	andi	r24, 0xDF	; 223
     dfc:	8a bf       	out	0x3a, r24	; 58
}
     dfe:	9f 91       	pop	r25
     e00:	8f 91       	pop	r24
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <__vector_1>:


ISR(INT0_vect)
{
     e0c:	1f 92       	push	r1
     e0e:	0f 92       	push	r0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	0f 92       	push	r0
     e14:	11 24       	eor	r1, r1
     e16:	8f 93       	push	r24
     e18:	9f 93       	push	r25
	flag_plunger=1;		//set flag
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	90 93 87 02 	sts	0x0287, r25
     e22:	80 93 86 02 	sts	0x0286, r24
	GIFR &= ~(1<<INTF0);	//clear flag of interrupt
     e26:	8a b7       	in	r24, 0x3a	; 58
     e28:	8f 7b       	andi	r24, 0xBF	; 191
     e2a:	8a bf       	out	0x3a, r24	; 58
}
     e2c:	9f 91       	pop	r25
     e2e:	8f 91       	pop	r24
     e30:	0f 90       	pop	r0
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	0f 90       	pop	r0
     e36:	1f 90       	pop	r1
     e38:	18 95       	reti

00000e3a <__vector_20>:


ISR ( USART1_RXC_vect)
{
     e3a:	1f 92       	push	r1
     e3c:	0f 92       	push	r0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	0f 92       	push	r0
     e42:	11 24       	eor	r1, r1
     e44:	2f 93       	push	r18
     e46:	8f 93       	push	r24
     e48:	9f 93       	push	r25
     e4a:	ef 93       	push	r30
     e4c:	ff 93       	push	r31
	
		if(!is_main_not_fetch_the_buffer){
     e4e:	80 91 84 02 	lds	r24, 0x0284
     e52:	90 91 85 02 	lds	r25, 0x0285
     e56:	89 2b       	or	r24, r25
     e58:	61 f5       	brne	.+88     	; 0xeb2 <__vector_20+0x78>
			
			rx_buff[rx_count]=UDR1;
     e5a:	83 b1       	in	r24, 0x03	; 3
     e5c:	e0 91 82 02 	lds	r30, 0x0282
     e60:	f0 91 83 02 	lds	r31, 0x0283
     e64:	e9 56       	subi	r30, 0x69	; 105
     e66:	fd 4f       	sbci	r31, 0xFD	; 253
     e68:	80 83       	st	Z, r24
			
			
			//UCSR1A &= ~(1<<RXC1);		//Clear Flag
			//UCSR1A |= (1<<UDRE1);		//Flush the buffer and enable it for next transmission
			UCSR1A &= ~(1<<RXC1);		//Clear Flag
     e6a:	17 98       	cbi	0x02, 7	; 2
			
			if(rx_buff[rx_count]=='\r'||rx_buff[rx_count]=='\n'||rx_count>18)
     e6c:	80 91 82 02 	lds	r24, 0x0282
     e70:	90 91 83 02 	lds	r25, 0x0283
     e74:	fc 01       	movw	r30, r24
     e76:	e9 56       	subi	r30, 0x69	; 105
     e78:	fd 4f       	sbci	r31, 0xFD	; 253
     e7a:	20 81       	ld	r18, Z
     e7c:	2d 30       	cpi	r18, 0x0D	; 13
     e7e:	29 f0       	breq	.+10     	; 0xe8a <__vector_20+0x50>
     e80:	2a 30       	cpi	r18, 0x0A	; 10
     e82:	19 f0       	breq	.+6      	; 0xe8a <__vector_20+0x50>
     e84:	83 31       	cpi	r24, 0x13	; 19
     e86:	91 05       	cpc	r25, r1
     e88:	7c f0       	brlt	.+30     	; 0xea8 <__vector_20+0x6e>
			{
				rx_buff[rx_count+1] = '\0';
     e8a:	fc 01       	movw	r30, r24
     e8c:	e9 56       	subi	r30, 0x69	; 105
     e8e:	fd 4f       	sbci	r31, 0xFD	; 253
     e90:	11 82       	std	Z+1, r1	; 0x01
				rx_count=0;
     e92:	10 92 83 02 	sts	0x0283, r1
     e96:	10 92 82 02 	sts	0x0282, r1
				is_main_not_fetch_the_buffer=1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	90 93 85 02 	sts	0x0285, r25
     ea2:	80 93 84 02 	sts	0x0284, r24
     ea6:	05 c0       	rjmp	.+10     	; 0xeb2 <__vector_20+0x78>
			
			}else{
				rx_count++;
     ea8:	01 96       	adiw	r24, 0x01	; 1
     eaa:	90 93 83 02 	sts	0x0283, r25
     eae:	80 93 82 02 	sts	0x0282, r24
				
				
			}	
		}
		
}
     eb2:	ff 91       	pop	r31
     eb4:	ef 91       	pop	r30
     eb6:	9f 91       	pop	r25
     eb8:	8f 91       	pop	r24
     eba:	2f 91       	pop	r18
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	0f 90       	pop	r0
     ec2:	1f 90       	pop	r1
     ec4:	18 95       	reti

00000ec6 <Menu_GetCurrentMenu>:
     ec6:	80 91 1c 01 	lds	r24, 0x011C
     eca:	90 91 1d 01 	lds	r25, 0x011D
     ece:	08 95       	ret

00000ed0 <Menu_SetGenericClear>:
     ed0:	90 93 92 02 	sts	0x0292, r25
     ed4:	80 93 91 02 	sts	0x0291, r24
     ed8:	08 95       	ret

00000eda <Menu_EnterCurrentItem>:
     eda:	e0 91 1c 01 	lds	r30, 0x011C
     ede:	f0 91 1d 01 	lds	r31, 0x011D
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	e3 3b       	cpi	r30, 0xB3	; 179
     ee6:	f8 07       	cpc	r31, r24
     ee8:	49 f0       	breq	.+18     	; 0xefc <Menu_EnterCurrentItem+0x22>
     eea:	30 97       	sbiw	r30, 0x00	; 0
     eec:	39 f0       	breq	.+14     	; 0xefc <Menu_EnterCurrentItem+0x22>
     eee:	3c 96       	adiw	r30, 0x0c	; 12
     ef0:	85 91       	lpm	r24, Z+
     ef2:	94 91       	lpm	r25, Z
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	11 f0       	breq	.+4      	; 0xefc <Menu_EnterCurrentItem+0x22>
     ef8:	fc 01       	movw	r30, r24
     efa:	09 95       	icall
     efc:	08 95       	ret

00000efe <Menu_DrawBase>:
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	c0 91 1c 01 	lds	r28, 0x011C
     f06:	d0 91 1d 01 	lds	r29, 0x011D
     f0a:	21 e0       	ldi	r18, 0x01	; 1
     f0c:	c3 3b       	cpi	r28, 0xB3	; 179
     f0e:	d2 07       	cpc	r29, r18
     f10:	09 f4       	brne	.+2      	; 0xf14 <Menu_DrawBase+0x16>
     f12:	5a c0       	rjmp	.+180    	; 0xfc8 <Menu_DrawBase+0xca>
     f14:	20 97       	sbiw	r28, 0x00	; 0
     f16:	09 f4       	brne	.+2      	; 0xf1a <Menu_DrawBase+0x1c>
     f18:	57 c0       	rjmp	.+174    	; 0xfc8 <Menu_DrawBase+0xca>
     f1a:	ce 01       	movw	r24, r28
     f1c:	04 96       	adiw	r24, 0x04	; 4
     f1e:	fc 01       	movw	r30, r24
     f20:	25 91       	lpm	r18, Z+
     f22:	34 91       	lpm	r19, Z
     f24:	23 5b       	subi	r18, 0xB3	; 179
     f26:	31 40       	sbci	r19, 0x01	; 1
     f28:	a9 f0       	breq	.+42     	; 0xf54 <Menu_DrawBase+0x56>
     f2a:	fc 01       	movw	r30, r24
     f2c:	25 91       	lpm	r18, Z+
     f2e:	34 91       	lpm	r19, Z
     f30:	23 2b       	or	r18, r19
     f32:	81 f0       	breq	.+32     	; 0xf54 <Menu_DrawBase+0x56>
     f34:	fc 01       	movw	r30, r24
     f36:	85 91       	lpm	r24, Z+
     f38:	94 91       	lpm	r25, Z
     f3a:	ec 01       	movw	r28, r24
     f3c:	04 96       	adiw	r24, 0x04	; 4
     f3e:	fc 01       	movw	r30, r24
     f40:	25 91       	lpm	r18, Z+
     f42:	34 91       	lpm	r19, Z
     f44:	23 5b       	subi	r18, 0xB3	; 179
     f46:	31 40       	sbci	r19, 0x01	; 1
     f48:	29 f0       	breq	.+10     	; 0xf54 <Menu_DrawBase+0x56>
     f4a:	fc 01       	movw	r30, r24
     f4c:	25 91       	lpm	r18, Z+
     f4e:	34 91       	lpm	r19, Z
     f50:	23 2b       	or	r18, r19
     f52:	81 f7       	brne	.-32     	; 0xf34 <Menu_DrawBase+0x36>
     f54:	20 91 93 02 	lds	r18, 0x0293
     f58:	30 91 94 02 	lds	r19, 0x0294
     f5c:	21 15       	cp	r18, r1
     f5e:	31 05       	cpc	r19, r1
     f60:	09 f4       	brne	.+2      	; 0xf64 <Menu_DrawBase+0x66>
     f62:	32 c0       	rjmp	.+100    	; 0xfc8 <Menu_DrawBase+0xca>
     f64:	fe 01       	movw	r30, r28
     f66:	31 96       	adiw	r30, 0x01	; 1
     f68:	64 91       	lpm	r22, Z
     f6a:	fe 01       	movw	r30, r28
     f6c:	84 91       	lpm	r24, Z
     f6e:	ae 01       	movw	r20, r28
     f70:	42 5f       	subi	r20, 0xF2	; 242
     f72:	5f 4f       	sbci	r21, 0xFF	; 255
     f74:	f9 01       	movw	r30, r18
     f76:	09 95       	icall
     f78:	22 96       	adiw	r28, 0x02	; 2
     f7a:	fe 01       	movw	r30, r28
     f7c:	85 91       	lpm	r24, Z+
     f7e:	94 91       	lpm	r25, Z
     f80:	83 5b       	subi	r24, 0xB3	; 179
     f82:	91 40       	sbci	r25, 0x01	; 1
     f84:	09 f1       	breq	.+66     	; 0xfc8 <Menu_DrawBase+0xca>
     f86:	fe 01       	movw	r30, r28
     f88:	85 91       	lpm	r24, Z+
     f8a:	94 91       	lpm	r25, Z
     f8c:	89 2b       	or	r24, r25
     f8e:	e1 f0       	breq	.+56     	; 0xfc8 <Menu_DrawBase+0xca>
     f90:	fe 01       	movw	r30, r28
     f92:	c5 91       	lpm	r28, Z+
     f94:	d4 91       	lpm	r29, Z
     f96:	fe 01       	movw	r30, r28
     f98:	31 96       	adiw	r30, 0x01	; 1
     f9a:	64 91       	lpm	r22, Z
     f9c:	fe 01       	movw	r30, r28
     f9e:	84 91       	lpm	r24, Z
     fa0:	ae 01       	movw	r20, r28
     fa2:	42 5f       	subi	r20, 0xF2	; 242
     fa4:	5f 4f       	sbci	r21, 0xFF	; 255
     fa6:	e0 91 93 02 	lds	r30, 0x0293
     faa:	f0 91 94 02 	lds	r31, 0x0294
     fae:	09 95       	icall
     fb0:	22 96       	adiw	r28, 0x02	; 2
     fb2:	fe 01       	movw	r30, r28
     fb4:	85 91       	lpm	r24, Z+
     fb6:	94 91       	lpm	r25, Z
     fb8:	83 5b       	subi	r24, 0xB3	; 179
     fba:	91 40       	sbci	r25, 0x01	; 1
     fbc:	29 f0       	breq	.+10     	; 0xfc8 <Menu_DrawBase+0xca>
     fbe:	fe 01       	movw	r30, r28
     fc0:	85 91       	lpm	r24, Z+
     fc2:	94 91       	lpm	r25, Z
     fc4:	89 2b       	or	r24, r25
     fc6:	21 f7       	brne	.-56     	; 0xf90 <Menu_DrawBase+0x92>
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <Menu_Navigate>:
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	21 e0       	ldi	r18, 0x01	; 1
     fd4:	83 3b       	cpi	r24, 0xB3	; 179
     fd6:	92 07       	cpc	r25, r18
     fd8:	09 f4       	brne	.+2      	; 0xfdc <Menu_Navigate+0xe>
     fda:	36 c0       	rjmp	.+108    	; 0x1048 <Menu_Navigate+0x7a>
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	09 f4       	brne	.+2      	; 0xfe2 <Menu_Navigate+0x14>
     fe0:	33 c0       	rjmp	.+102    	; 0x1048 <Menu_Navigate+0x7a>
     fe2:	e0 91 1c 01 	lds	r30, 0x011C
     fe6:	f0 91 1d 01 	lds	r31, 0x011D
     fea:	f0 93 90 02 	sts	0x0290, r31
     fee:	e0 93 8f 02 	sts	0x028F, r30
     ff2:	90 93 1d 01 	sts	0x011D, r25
     ff6:	80 93 1c 01 	sts	0x011C, r24
     ffa:	36 96       	adiw	r30, 0x06	; 6
     ffc:	25 91       	lpm	r18, Z+
     ffe:	34 91       	lpm	r19, Z
    1000:	06 96       	adiw	r24, 0x06	; 6
    1002:	fc 01       	movw	r30, r24
    1004:	85 91       	lpm	r24, Z+
    1006:	94 91       	lpm	r25, Z
    1008:	28 17       	cp	r18, r24
    100a:	39 07       	cpc	r19, r25
    100c:	29 f0       	breq	.+10     	; 0x1018 <Menu_Navigate+0x4a>
    100e:	e0 91 91 02 	lds	r30, 0x0291
    1012:	f0 91 92 02 	lds	r31, 0x0292
    1016:	09 95       	icall
    1018:	e0 91 1c 01 	lds	r30, 0x011C
    101c:	f0 91 1d 01 	lds	r31, 0x011D
    1020:	3a 96       	adiw	r30, 0x0a	; 10
    1022:	c5 91       	lpm	r28, Z+
    1024:	d4 91       	lpm	r29, Z
    1026:	0e 94 7f 07 	call	0xefe	; 0xefe <Menu_DrawBase>
    102a:	20 97       	sbiw	r28, 0x00	; 0
    102c:	69 f0       	breq	.+26     	; 0x1048 <Menu_Navigate+0x7a>
    102e:	40 91 1c 01 	lds	r20, 0x011C
    1032:	50 91 1d 01 	lds	r21, 0x011D
    1036:	fa 01       	movw	r30, r20
    1038:	31 96       	adiw	r30, 0x01	; 1
    103a:	64 91       	lpm	r22, Z
    103c:	fa 01       	movw	r30, r20
    103e:	84 91       	lpm	r24, Z
    1040:	42 5f       	subi	r20, 0xF2	; 242
    1042:	5f 4f       	sbci	r21, 0xFF	; 255
    1044:	fe 01       	movw	r30, r28
    1046:	09 95       	icall
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	08 95       	ret

0000104e <Menu_SetGenericWriteCallback>:
    104e:	90 93 94 02 	sts	0x0294, r25
    1052:	80 93 93 02 	sts	0x0293, r24
    1056:	80 91 1c 01 	lds	r24, 0x011C
    105a:	90 91 1d 01 	lds	r25, 0x011D
    105e:	0e 94 e7 07 	call	0xfce	; 0xfce <Menu_Navigate>
    1062:	08 95       	ret

00001064 <oled_init>:
    1064:	85 b7       	in	r24, 0x35	; 53
    1066:	80 68       	ori	r24, 0x80	; 128
    1068:	85 bf       	out	0x35, r24	; 53
    106a:	80 b7       	in	r24, 0x30	; 48
    106c:	80 62       	ori	r24, 0x20	; 32
    106e:	80 bf       	out	0x30, r24	; 48
    1070:	ef e0       	ldi	r30, 0x0F	; 15
    1072:	f0 e1       	ldi	r31, 0x10	; 16
    1074:	8e ea       	ldi	r24, 0xAE	; 174
    1076:	80 83       	st	Z, r24
    1078:	81 ea       	ldi	r24, 0xA1	; 161
    107a:	80 83       	st	Z, r24
    107c:	8a ed       	ldi	r24, 0xDA	; 218
    107e:	80 83       	st	Z, r24
    1080:	82 e1       	ldi	r24, 0x12	; 18
    1082:	80 83       	st	Z, r24
    1084:	88 ec       	ldi	r24, 0xC8	; 200
    1086:	80 83       	st	Z, r24
    1088:	88 ea       	ldi	r24, 0xA8	; 168
    108a:	80 83       	st	Z, r24
    108c:	8f e3       	ldi	r24, 0x3F	; 63
    108e:	80 83       	st	Z, r24
    1090:	85 ed       	ldi	r24, 0xD5	; 213
    1092:	80 83       	st	Z, r24
    1094:	80 e8       	ldi	r24, 0x80	; 128
    1096:	80 83       	st	Z, r24
    1098:	81 e8       	ldi	r24, 0x81	; 129
    109a:	80 83       	st	Z, r24
    109c:	80 e5       	ldi	r24, 0x50	; 80
    109e:	80 83       	st	Z, r24
    10a0:	89 ed       	ldi	r24, 0xD9	; 217
    10a2:	80 83       	st	Z, r24
    10a4:	81 e2       	ldi	r24, 0x21	; 33
    10a6:	80 83       	st	Z, r24
    10a8:	80 e2       	ldi	r24, 0x20	; 32
    10aa:	80 83       	st	Z, r24
    10ac:	10 82       	st	Z, r1
    10ae:	8b ed       	ldi	r24, 0xDB	; 219
    10b0:	80 83       	st	Z, r24
    10b2:	80 e3       	ldi	r24, 0x30	; 48
    10b4:	80 83       	st	Z, r24
    10b6:	8d ea       	ldi	r24, 0xAD	; 173
    10b8:	80 83       	st	Z, r24
    10ba:	10 82       	st	Z, r1
    10bc:	84 ea       	ldi	r24, 0xA4	; 164
    10be:	80 83       	st	Z, r24
    10c0:	86 ea       	ldi	r24, 0xA6	; 166
    10c2:	80 83       	st	Z, r24
    10c4:	8f ea       	ldi	r24, 0xAF	; 175
    10c6:	80 83       	st	Z, r24
    10c8:	08 95       	ret

000010ca <oled_goto_xy>:
    10ca:	80 93 96 02 	sts	0x0296, r24
    10ce:	60 93 95 02 	sts	0x0295, r22
    10d2:	ef e0       	ldi	r30, 0x0F	; 15
    10d4:	f0 e1       	ldi	r31, 0x10	; 16
    10d6:	91 e2       	ldi	r25, 0x21	; 33
    10d8:	90 83       	st	Z, r25
    10da:	80 83       	st	Z, r24
    10dc:	8f e7       	ldi	r24, 0x7F	; 127
    10de:	80 83       	st	Z, r24
    10e0:	82 e2       	ldi	r24, 0x22	; 34
    10e2:	80 83       	st	Z, r24
    10e4:	60 83       	st	Z, r22
    10e6:	86 e0       	ldi	r24, 0x06	; 6
    10e8:	80 83       	st	Z, r24
    10ea:	08 95       	ret

000010ec <oled_goto_nextln>:
    10ec:	80 91 95 02 	lds	r24, 0x0295
    10f0:	8f 5f       	subi	r24, 0xFF	; 255
    10f2:	80 93 95 02 	sts	0x0295, r24
    10f6:	80 91 95 02 	lds	r24, 0x0295
    10fa:	87 30       	cpi	r24, 0x07	; 7
    10fc:	10 f0       	brcs	.+4      	; 0x1102 <oled_goto_nextln+0x16>
    10fe:	10 92 95 02 	sts	0x0295, r1
    1102:	60 91 95 02 	lds	r22, 0x0295
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	0e 94 65 08 	call	0x10ca	; 0x10ca <oled_goto_xy>
    110c:	08 95       	ret

0000110e <oled_putchar>:
    110e:	cf 93       	push	r28
    1110:	8a 30       	cpi	r24, 0x0A	; 10
    1112:	19 f4       	brne	.+6      	; 0x111a <oled_putchar+0xc>
    1114:	0e 94 76 08 	call	0x10ec	; 0x10ec <oled_goto_nextln>
    1118:	29 c0       	rjmp	.+82     	; 0x116c <oled_putchar+0x5e>
    111a:	c0 ee       	ldi	r28, 0xE0	; 224
    111c:	c8 0f       	add	r28, r24
    111e:	80 91 96 02 	lds	r24, 0x0296
    1122:	8b 5f       	subi	r24, 0xFB	; 251
    1124:	80 93 96 02 	sts	0x0296, r24
    1128:	80 91 96 02 	lds	r24, 0x0296
    112c:	8d 37       	cpi	r24, 0x7D	; 125
    112e:	70 f0       	brcs	.+28     	; 0x114c <oled_putchar+0x3e>
    1130:	0e 94 76 08 	call	0x10ec	; 0x10ec <oled_goto_nextln>
    1134:	0b c0       	rjmp	.+22     	; 0x114c <oled_putchar+0x3e>
    1136:	fc 01       	movw	r30, r24
    1138:	e2 0f       	add	r30, r18
    113a:	f3 1f       	adc	r31, r19
    113c:	e4 91       	lpm	r30, Z
    113e:	ec 93       	st	X, r30
    1140:	2f 5f       	subi	r18, 0xFF	; 255
    1142:	3f 4f       	sbci	r19, 0xFF	; 255
    1144:	25 30       	cpi	r18, 0x05	; 5
    1146:	31 05       	cpc	r19, r1
    1148:	b1 f7       	brne	.-20     	; 0x1136 <oled_putchar+0x28>
    114a:	10 c0       	rjmp	.+32     	; 0x116c <oled_putchar+0x5e>
    114c:	8c 2f       	mov	r24, r28
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	9c 01       	movw	r18, r24
    1152:	22 0f       	add	r18, r18
    1154:	33 1f       	adc	r19, r19
    1156:	22 0f       	add	r18, r18
    1158:	33 1f       	adc	r19, r19
    115a:	82 0f       	add	r24, r18
    115c:	93 1f       	adc	r25, r19
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	8f 53       	subi	r24, 0x3F	; 63
    1164:	9e 4f       	sbci	r25, 0xFE	; 254
    1166:	af e0       	ldi	r26, 0x0F	; 15
    1168:	b2 e1       	ldi	r27, 0x12	; 18
    116a:	e5 cf       	rjmp	.-54     	; 0x1136 <oled_putchar+0x28>
    116c:	cf 91       	pop	r28
    116e:	08 95       	ret

00001170 <oled_putstr_P>:
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	ec 01       	movw	r28, r24
    1176:	fc 01       	movw	r30, r24
    1178:	84 91       	lpm	r24, Z
    117a:	88 23       	and	r24, r24
    117c:	39 f0       	breq	.+14     	; 0x118c <oled_putstr_P+0x1c>
    117e:	0e 94 87 08 	call	0x110e	; 0x110e <oled_putchar>
    1182:	21 96       	adiw	r28, 0x01	; 1
    1184:	fe 01       	movw	r30, r28
    1186:	84 91       	lpm	r24, Z
    1188:	81 11       	cpse	r24, r1
    118a:	f9 cf       	rjmp	.-14     	; 0x117e <oled_putstr_P+0xe>
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <oled_clear>:
    1192:	10 92 96 02 	sts	0x0296, r1
    1196:	10 92 95 02 	sts	0x0295, r1
    119a:	ef e0       	ldi	r30, 0x0F	; 15
    119c:	f0 e1       	ldi	r31, 0x10	; 16
    119e:	8e ea       	ldi	r24, 0xAE	; 174
    11a0:	80 83       	st	Z, r24
    11a2:	80 e2       	ldi	r24, 0x20	; 32
    11a4:	80 83       	st	Z, r24
    11a6:	10 82       	st	Z, r1
    11a8:	81 e2       	ldi	r24, 0x21	; 33
    11aa:	80 83       	st	Z, r24
    11ac:	10 82       	st	Z, r1
    11ae:	8f e7       	ldi	r24, 0x7F	; 127
    11b0:	80 83       	st	Z, r24
    11b2:	82 e2       	ldi	r24, 0x22	; 34
    11b4:	80 83       	st	Z, r24
    11b6:	10 82       	st	Z, r1
    11b8:	87 e0       	ldi	r24, 0x07	; 7
    11ba:	80 83       	st	Z, r24
    11bc:	80 e4       	ldi	r24, 0x40	; 64
    11be:	80 83       	st	Z, r24
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	94 e0       	ldi	r25, 0x04	; 4
    11c4:	ef e0       	ldi	r30, 0x0F	; 15
    11c6:	f2 e1       	ldi	r31, 0x12	; 18
    11c8:	10 82       	st	Z, r1
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	00 97       	sbiw	r24, 0x00	; 0
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <oled_clear+0x36>
    11d0:	ef e0       	ldi	r30, 0x0F	; 15
    11d2:	f0 e1       	ldi	r31, 0x10	; 16
    11d4:	81 e2       	ldi	r24, 0x21	; 33
    11d6:	80 83       	st	Z, r24
    11d8:	10 82       	st	Z, r1
    11da:	8f e7       	ldi	r24, 0x7F	; 127
    11dc:	80 83       	st	Z, r24
    11de:	82 e2       	ldi	r24, 0x22	; 34
    11e0:	80 83       	st	Z, r24
    11e2:	10 82       	st	Z, r1
    11e4:	86 e0       	ldi	r24, 0x06	; 6
    11e6:	80 83       	st	Z, r24
    11e8:	8c e7       	ldi	r24, 0x7C	; 124
    11ea:	80 83       	st	Z, r24
    11ec:	8f ea       	ldi	r24, 0xAF	; 175
    11ee:	80 83       	st	Z, r24
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	0e 94 65 08 	call	0x10ca	; 0x10ca <oled_goto_xy>
    11f8:	08 95       	ret

000011fa <oled_putchar_printf>:
    11fa:	8d 30       	cpi	r24, 0x0D	; 13
    11fc:	11 f0       	breq	.+4      	; 0x1202 <oled_putchar_printf+0x8>
    11fe:	8a 30       	cpi	r24, 0x0A	; 10
    1200:	19 f4       	brne	.+6      	; 0x1208 <oled_putchar_printf+0xe>
    1202:	0e 94 76 08 	call	0x10ec	; 0x10ec <oled_goto_nextln>
    1206:	02 c0       	rjmp	.+4      	; 0x120c <oled_putchar_printf+0x12>
    1208:	0e 94 87 08 	call	0x110e	; 0x110e <oled_putchar>
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	08 95       	ret

00001212 <oled_putchar_inverse>:
    1212:	cf 93       	push	r28
    1214:	8a 30       	cpi	r24, 0x0A	; 10
    1216:	19 f4       	brne	.+6      	; 0x121e <oled_putchar_inverse+0xc>
    1218:	0e 94 76 08 	call	0x10ec	; 0x10ec <oled_goto_nextln>
    121c:	2a c0       	rjmp	.+84     	; 0x1272 <oled_putchar_inverse+0x60>
    121e:	c0 ee       	ldi	r28, 0xE0	; 224
    1220:	c8 0f       	add	r28, r24
    1222:	80 91 96 02 	lds	r24, 0x0296
    1226:	8b 5f       	subi	r24, 0xFB	; 251
    1228:	80 93 96 02 	sts	0x0296, r24
    122c:	80 91 96 02 	lds	r24, 0x0296
    1230:	8d 37       	cpi	r24, 0x7D	; 125
    1232:	78 f0       	brcs	.+30     	; 0x1252 <oled_putchar_inverse+0x40>
    1234:	0e 94 76 08 	call	0x10ec	; 0x10ec <oled_goto_nextln>
    1238:	0c c0       	rjmp	.+24     	; 0x1252 <oled_putchar_inverse+0x40>
    123a:	fc 01       	movw	r30, r24
    123c:	e2 0f       	add	r30, r18
    123e:	f3 1f       	adc	r31, r19
    1240:	e4 91       	lpm	r30, Z
    1242:	e0 95       	com	r30
    1244:	ec 93       	st	X, r30
    1246:	2f 5f       	subi	r18, 0xFF	; 255
    1248:	3f 4f       	sbci	r19, 0xFF	; 255
    124a:	25 30       	cpi	r18, 0x05	; 5
    124c:	31 05       	cpc	r19, r1
    124e:	a9 f7       	brne	.-22     	; 0x123a <oled_putchar_inverse+0x28>
    1250:	10 c0       	rjmp	.+32     	; 0x1272 <oled_putchar_inverse+0x60>
    1252:	8c 2f       	mov	r24, r28
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9c 01       	movw	r18, r24
    1258:	22 0f       	add	r18, r18
    125a:	33 1f       	adc	r19, r19
    125c:	22 0f       	add	r18, r18
    125e:	33 1f       	adc	r19, r19
    1260:	82 0f       	add	r24, r18
    1262:	93 1f       	adc	r25, r19
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	8f 53       	subi	r24, 0x3F	; 63
    126a:	9e 4f       	sbci	r25, 0xFE	; 254
    126c:	af e0       	ldi	r26, 0x0F	; 15
    126e:	b2 e1       	ldi	r27, 0x12	; 18
    1270:	e4 cf       	rjmp	.-56     	; 0x123a <oled_putchar_inverse+0x28>
    1272:	cf 91       	pop	r28
    1274:	08 95       	ret

00001276 <oled_putstr_inverse>:
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	ec 01       	movw	r28, r24
    127c:	88 81       	ld	r24, Y
    127e:	88 23       	and	r24, r24
    1280:	31 f0       	breq	.+12     	; 0x128e <oled_putstr_inverse+0x18>
    1282:	21 96       	adiw	r28, 0x01	; 1
    1284:	0e 94 09 09 	call	0x1212	; 0x1212 <oled_putchar_inverse>
    1288:	89 91       	ld	r24, Y+
    128a:	81 11       	cpse	r24, r1
    128c:	fb cf       	rjmp	.-10     	; 0x1284 <oled_putstr_inverse+0xe>
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

00001294 <oled_putstr_P_inverse>:
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	ec 01       	movw	r28, r24
    129a:	fc 01       	movw	r30, r24
    129c:	84 91       	lpm	r24, Z
    129e:	88 23       	and	r24, r24
    12a0:	39 f0       	breq	.+14     	; 0x12b0 <oled_putstr_P_inverse+0x1c>
    12a2:	0e 94 09 09 	call	0x1212	; 0x1212 <oled_putchar_inverse>
    12a6:	21 96       	adiw	r28, 0x01	; 1
    12a8:	fe 01       	movw	r30, r28
    12aa:	84 91       	lpm	r24, Z
    12ac:	81 11       	cpse	r24, r1
    12ae:	f9 cf       	rjmp	.-14     	; 0x12a2 <oled_putstr_P_inverse+0xe>
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	08 95       	ret

000012b6 <usart_init>:
/********************************************************************************
                                usart Related
********************************************************************************/
void usart_init( uint16_t ubrr) {
	// Set baud rate
	UBRR1H = (uint8_t)(ubrr>>8);
    12b6:	9c bf       	out	0x3c, r25	; 60
	UBRR1L = (uint8_t)ubrr;
    12b8:	80 b9       	out	0x00, r24	; 0
	// Enable receiver and transmitter
	UCSR1B |= (1<<RXEN1)|(1<<TXEN1) | (1<<RXCIE1);			//RX enable, TX enable in Interrupt mode!!!
    12ba:	81 b1       	in	r24, 0x01	; 1
    12bc:	88 69       	ori	r24, 0x98	; 152
    12be:	81 b9       	out	0x01, r24	; 1
	// Set frame format: 8data, 1stop bit	
	UCSR1C |= (1<<URSEL1)|(3<<UCSZ10);						
    12c0:	8c b7       	in	r24, 0x3c	; 60
    12c2:	86 68       	ori	r24, 0x86	; 134
    12c4:	8c bf       	out	0x3c, r24	; 60
    12c6:	08 95       	ret

000012c8 <usart_putchar>:
}

void usart_putchar(char data) {
	// Wait for empty transmit buffer
	while ( !(UCSR1A & (_BV(UDRE1))) );
    12c8:	15 9b       	sbis	0x02, 5	; 2
    12ca:	fe cf       	rjmp	.-4      	; 0x12c8 <usart_putchar>
	// Start transmission
	UDR1 = data;
    12cc:	83 b9       	out	0x03, r24	; 3
    12ce:	08 95       	ret

000012d0 <usart_putchar_printf>:
        usart_putchar(*s);
        s++;
    }
}

int usart_putchar_printf(char var, FILE *stream) {
    12d0:	cf 93       	push	r28
    12d2:	c8 2f       	mov	r28, r24
    // translate \n to \r for br@y++ terminal
    if (var == '\n') usart_putchar('\r');
    12d4:	8a 30       	cpi	r24, 0x0A	; 10
    12d6:	19 f4       	brne	.+6      	; 0x12de <usart_putchar_printf+0xe>
    12d8:	8d e0       	ldi	r24, 0x0D	; 13
    12da:	0e 94 64 09 	call	0x12c8	; 0x12c8 <usart_putchar>
    usart_putchar(var);
    12de:	8c 2f       	mov	r24, r28
    12e0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <usart_putchar>
    return 0;
}
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	cf 91       	pop	r28
    12ea:	08 95       	ret

000012ec <__divmodhi4>:
    12ec:	97 fb       	bst	r25, 7
    12ee:	07 2e       	mov	r0, r23
    12f0:	16 f4       	brtc	.+4      	; 0x12f6 <__divmodhi4+0xa>
    12f2:	00 94       	com	r0
    12f4:	07 d0       	rcall	.+14     	; 0x1304 <__divmodhi4_neg1>
    12f6:	77 fd       	sbrc	r23, 7
    12f8:	09 d0       	rcall	.+18     	; 0x130c <__divmodhi4_neg2>
    12fa:	0e 94 99 09 	call	0x1332	; 0x1332 <__udivmodhi4>
    12fe:	07 fc       	sbrc	r0, 7
    1300:	05 d0       	rcall	.+10     	; 0x130c <__divmodhi4_neg2>
    1302:	3e f4       	brtc	.+14     	; 0x1312 <__divmodhi4_exit>

00001304 <__divmodhi4_neg1>:
    1304:	90 95       	com	r25
    1306:	81 95       	neg	r24
    1308:	9f 4f       	sbci	r25, 0xFF	; 255
    130a:	08 95       	ret

0000130c <__divmodhi4_neg2>:
    130c:	70 95       	com	r23
    130e:	61 95       	neg	r22
    1310:	7f 4f       	sbci	r23, 0xFF	; 255

00001312 <__divmodhi4_exit>:
    1312:	08 95       	ret

00001314 <__umulhisi3>:
    1314:	a2 9f       	mul	r26, r18
    1316:	b0 01       	movw	r22, r0
    1318:	b3 9f       	mul	r27, r19
    131a:	c0 01       	movw	r24, r0
    131c:	a3 9f       	mul	r26, r19
    131e:	70 0d       	add	r23, r0
    1320:	81 1d       	adc	r24, r1
    1322:	11 24       	eor	r1, r1
    1324:	91 1d       	adc	r25, r1
    1326:	b2 9f       	mul	r27, r18
    1328:	70 0d       	add	r23, r0
    132a:	81 1d       	adc	r24, r1
    132c:	11 24       	eor	r1, r1
    132e:	91 1d       	adc	r25, r1
    1330:	08 95       	ret

00001332 <__udivmodhi4>:
    1332:	aa 1b       	sub	r26, r26
    1334:	bb 1b       	sub	r27, r27
    1336:	51 e1       	ldi	r21, 0x11	; 17
    1338:	07 c0       	rjmp	.+14     	; 0x1348 <__udivmodhi4_ep>

0000133a <__udivmodhi4_loop>:
    133a:	aa 1f       	adc	r26, r26
    133c:	bb 1f       	adc	r27, r27
    133e:	a6 17       	cp	r26, r22
    1340:	b7 07       	cpc	r27, r23
    1342:	10 f0       	brcs	.+4      	; 0x1348 <__udivmodhi4_ep>
    1344:	a6 1b       	sub	r26, r22
    1346:	b7 0b       	sbc	r27, r23

00001348 <__udivmodhi4_ep>:
    1348:	88 1f       	adc	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	5a 95       	dec	r21
    134e:	a9 f7       	brne	.-22     	; 0x133a <__udivmodhi4_loop>
    1350:	80 95       	com	r24
    1352:	90 95       	com	r25
    1354:	bc 01       	movw	r22, r24
    1356:	cd 01       	movw	r24, r26
    1358:	08 95       	ret

0000135a <atoi>:
    135a:	fc 01       	movw	r30, r24
    135c:	88 27       	eor	r24, r24
    135e:	99 27       	eor	r25, r25
    1360:	e8 94       	clt
    1362:	21 91       	ld	r18, Z+
    1364:	20 32       	cpi	r18, 0x20	; 32
    1366:	e9 f3       	breq	.-6      	; 0x1362 <atoi+0x8>
    1368:	29 30       	cpi	r18, 0x09	; 9
    136a:	10 f0       	brcs	.+4      	; 0x1370 <atoi+0x16>
    136c:	2e 30       	cpi	r18, 0x0E	; 14
    136e:	c8 f3       	brcs	.-14     	; 0x1362 <atoi+0x8>
    1370:	2b 32       	cpi	r18, 0x2B	; 43
    1372:	41 f0       	breq	.+16     	; 0x1384 <atoi+0x2a>
    1374:	2d 32       	cpi	r18, 0x2D	; 45
    1376:	39 f4       	brne	.+14     	; 0x1386 <atoi+0x2c>
    1378:	68 94       	set
    137a:	04 c0       	rjmp	.+8      	; 0x1384 <atoi+0x2a>
    137c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__mulhi_const_10>
    1380:	82 0f       	add	r24, r18
    1382:	91 1d       	adc	r25, r1
    1384:	21 91       	ld	r18, Z+
    1386:	20 53       	subi	r18, 0x30	; 48
    1388:	2a 30       	cpi	r18, 0x0A	; 10
    138a:	c0 f3       	brcs	.-16     	; 0x137c <atoi+0x22>
    138c:	1e f4       	brtc	.+6      	; 0x1394 <atoi+0x3a>
    138e:	90 95       	com	r25
    1390:	81 95       	neg	r24
    1392:	9f 4f       	sbci	r25, 0xFF	; 255
    1394:	08 95       	ret

00001396 <strcmp>:
    1396:	fb 01       	movw	r30, r22
    1398:	dc 01       	movw	r26, r24
    139a:	8d 91       	ld	r24, X+
    139c:	01 90       	ld	r0, Z+
    139e:	80 19       	sub	r24, r0
    13a0:	01 10       	cpse	r0, r1
    13a2:	d9 f3       	breq	.-10     	; 0x139a <strcmp+0x4>
    13a4:	99 0b       	sbc	r25, r25
    13a6:	08 95       	ret

000013a8 <strncmp>:
    13a8:	fb 01       	movw	r30, r22
    13aa:	dc 01       	movw	r26, r24
    13ac:	41 50       	subi	r20, 0x01	; 1
    13ae:	50 40       	sbci	r21, 0x00	; 0
    13b0:	30 f0       	brcs	.+12     	; 0x13be <strncmp+0x16>
    13b2:	8d 91       	ld	r24, X+
    13b4:	01 90       	ld	r0, Z+
    13b6:	80 19       	sub	r24, r0
    13b8:	19 f4       	brne	.+6      	; 0x13c0 <strncmp+0x18>
    13ba:	00 20       	and	r0, r0
    13bc:	b9 f7       	brne	.-18     	; 0x13ac <strncmp+0x4>
    13be:	88 1b       	sub	r24, r24
    13c0:	99 0b       	sbc	r25, r25
    13c2:	08 95       	ret

000013c4 <__mulhi_const_10>:
    13c4:	7a e0       	ldi	r23, 0x0A	; 10
    13c6:	97 9f       	mul	r25, r23
    13c8:	90 2d       	mov	r25, r0
    13ca:	87 9f       	mul	r24, r23
    13cc:	80 2d       	mov	r24, r0
    13ce:	91 0d       	add	r25, r1
    13d0:	11 24       	eor	r1, r1
    13d2:	08 95       	ret

000013d4 <fwrite>:
    13d4:	a0 e0       	ldi	r26, 0x00	; 0
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e0 ef       	ldi	r30, 0xF0	; 240
    13da:	f9 e0       	ldi	r31, 0x09	; 9
    13dc:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <__prologue_saves__+0xc>
    13e0:	6b 01       	movw	r12, r22
    13e2:	4a 01       	movw	r8, r20
    13e4:	79 01       	movw	r14, r18
    13e6:	d9 01       	movw	r26, r18
    13e8:	13 96       	adiw	r26, 0x03	; 3
    13ea:	2c 91       	ld	r18, X
    13ec:	21 ff       	sbrs	r18, 1
    13ee:	1d c0       	rjmp	.+58     	; 0x142a <fwrite+0x56>
    13f0:	c0 e0       	ldi	r28, 0x00	; 0
    13f2:	d0 e0       	ldi	r29, 0x00	; 0
    13f4:	c8 15       	cp	r28, r8
    13f6:	d9 05       	cpc	r29, r9
    13f8:	d9 f0       	breq	.+54     	; 0x1430 <fwrite+0x5c>
    13fa:	8c 01       	movw	r16, r24
    13fc:	5c 01       	movw	r10, r24
    13fe:	ac 0c       	add	r10, r12
    1400:	bd 1c       	adc	r11, r13
    1402:	c8 01       	movw	r24, r16
    1404:	0a 15       	cp	r16, r10
    1406:	1b 05       	cpc	r17, r11
    1408:	71 f0       	breq	.+28     	; 0x1426 <fwrite+0x52>
    140a:	0f 5f       	subi	r16, 0xFF	; 255
    140c:	1f 4f       	sbci	r17, 0xFF	; 255
    140e:	d7 01       	movw	r26, r14
    1410:	18 96       	adiw	r26, 0x08	; 8
    1412:	ed 91       	ld	r30, X+
    1414:	fc 91       	ld	r31, X
    1416:	19 97       	sbiw	r26, 0x09	; 9
    1418:	b7 01       	movw	r22, r14
    141a:	dc 01       	movw	r26, r24
    141c:	8c 91       	ld	r24, X
    141e:	09 95       	icall
    1420:	89 2b       	or	r24, r25
    1422:	79 f3       	breq	.-34     	; 0x1402 <fwrite+0x2e>
    1424:	05 c0       	rjmp	.+10     	; 0x1430 <fwrite+0x5c>
    1426:	21 96       	adiw	r28, 0x01	; 1
    1428:	e5 cf       	rjmp	.-54     	; 0x13f4 <fwrite+0x20>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <fwrite+0x5e>
    1430:	ce 01       	movw	r24, r28
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	ec e0       	ldi	r30, 0x0C	; 12
    1438:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__epilogue_restores__+0xc>

0000143c <printf>:
    143c:	a0 e0       	ldi	r26, 0x00	; 0
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e4 e2       	ldi	r30, 0x24	; 36
    1442:	fa e0       	ldi	r31, 0x0A	; 10
    1444:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <__prologue_saves__+0x20>
    1448:	fe 01       	movw	r30, r28
    144a:	35 96       	adiw	r30, 0x05	; 5
    144c:	61 91       	ld	r22, Z+
    144e:	71 91       	ld	r23, Z+
    1450:	af 01       	movw	r20, r30
    1452:	80 91 ad 02 	lds	r24, 0x02AD
    1456:	90 91 ae 02 	lds	r25, 0x02AE
    145a:	0e 94 5f 0a 	call	0x14be	; 0x14be <vfprintf>
    145e:	e2 e0       	ldi	r30, 0x02	; 2
    1460:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__epilogue_restores__+0x20>

00001464 <puts>:
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	e0 91 ad 02 	lds	r30, 0x02AD
    1470:	f0 91 ae 02 	lds	r31, 0x02AE
    1474:	23 81       	ldd	r18, Z+3	; 0x03
    1476:	21 ff       	sbrs	r18, 1
    1478:	1b c0       	rjmp	.+54     	; 0x14b0 <puts+0x4c>
    147a:	ec 01       	movw	r28, r24
    147c:	00 e0       	ldi	r16, 0x00	; 0
    147e:	10 e0       	ldi	r17, 0x00	; 0
    1480:	89 91       	ld	r24, Y+
    1482:	60 91 ad 02 	lds	r22, 0x02AD
    1486:	70 91 ae 02 	lds	r23, 0x02AE
    148a:	db 01       	movw	r26, r22
    148c:	18 96       	adiw	r26, 0x08	; 8
    148e:	ed 91       	ld	r30, X+
    1490:	fc 91       	ld	r31, X
    1492:	19 97       	sbiw	r26, 0x09	; 9
    1494:	88 23       	and	r24, r24
    1496:	31 f0       	breq	.+12     	; 0x14a4 <puts+0x40>
    1498:	09 95       	icall
    149a:	89 2b       	or	r24, r25
    149c:	89 f3       	breq	.-30     	; 0x1480 <puts+0x1c>
    149e:	0f ef       	ldi	r16, 0xFF	; 255
    14a0:	1f ef       	ldi	r17, 0xFF	; 255
    14a2:	ee cf       	rjmp	.-36     	; 0x1480 <puts+0x1c>
    14a4:	8a e0       	ldi	r24, 0x0A	; 10
    14a6:	09 95       	icall
    14a8:	89 2b       	or	r24, r25
    14aa:	11 f4       	brne	.+4      	; 0x14b0 <puts+0x4c>
    14ac:	c8 01       	movw	r24, r16
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <puts+0x50>
    14b0:	8f ef       	ldi	r24, 0xFF	; 255
    14b2:	9f ef       	ldi	r25, 0xFF	; 255
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	08 95       	ret

000014be <vfprintf>:
    14be:	ac e0       	ldi	r26, 0x0C	; 12
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e5 e6       	ldi	r30, 0x65	; 101
    14c4:	fa e0       	ldi	r31, 0x0A	; 10
    14c6:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__prologue_saves__>
    14ca:	7c 01       	movw	r14, r24
    14cc:	6b 01       	movw	r12, r22
    14ce:	8a 01       	movw	r16, r20
    14d0:	fc 01       	movw	r30, r24
    14d2:	17 82       	std	Z+7, r1	; 0x07
    14d4:	16 82       	std	Z+6, r1	; 0x06
    14d6:	83 81       	ldd	r24, Z+3	; 0x03
    14d8:	81 ff       	sbrs	r24, 1
    14da:	bd c1       	rjmp	.+890    	; 0x1856 <vfprintf+0x398>
    14dc:	ce 01       	movw	r24, r28
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	4c 01       	movw	r8, r24
    14e2:	f7 01       	movw	r30, r14
    14e4:	93 81       	ldd	r25, Z+3	; 0x03
    14e6:	f6 01       	movw	r30, r12
    14e8:	93 fd       	sbrc	r25, 3
    14ea:	85 91       	lpm	r24, Z+
    14ec:	93 ff       	sbrs	r25, 3
    14ee:	81 91       	ld	r24, Z+
    14f0:	6f 01       	movw	r12, r30
    14f2:	88 23       	and	r24, r24
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <vfprintf+0x3a>
    14f6:	ab c1       	rjmp	.+854    	; 0x184e <vfprintf+0x390>
    14f8:	85 32       	cpi	r24, 0x25	; 37
    14fa:	39 f4       	brne	.+14     	; 0x150a <vfprintf+0x4c>
    14fc:	93 fd       	sbrc	r25, 3
    14fe:	85 91       	lpm	r24, Z+
    1500:	93 ff       	sbrs	r25, 3
    1502:	81 91       	ld	r24, Z+
    1504:	6f 01       	movw	r12, r30
    1506:	85 32       	cpi	r24, 0x25	; 37
    1508:	29 f4       	brne	.+10     	; 0x1514 <vfprintf+0x56>
    150a:	b7 01       	movw	r22, r14
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 47 0c 	call	0x188e	; 0x188e <fputc>
    1512:	e7 cf       	rjmp	.-50     	; 0x14e2 <vfprintf+0x24>
    1514:	51 2c       	mov	r5, r1
    1516:	31 2c       	mov	r3, r1
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	20 32       	cpi	r18, 0x20	; 32
    151c:	a0 f4       	brcc	.+40     	; 0x1546 <vfprintf+0x88>
    151e:	8b 32       	cpi	r24, 0x2B	; 43
    1520:	69 f0       	breq	.+26     	; 0x153c <vfprintf+0x7e>
    1522:	30 f4       	brcc	.+12     	; 0x1530 <vfprintf+0x72>
    1524:	80 32       	cpi	r24, 0x20	; 32
    1526:	59 f0       	breq	.+22     	; 0x153e <vfprintf+0x80>
    1528:	83 32       	cpi	r24, 0x23	; 35
    152a:	69 f4       	brne	.+26     	; 0x1546 <vfprintf+0x88>
    152c:	20 61       	ori	r18, 0x10	; 16
    152e:	2c c0       	rjmp	.+88     	; 0x1588 <vfprintf+0xca>
    1530:	8d 32       	cpi	r24, 0x2D	; 45
    1532:	39 f0       	breq	.+14     	; 0x1542 <vfprintf+0x84>
    1534:	80 33       	cpi	r24, 0x30	; 48
    1536:	39 f4       	brne	.+14     	; 0x1546 <vfprintf+0x88>
    1538:	21 60       	ori	r18, 0x01	; 1
    153a:	26 c0       	rjmp	.+76     	; 0x1588 <vfprintf+0xca>
    153c:	22 60       	ori	r18, 0x02	; 2
    153e:	24 60       	ori	r18, 0x04	; 4
    1540:	23 c0       	rjmp	.+70     	; 0x1588 <vfprintf+0xca>
    1542:	28 60       	ori	r18, 0x08	; 8
    1544:	21 c0       	rjmp	.+66     	; 0x1588 <vfprintf+0xca>
    1546:	27 fd       	sbrc	r18, 7
    1548:	27 c0       	rjmp	.+78     	; 0x1598 <vfprintf+0xda>
    154a:	30 ed       	ldi	r19, 0xD0	; 208
    154c:	38 0f       	add	r19, r24
    154e:	3a 30       	cpi	r19, 0x0A	; 10
    1550:	78 f4       	brcc	.+30     	; 0x1570 <vfprintf+0xb2>
    1552:	26 ff       	sbrs	r18, 6
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <vfprintf+0xa4>
    1556:	fa e0       	ldi	r31, 0x0A	; 10
    1558:	5f 9e       	mul	r5, r31
    155a:	30 0d       	add	r19, r0
    155c:	11 24       	eor	r1, r1
    155e:	53 2e       	mov	r5, r19
    1560:	13 c0       	rjmp	.+38     	; 0x1588 <vfprintf+0xca>
    1562:	8a e0       	ldi	r24, 0x0A	; 10
    1564:	38 9e       	mul	r3, r24
    1566:	30 0d       	add	r19, r0
    1568:	11 24       	eor	r1, r1
    156a:	33 2e       	mov	r3, r19
    156c:	20 62       	ori	r18, 0x20	; 32
    156e:	0c c0       	rjmp	.+24     	; 0x1588 <vfprintf+0xca>
    1570:	8e 32       	cpi	r24, 0x2E	; 46
    1572:	21 f4       	brne	.+8      	; 0x157c <vfprintf+0xbe>
    1574:	26 fd       	sbrc	r18, 6
    1576:	6b c1       	rjmp	.+726    	; 0x184e <vfprintf+0x390>
    1578:	20 64       	ori	r18, 0x40	; 64
    157a:	06 c0       	rjmp	.+12     	; 0x1588 <vfprintf+0xca>
    157c:	8c 36       	cpi	r24, 0x6C	; 108
    157e:	11 f4       	brne	.+4      	; 0x1584 <vfprintf+0xc6>
    1580:	20 68       	ori	r18, 0x80	; 128
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <vfprintf+0xca>
    1584:	88 36       	cpi	r24, 0x68	; 104
    1586:	41 f4       	brne	.+16     	; 0x1598 <vfprintf+0xda>
    1588:	f6 01       	movw	r30, r12
    158a:	93 fd       	sbrc	r25, 3
    158c:	85 91       	lpm	r24, Z+
    158e:	93 ff       	sbrs	r25, 3
    1590:	81 91       	ld	r24, Z+
    1592:	6f 01       	movw	r12, r30
    1594:	81 11       	cpse	r24, r1
    1596:	c1 cf       	rjmp	.-126    	; 0x151a <vfprintf+0x5c>
    1598:	98 2f       	mov	r25, r24
    159a:	9f 7d       	andi	r25, 0xDF	; 223
    159c:	95 54       	subi	r25, 0x45	; 69
    159e:	93 30       	cpi	r25, 0x03	; 3
    15a0:	28 f4       	brcc	.+10     	; 0x15ac <vfprintf+0xee>
    15a2:	0c 5f       	subi	r16, 0xFC	; 252
    15a4:	1f 4f       	sbci	r17, 0xFF	; 255
    15a6:	ff e3       	ldi	r31, 0x3F	; 63
    15a8:	f9 83       	std	Y+1, r31	; 0x01
    15aa:	0d c0       	rjmp	.+26     	; 0x15c6 <vfprintf+0x108>
    15ac:	83 36       	cpi	r24, 0x63	; 99
    15ae:	31 f0       	breq	.+12     	; 0x15bc <vfprintf+0xfe>
    15b0:	83 37       	cpi	r24, 0x73	; 115
    15b2:	71 f0       	breq	.+28     	; 0x15d0 <vfprintf+0x112>
    15b4:	83 35       	cpi	r24, 0x53	; 83
    15b6:	09 f0       	breq	.+2      	; 0x15ba <vfprintf+0xfc>
    15b8:	5b c0       	rjmp	.+182    	; 0x1670 <vfprintf+0x1b2>
    15ba:	22 c0       	rjmp	.+68     	; 0x1600 <vfprintf+0x142>
    15bc:	f8 01       	movw	r30, r16
    15be:	80 81       	ld	r24, Z
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	0e 5f       	subi	r16, 0xFE	; 254
    15c4:	1f 4f       	sbci	r17, 0xFF	; 255
    15c6:	44 24       	eor	r4, r4
    15c8:	43 94       	inc	r4
    15ca:	51 2c       	mov	r5, r1
    15cc:	54 01       	movw	r10, r8
    15ce:	15 c0       	rjmp	.+42     	; 0x15fa <vfprintf+0x13c>
    15d0:	38 01       	movw	r6, r16
    15d2:	f2 e0       	ldi	r31, 0x02	; 2
    15d4:	6f 0e       	add	r6, r31
    15d6:	71 1c       	adc	r7, r1
    15d8:	f8 01       	movw	r30, r16
    15da:	a0 80       	ld	r10, Z
    15dc:	b1 80       	ldd	r11, Z+1	; 0x01
    15de:	26 ff       	sbrs	r18, 6
    15e0:	03 c0       	rjmp	.+6      	; 0x15e8 <vfprintf+0x12a>
    15e2:	65 2d       	mov	r22, r5
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <vfprintf+0x12e>
    15e8:	6f ef       	ldi	r22, 0xFF	; 255
    15ea:	7f ef       	ldi	r23, 0xFF	; 255
    15ec:	c5 01       	movw	r24, r10
    15ee:	2c 87       	std	Y+12, r18	; 0x0c
    15f0:	0e 94 3c 0c 	call	0x1878	; 0x1878 <strnlen>
    15f4:	2c 01       	movw	r4, r24
    15f6:	83 01       	movw	r16, r6
    15f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    15fa:	2f 77       	andi	r18, 0x7F	; 127
    15fc:	22 2e       	mov	r2, r18
    15fe:	17 c0       	rjmp	.+46     	; 0x162e <vfprintf+0x170>
    1600:	38 01       	movw	r6, r16
    1602:	f2 e0       	ldi	r31, 0x02	; 2
    1604:	6f 0e       	add	r6, r31
    1606:	71 1c       	adc	r7, r1
    1608:	f8 01       	movw	r30, r16
    160a:	a0 80       	ld	r10, Z
    160c:	b1 80       	ldd	r11, Z+1	; 0x01
    160e:	26 ff       	sbrs	r18, 6
    1610:	03 c0       	rjmp	.+6      	; 0x1618 <vfprintf+0x15a>
    1612:	65 2d       	mov	r22, r5
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	02 c0       	rjmp	.+4      	; 0x161c <vfprintf+0x15e>
    1618:	6f ef       	ldi	r22, 0xFF	; 255
    161a:	7f ef       	ldi	r23, 0xFF	; 255
    161c:	c5 01       	movw	r24, r10
    161e:	2c 87       	std	Y+12, r18	; 0x0c
    1620:	0e 94 31 0c 	call	0x1862	; 0x1862 <strnlen_P>
    1624:	2c 01       	movw	r4, r24
    1626:	2c 85       	ldd	r18, Y+12	; 0x0c
    1628:	20 68       	ori	r18, 0x80	; 128
    162a:	22 2e       	mov	r2, r18
    162c:	83 01       	movw	r16, r6
    162e:	23 fc       	sbrc	r2, 3
    1630:	1b c0       	rjmp	.+54     	; 0x1668 <vfprintf+0x1aa>
    1632:	83 2d       	mov	r24, r3
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	48 16       	cp	r4, r24
    1638:	59 06       	cpc	r5, r25
    163a:	b0 f4       	brcc	.+44     	; 0x1668 <vfprintf+0x1aa>
    163c:	b7 01       	movw	r22, r14
    163e:	80 e2       	ldi	r24, 0x20	; 32
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 47 0c 	call	0x188e	; 0x188e <fputc>
    1646:	3a 94       	dec	r3
    1648:	f4 cf       	rjmp	.-24     	; 0x1632 <vfprintf+0x174>
    164a:	f5 01       	movw	r30, r10
    164c:	27 fc       	sbrc	r2, 7
    164e:	85 91       	lpm	r24, Z+
    1650:	27 fe       	sbrs	r2, 7
    1652:	81 91       	ld	r24, Z+
    1654:	5f 01       	movw	r10, r30
    1656:	b7 01       	movw	r22, r14
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	0e 94 47 0c 	call	0x188e	; 0x188e <fputc>
    165e:	31 10       	cpse	r3, r1
    1660:	3a 94       	dec	r3
    1662:	f1 e0       	ldi	r31, 0x01	; 1
    1664:	4f 1a       	sub	r4, r31
    1666:	51 08       	sbc	r5, r1
    1668:	41 14       	cp	r4, r1
    166a:	51 04       	cpc	r5, r1
    166c:	71 f7       	brne	.-36     	; 0x164a <vfprintf+0x18c>
    166e:	e5 c0       	rjmp	.+458    	; 0x183a <vfprintf+0x37c>
    1670:	84 36       	cpi	r24, 0x64	; 100
    1672:	11 f0       	breq	.+4      	; 0x1678 <vfprintf+0x1ba>
    1674:	89 36       	cpi	r24, 0x69	; 105
    1676:	39 f5       	brne	.+78     	; 0x16c6 <vfprintf+0x208>
    1678:	f8 01       	movw	r30, r16
    167a:	27 ff       	sbrs	r18, 7
    167c:	07 c0       	rjmp	.+14     	; 0x168c <vfprintf+0x1ce>
    167e:	60 81       	ld	r22, Z
    1680:	71 81       	ldd	r23, Z+1	; 0x01
    1682:	82 81       	ldd	r24, Z+2	; 0x02
    1684:	93 81       	ldd	r25, Z+3	; 0x03
    1686:	0c 5f       	subi	r16, 0xFC	; 252
    1688:	1f 4f       	sbci	r17, 0xFF	; 255
    168a:	08 c0       	rjmp	.+16     	; 0x169c <vfprintf+0x1de>
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	88 27       	eor	r24, r24
    1692:	77 fd       	sbrc	r23, 7
    1694:	80 95       	com	r24
    1696:	98 2f       	mov	r25, r24
    1698:	0e 5f       	subi	r16, 0xFE	; 254
    169a:	1f 4f       	sbci	r17, 0xFF	; 255
    169c:	2f 76       	andi	r18, 0x6F	; 111
    169e:	b2 2e       	mov	r11, r18
    16a0:	97 ff       	sbrs	r25, 7
    16a2:	09 c0       	rjmp	.+18     	; 0x16b6 <vfprintf+0x1f8>
    16a4:	90 95       	com	r25
    16a6:	80 95       	com	r24
    16a8:	70 95       	com	r23
    16aa:	61 95       	neg	r22
    16ac:	7f 4f       	sbci	r23, 0xFF	; 255
    16ae:	8f 4f       	sbci	r24, 0xFF	; 255
    16b0:	9f 4f       	sbci	r25, 0xFF	; 255
    16b2:	20 68       	ori	r18, 0x80	; 128
    16b4:	b2 2e       	mov	r11, r18
    16b6:	2a e0       	ldi	r18, 0x0A	; 10
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	a4 01       	movw	r20, r8
    16bc:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__ultoa_invert>
    16c0:	a8 2e       	mov	r10, r24
    16c2:	a8 18       	sub	r10, r8
    16c4:	44 c0       	rjmp	.+136    	; 0x174e <vfprintf+0x290>
    16c6:	85 37       	cpi	r24, 0x75	; 117
    16c8:	29 f4       	brne	.+10     	; 0x16d4 <vfprintf+0x216>
    16ca:	2f 7e       	andi	r18, 0xEF	; 239
    16cc:	b2 2e       	mov	r11, r18
    16ce:	2a e0       	ldi	r18, 0x0A	; 10
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	25 c0       	rjmp	.+74     	; 0x171e <vfprintf+0x260>
    16d4:	f2 2f       	mov	r31, r18
    16d6:	f9 7f       	andi	r31, 0xF9	; 249
    16d8:	bf 2e       	mov	r11, r31
    16da:	8f 36       	cpi	r24, 0x6F	; 111
    16dc:	c1 f0       	breq	.+48     	; 0x170e <vfprintf+0x250>
    16de:	18 f4       	brcc	.+6      	; 0x16e6 <vfprintf+0x228>
    16e0:	88 35       	cpi	r24, 0x58	; 88
    16e2:	79 f0       	breq	.+30     	; 0x1702 <vfprintf+0x244>
    16e4:	b4 c0       	rjmp	.+360    	; 0x184e <vfprintf+0x390>
    16e6:	80 37       	cpi	r24, 0x70	; 112
    16e8:	19 f0       	breq	.+6      	; 0x16f0 <vfprintf+0x232>
    16ea:	88 37       	cpi	r24, 0x78	; 120
    16ec:	21 f0       	breq	.+8      	; 0x16f6 <vfprintf+0x238>
    16ee:	af c0       	rjmp	.+350    	; 0x184e <vfprintf+0x390>
    16f0:	2f 2f       	mov	r18, r31
    16f2:	20 61       	ori	r18, 0x10	; 16
    16f4:	b2 2e       	mov	r11, r18
    16f6:	b4 fe       	sbrs	r11, 4
    16f8:	0d c0       	rjmp	.+26     	; 0x1714 <vfprintf+0x256>
    16fa:	8b 2d       	mov	r24, r11
    16fc:	84 60       	ori	r24, 0x04	; 4
    16fe:	b8 2e       	mov	r11, r24
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <vfprintf+0x256>
    1702:	24 ff       	sbrs	r18, 4
    1704:	0a c0       	rjmp	.+20     	; 0x171a <vfprintf+0x25c>
    1706:	9f 2f       	mov	r25, r31
    1708:	96 60       	ori	r25, 0x06	; 6
    170a:	b9 2e       	mov	r11, r25
    170c:	06 c0       	rjmp	.+12     	; 0x171a <vfprintf+0x25c>
    170e:	28 e0       	ldi	r18, 0x08	; 8
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	05 c0       	rjmp	.+10     	; 0x171e <vfprintf+0x260>
    1714:	20 e1       	ldi	r18, 0x10	; 16
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	02 c0       	rjmp	.+4      	; 0x171e <vfprintf+0x260>
    171a:	20 e1       	ldi	r18, 0x10	; 16
    171c:	32 e0       	ldi	r19, 0x02	; 2
    171e:	f8 01       	movw	r30, r16
    1720:	b7 fe       	sbrs	r11, 7
    1722:	07 c0       	rjmp	.+14     	; 0x1732 <vfprintf+0x274>
    1724:	60 81       	ld	r22, Z
    1726:	71 81       	ldd	r23, Z+1	; 0x01
    1728:	82 81       	ldd	r24, Z+2	; 0x02
    172a:	93 81       	ldd	r25, Z+3	; 0x03
    172c:	0c 5f       	subi	r16, 0xFC	; 252
    172e:	1f 4f       	sbci	r17, 0xFF	; 255
    1730:	06 c0       	rjmp	.+12     	; 0x173e <vfprintf+0x280>
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	0e 5f       	subi	r16, 0xFE	; 254
    173c:	1f 4f       	sbci	r17, 0xFF	; 255
    173e:	a4 01       	movw	r20, r8
    1740:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__ultoa_invert>
    1744:	a8 2e       	mov	r10, r24
    1746:	a8 18       	sub	r10, r8
    1748:	fb 2d       	mov	r31, r11
    174a:	ff 77       	andi	r31, 0x7F	; 127
    174c:	bf 2e       	mov	r11, r31
    174e:	b6 fe       	sbrs	r11, 6
    1750:	0b c0       	rjmp	.+22     	; 0x1768 <vfprintf+0x2aa>
    1752:	2b 2d       	mov	r18, r11
    1754:	2e 7f       	andi	r18, 0xFE	; 254
    1756:	a5 14       	cp	r10, r5
    1758:	50 f4       	brcc	.+20     	; 0x176e <vfprintf+0x2b0>
    175a:	b4 fe       	sbrs	r11, 4
    175c:	0a c0       	rjmp	.+20     	; 0x1772 <vfprintf+0x2b4>
    175e:	b2 fc       	sbrc	r11, 2
    1760:	08 c0       	rjmp	.+16     	; 0x1772 <vfprintf+0x2b4>
    1762:	2b 2d       	mov	r18, r11
    1764:	2e 7e       	andi	r18, 0xEE	; 238
    1766:	05 c0       	rjmp	.+10     	; 0x1772 <vfprintf+0x2b4>
    1768:	7a 2c       	mov	r7, r10
    176a:	2b 2d       	mov	r18, r11
    176c:	03 c0       	rjmp	.+6      	; 0x1774 <vfprintf+0x2b6>
    176e:	7a 2c       	mov	r7, r10
    1770:	01 c0       	rjmp	.+2      	; 0x1774 <vfprintf+0x2b6>
    1772:	75 2c       	mov	r7, r5
    1774:	24 ff       	sbrs	r18, 4
    1776:	0d c0       	rjmp	.+26     	; 0x1792 <vfprintf+0x2d4>
    1778:	fe 01       	movw	r30, r28
    177a:	ea 0d       	add	r30, r10
    177c:	f1 1d       	adc	r31, r1
    177e:	80 81       	ld	r24, Z
    1780:	80 33       	cpi	r24, 0x30	; 48
    1782:	11 f4       	brne	.+4      	; 0x1788 <vfprintf+0x2ca>
    1784:	29 7e       	andi	r18, 0xE9	; 233
    1786:	09 c0       	rjmp	.+18     	; 0x179a <vfprintf+0x2dc>
    1788:	22 ff       	sbrs	r18, 2
    178a:	06 c0       	rjmp	.+12     	; 0x1798 <vfprintf+0x2da>
    178c:	73 94       	inc	r7
    178e:	73 94       	inc	r7
    1790:	04 c0       	rjmp	.+8      	; 0x179a <vfprintf+0x2dc>
    1792:	82 2f       	mov	r24, r18
    1794:	86 78       	andi	r24, 0x86	; 134
    1796:	09 f0       	breq	.+2      	; 0x179a <vfprintf+0x2dc>
    1798:	73 94       	inc	r7
    179a:	23 fd       	sbrc	r18, 3
    179c:	13 c0       	rjmp	.+38     	; 0x17c4 <vfprintf+0x306>
    179e:	20 ff       	sbrs	r18, 0
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <vfprintf+0x2f0>
    17a2:	5a 2c       	mov	r5, r10
    17a4:	73 14       	cp	r7, r3
    17a6:	18 f4       	brcc	.+6      	; 0x17ae <vfprintf+0x2f0>
    17a8:	53 0c       	add	r5, r3
    17aa:	57 18       	sub	r5, r7
    17ac:	73 2c       	mov	r7, r3
    17ae:	73 14       	cp	r7, r3
    17b0:	68 f4       	brcc	.+26     	; 0x17cc <vfprintf+0x30e>
    17b2:	b7 01       	movw	r22, r14
    17b4:	80 e2       	ldi	r24, 0x20	; 32
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	2c 87       	std	Y+12, r18	; 0x0c
    17ba:	0e 94 47 0c 	call	0x188e	; 0x188e <fputc>
    17be:	73 94       	inc	r7
    17c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    17c2:	f5 cf       	rjmp	.-22     	; 0x17ae <vfprintf+0x2f0>
    17c4:	73 14       	cp	r7, r3
    17c6:	10 f4       	brcc	.+4      	; 0x17cc <vfprintf+0x30e>
    17c8:	37 18       	sub	r3, r7
    17ca:	01 c0       	rjmp	.+2      	; 0x17ce <vfprintf+0x310>
    17cc:	31 2c       	mov	r3, r1
    17ce:	24 ff       	sbrs	r18, 4
    17d0:	12 c0       	rjmp	.+36     	; 0x17f6 <vfprintf+0x338>
    17d2:	b7 01       	movw	r22, r14
    17d4:	80 e3       	ldi	r24, 0x30	; 48
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	2c 87       	std	Y+12, r18	; 0x0c
    17da:	0e 94 47 0c 	call	0x188e	; 0x188e <fputc>
    17de:	2c 85       	ldd	r18, Y+12	; 0x0c
    17e0:	22 ff       	sbrs	r18, 2
    17e2:	17 c0       	rjmp	.+46     	; 0x1812 <vfprintf+0x354>
    17e4:	21 ff       	sbrs	r18, 1
    17e6:	03 c0       	rjmp	.+6      	; 0x17ee <vfprintf+0x330>
    17e8:	88 e5       	ldi	r24, 0x58	; 88
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <vfprintf+0x334>
    17ee:	88 e7       	ldi	r24, 0x78	; 120
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	b7 01       	movw	r22, r14
    17f4:	0c c0       	rjmp	.+24     	; 0x180e <vfprintf+0x350>
    17f6:	82 2f       	mov	r24, r18
    17f8:	86 78       	andi	r24, 0x86	; 134
    17fa:	59 f0       	breq	.+22     	; 0x1812 <vfprintf+0x354>
    17fc:	21 fd       	sbrc	r18, 1
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <vfprintf+0x346>
    1800:	80 e2       	ldi	r24, 0x20	; 32
    1802:	01 c0       	rjmp	.+2      	; 0x1806 <vfprintf+0x348>
    1804:	8b e2       	ldi	r24, 0x2B	; 43
    1806:	27 fd       	sbrc	r18, 7
    1808:	8d e2       	ldi	r24, 0x2D	; 45
    180a:	b7 01       	movw	r22, r14
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	0e 94 47 0c 	call	0x188e	; 0x188e <fputc>
    1812:	a5 14       	cp	r10, r5
    1814:	38 f4       	brcc	.+14     	; 0x1824 <vfprintf+0x366>
    1816:	b7 01       	movw	r22, r14
    1818:	80 e3       	ldi	r24, 0x30	; 48
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0e 94 47 0c 	call	0x188e	; 0x188e <fputc>
    1820:	5a 94       	dec	r5
    1822:	f7 cf       	rjmp	.-18     	; 0x1812 <vfprintf+0x354>
    1824:	aa 94       	dec	r10
    1826:	f4 01       	movw	r30, r8
    1828:	ea 0d       	add	r30, r10
    182a:	f1 1d       	adc	r31, r1
    182c:	80 81       	ld	r24, Z
    182e:	b7 01       	movw	r22, r14
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 47 0c 	call	0x188e	; 0x188e <fputc>
    1836:	a1 10       	cpse	r10, r1
    1838:	f5 cf       	rjmp	.-22     	; 0x1824 <vfprintf+0x366>
    183a:	33 20       	and	r3, r3
    183c:	09 f4       	brne	.+2      	; 0x1840 <vfprintf+0x382>
    183e:	51 ce       	rjmp	.-862    	; 0x14e2 <vfprintf+0x24>
    1840:	b7 01       	movw	r22, r14
    1842:	80 e2       	ldi	r24, 0x20	; 32
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 94 47 0c 	call	0x188e	; 0x188e <fputc>
    184a:	3a 94       	dec	r3
    184c:	f6 cf       	rjmp	.-20     	; 0x183a <vfprintf+0x37c>
    184e:	f7 01       	movw	r30, r14
    1850:	86 81       	ldd	r24, Z+6	; 0x06
    1852:	97 81       	ldd	r25, Z+7	; 0x07
    1854:	02 c0       	rjmp	.+4      	; 0x185a <vfprintf+0x39c>
    1856:	8f ef       	ldi	r24, 0xFF	; 255
    1858:	9f ef       	ldi	r25, 0xFF	; 255
    185a:	2c 96       	adiw	r28, 0x0c	; 12
    185c:	e2 e1       	ldi	r30, 0x12	; 18
    185e:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__epilogue_restores__>

00001862 <strnlen_P>:
    1862:	fc 01       	movw	r30, r24
    1864:	05 90       	lpm	r0, Z+
    1866:	61 50       	subi	r22, 0x01	; 1
    1868:	70 40       	sbci	r23, 0x00	; 0
    186a:	01 10       	cpse	r0, r1
    186c:	d8 f7       	brcc	.-10     	; 0x1864 <strnlen_P+0x2>
    186e:	80 95       	com	r24
    1870:	90 95       	com	r25
    1872:	8e 0f       	add	r24, r30
    1874:	9f 1f       	adc	r25, r31
    1876:	08 95       	ret

00001878 <strnlen>:
    1878:	fc 01       	movw	r30, r24
    187a:	61 50       	subi	r22, 0x01	; 1
    187c:	70 40       	sbci	r23, 0x00	; 0
    187e:	01 90       	ld	r0, Z+
    1880:	01 10       	cpse	r0, r1
    1882:	d8 f7       	brcc	.-10     	; 0x187a <strnlen+0x2>
    1884:	80 95       	com	r24
    1886:	90 95       	com	r25
    1888:	8e 0f       	add	r24, r30
    188a:	9f 1f       	adc	r25, r31
    188c:	08 95       	ret

0000188e <fputc>:
    188e:	0f 93       	push	r16
    1890:	1f 93       	push	r17
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	18 2f       	mov	r17, r24
    1898:	09 2f       	mov	r16, r25
    189a:	eb 01       	movw	r28, r22
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	81 fd       	sbrc	r24, 1
    18a0:	03 c0       	rjmp	.+6      	; 0x18a8 <fputc+0x1a>
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
    18a4:	9f ef       	ldi	r25, 0xFF	; 255
    18a6:	20 c0       	rjmp	.+64     	; 0x18e8 <fputc+0x5a>
    18a8:	82 ff       	sbrs	r24, 2
    18aa:	10 c0       	rjmp	.+32     	; 0x18cc <fputc+0x3e>
    18ac:	4e 81       	ldd	r20, Y+6	; 0x06
    18ae:	5f 81       	ldd	r21, Y+7	; 0x07
    18b0:	2c 81       	ldd	r18, Y+4	; 0x04
    18b2:	3d 81       	ldd	r19, Y+5	; 0x05
    18b4:	42 17       	cp	r20, r18
    18b6:	53 07       	cpc	r21, r19
    18b8:	7c f4       	brge	.+30     	; 0x18d8 <fputc+0x4a>
    18ba:	e8 81       	ld	r30, Y
    18bc:	f9 81       	ldd	r31, Y+1	; 0x01
    18be:	9f 01       	movw	r18, r30
    18c0:	2f 5f       	subi	r18, 0xFF	; 255
    18c2:	3f 4f       	sbci	r19, 0xFF	; 255
    18c4:	39 83       	std	Y+1, r19	; 0x01
    18c6:	28 83       	st	Y, r18
    18c8:	10 83       	st	Z, r17
    18ca:	06 c0       	rjmp	.+12     	; 0x18d8 <fputc+0x4a>
    18cc:	e8 85       	ldd	r30, Y+8	; 0x08
    18ce:	f9 85       	ldd	r31, Y+9	; 0x09
    18d0:	81 2f       	mov	r24, r17
    18d2:	09 95       	icall
    18d4:	89 2b       	or	r24, r25
    18d6:	29 f7       	brne	.-54     	; 0x18a2 <fputc+0x14>
    18d8:	2e 81       	ldd	r18, Y+6	; 0x06
    18da:	3f 81       	ldd	r19, Y+7	; 0x07
    18dc:	2f 5f       	subi	r18, 0xFF	; 255
    18de:	3f 4f       	sbci	r19, 0xFF	; 255
    18e0:	3f 83       	std	Y+7, r19	; 0x07
    18e2:	2e 83       	std	Y+6, r18	; 0x06
    18e4:	81 2f       	mov	r24, r17
    18e6:	90 2f       	mov	r25, r16
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	1f 91       	pop	r17
    18ee:	0f 91       	pop	r16
    18f0:	08 95       	ret

000018f2 <__ultoa_invert>:
    18f2:	fa 01       	movw	r30, r20
    18f4:	aa 27       	eor	r26, r26
    18f6:	28 30       	cpi	r18, 0x08	; 8
    18f8:	51 f1       	breq	.+84     	; 0x194e <__ultoa_invert+0x5c>
    18fa:	20 31       	cpi	r18, 0x10	; 16
    18fc:	81 f1       	breq	.+96     	; 0x195e <__ultoa_invert+0x6c>
    18fe:	e8 94       	clt
    1900:	6f 93       	push	r22
    1902:	6e 7f       	andi	r22, 0xFE	; 254
    1904:	6e 5f       	subi	r22, 0xFE	; 254
    1906:	7f 4f       	sbci	r23, 0xFF	; 255
    1908:	8f 4f       	sbci	r24, 0xFF	; 255
    190a:	9f 4f       	sbci	r25, 0xFF	; 255
    190c:	af 4f       	sbci	r26, 0xFF	; 255
    190e:	b1 e0       	ldi	r27, 0x01	; 1
    1910:	3e d0       	rcall	.+124    	; 0x198e <__ultoa_invert+0x9c>
    1912:	b4 e0       	ldi	r27, 0x04	; 4
    1914:	3c d0       	rcall	.+120    	; 0x198e <__ultoa_invert+0x9c>
    1916:	67 0f       	add	r22, r23
    1918:	78 1f       	adc	r23, r24
    191a:	89 1f       	adc	r24, r25
    191c:	9a 1f       	adc	r25, r26
    191e:	a1 1d       	adc	r26, r1
    1920:	68 0f       	add	r22, r24
    1922:	79 1f       	adc	r23, r25
    1924:	8a 1f       	adc	r24, r26
    1926:	91 1d       	adc	r25, r1
    1928:	a1 1d       	adc	r26, r1
    192a:	6a 0f       	add	r22, r26
    192c:	71 1d       	adc	r23, r1
    192e:	81 1d       	adc	r24, r1
    1930:	91 1d       	adc	r25, r1
    1932:	a1 1d       	adc	r26, r1
    1934:	20 d0       	rcall	.+64     	; 0x1976 <__ultoa_invert+0x84>
    1936:	09 f4       	brne	.+2      	; 0x193a <__ultoa_invert+0x48>
    1938:	68 94       	set
    193a:	3f 91       	pop	r19
    193c:	2a e0       	ldi	r18, 0x0A	; 10
    193e:	26 9f       	mul	r18, r22
    1940:	11 24       	eor	r1, r1
    1942:	30 19       	sub	r19, r0
    1944:	30 5d       	subi	r19, 0xD0	; 208
    1946:	31 93       	st	Z+, r19
    1948:	de f6       	brtc	.-74     	; 0x1900 <__ultoa_invert+0xe>
    194a:	cf 01       	movw	r24, r30
    194c:	08 95       	ret
    194e:	46 2f       	mov	r20, r22
    1950:	47 70       	andi	r20, 0x07	; 7
    1952:	40 5d       	subi	r20, 0xD0	; 208
    1954:	41 93       	st	Z+, r20
    1956:	b3 e0       	ldi	r27, 0x03	; 3
    1958:	0f d0       	rcall	.+30     	; 0x1978 <__ultoa_invert+0x86>
    195a:	c9 f7       	brne	.-14     	; 0x194e <__ultoa_invert+0x5c>
    195c:	f6 cf       	rjmp	.-20     	; 0x194a <__ultoa_invert+0x58>
    195e:	46 2f       	mov	r20, r22
    1960:	4f 70       	andi	r20, 0x0F	; 15
    1962:	40 5d       	subi	r20, 0xD0	; 208
    1964:	4a 33       	cpi	r20, 0x3A	; 58
    1966:	18 f0       	brcs	.+6      	; 0x196e <__ultoa_invert+0x7c>
    1968:	49 5d       	subi	r20, 0xD9	; 217
    196a:	31 fd       	sbrc	r19, 1
    196c:	40 52       	subi	r20, 0x20	; 32
    196e:	41 93       	st	Z+, r20
    1970:	02 d0       	rcall	.+4      	; 0x1976 <__ultoa_invert+0x84>
    1972:	a9 f7       	brne	.-22     	; 0x195e <__ultoa_invert+0x6c>
    1974:	ea cf       	rjmp	.-44     	; 0x194a <__ultoa_invert+0x58>
    1976:	b4 e0       	ldi	r27, 0x04	; 4
    1978:	a6 95       	lsr	r26
    197a:	97 95       	ror	r25
    197c:	87 95       	ror	r24
    197e:	77 95       	ror	r23
    1980:	67 95       	ror	r22
    1982:	ba 95       	dec	r27
    1984:	c9 f7       	brne	.-14     	; 0x1978 <__ultoa_invert+0x86>
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	61 05       	cpc	r22, r1
    198a:	71 05       	cpc	r23, r1
    198c:	08 95       	ret
    198e:	9b 01       	movw	r18, r22
    1990:	ac 01       	movw	r20, r24
    1992:	0a 2e       	mov	r0, r26
    1994:	06 94       	lsr	r0
    1996:	57 95       	ror	r21
    1998:	47 95       	ror	r20
    199a:	37 95       	ror	r19
    199c:	27 95       	ror	r18
    199e:	ba 95       	dec	r27
    19a0:	c9 f7       	brne	.-14     	; 0x1994 <__ultoa_invert+0xa2>
    19a2:	62 0f       	add	r22, r18
    19a4:	73 1f       	adc	r23, r19
    19a6:	84 1f       	adc	r24, r20
    19a8:	95 1f       	adc	r25, r21
    19aa:	a0 1d       	adc	r26, r0
    19ac:	08 95       	ret

000019ae <__prologue_saves__>:
    19ae:	2f 92       	push	r2
    19b0:	3f 92       	push	r3
    19b2:	4f 92       	push	r4
    19b4:	5f 92       	push	r5
    19b6:	6f 92       	push	r6
    19b8:	7f 92       	push	r7
    19ba:	8f 92       	push	r8
    19bc:	9f 92       	push	r9
    19be:	af 92       	push	r10
    19c0:	bf 92       	push	r11
    19c2:	cf 92       	push	r12
    19c4:	df 92       	push	r13
    19c6:	ef 92       	push	r14
    19c8:	ff 92       	push	r15
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	ca 1b       	sub	r28, r26
    19d8:	db 0b       	sbc	r29, r27
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	09 94       	ijmp

000019e6 <__epilogue_restores__>:
    19e6:	2a 88       	ldd	r2, Y+18	; 0x12
    19e8:	39 88       	ldd	r3, Y+17	; 0x11
    19ea:	48 88       	ldd	r4, Y+16	; 0x10
    19ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    19ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    19f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    19f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    19f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    19f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    19f8:	b9 84       	ldd	r11, Y+9	; 0x09
    19fa:	c8 84       	ldd	r12, Y+8	; 0x08
    19fc:	df 80       	ldd	r13, Y+7	; 0x07
    19fe:	ee 80       	ldd	r14, Y+6	; 0x06
    1a00:	fd 80       	ldd	r15, Y+5	; 0x05
    1a02:	0c 81       	ldd	r16, Y+4	; 0x04
    1a04:	1b 81       	ldd	r17, Y+3	; 0x03
    1a06:	aa 81       	ldd	r26, Y+2	; 0x02
    1a08:	b9 81       	ldd	r27, Y+1	; 0x01
    1a0a:	ce 0f       	add	r28, r30
    1a0c:	d1 1d       	adc	r29, r1
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
    1a18:	ed 01       	movw	r28, r26
    1a1a:	08 95       	ret

00001a1c <_exit>:
    1a1c:	f8 94       	cli

00001a1e <__stop_program>:
    1a1e:	ff cf       	rjmp	.-2      	; 0x1a1e <__stop_program>

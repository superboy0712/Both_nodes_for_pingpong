
hello_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000254  00800100  00002678  0000270c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002678  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  00800354  00800354  00002960  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002960  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002e0  00000000  00000000  000029bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000040cf  00000000  00000000  00002c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001099  00000000  00000000  00006d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010e1  00000000  00000000  00007e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006e4  00000000  00000000  00008ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a59  00000000  00000000  000095cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001cde  00000000  00000000  0000a025  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000338  00000000  00000000  0000bd03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	/************************************************************************/


void pwm_config()
{
	DDRE |= (1<< PE2);       										//MAKE OCR1B as output
       0:	0c 94 08 02 	jmp	0x410	; 0x410 <__ctors_end>
	TCCR1A|= (1<<COM1B1);// | (1<<COM1B0);// | (1<<WGM10) ;				//non-inverted PWM, Phase correct plus frequency mode
       4:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__vector_1>
	TCCR1B |= (1<< CS11) | (1<< WGM13);	//pre scalar is 8, TOP is defined by OCR2A
       8:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
       c:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__vector_3>
	DUTY = 0x0ff/3*4;                      //Select 50 % duty!!!!													//50 % is duty cycle
      10:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      14:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      18:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      1c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      20:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      24:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      28:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      2c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      30:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      34:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      38:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      3c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      40:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      44:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      48:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      4c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      50:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__vector_20>
      54:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      58:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      5c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      60:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      64:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      68:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>
      6c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__bad_interrupt>

00000070 <Menu_5_1>:
      70:	07 01 1a 02 1a 02 85 01 1a 02 d2 04 cb 04 70 72     ..............pr
      80:	65 73 73 20 71 20 66 6f 72 20 4d 75 73 69 63 20     ess q for Music 
      90:	44 45 4d 4f 00                                      DEMO.

00000095 <Menu_4_1>:
      95:	07 01 1a 02 1a 02 9f 01 1a 02 d2 04 c4 04 70 72     ..............pr
      a5:	65 73 73 20 71 20 66 6f 72 20 47 72 61 70 68 69     ess q for Graphi
      b5:	63 20 44 45 4d 4f 00                                c DEMO.

000000bc <Menu_3_1>:
      bc:	07 01 1a 02 1a 02 bf 01 1a 02 d2 04 dd 04 70 72     ..............pr
      cc:	65 73 73 20 71 20 66 6f 72 20 64 65 62 75 67 20     ess q for debug 
      dc:	69 6e 66 6f 00                                      info.

000000e1 <Menu_2_3>:
      e1:	07 03 1a 02 f9 00 e3 01 1a 02 d2 04 00 00 54 75     ..............Tu
      f1:	6e 69 6e 67 20 4b 64 00                             ning Kd.

000000f9 <Menu_2_2>:
      f9:	07 02 e1 00 11 01 e3 01 1a 02 d2 04 00 00 54 75     ..............Tu
     109:	6e 69 6e 67 20 4b 69 00                             ning Ki.

00000111 <Menu_2_1>:
     111:	07 01 f9 00 1a 02 e3 01 1a 02 d2 04 00 00 54 75     ..............Tu
     121:	6e 69 6e 67 20 4b 70 00                             ning Kp.

00000129 <Menu_1_3>:
     129:	07 03 1a 02 41 01 00 02 1a 02 d2 04 00 00 41 75     ....A.........Au
     139:	74 6f 20 50 6c 61 79 00                             to Play.

00000141 <Menu_1_2>:
     141:	07 02 29 01 64 01 00 02 1a 02 d2 04 00 00 50 6c     ..).d.........Pl
     151:	61 79 20 77 69 74 68 20 53 6d 61 72 74 50 68 6f     ay with SmartPho
     161:	6e 65 00                                            ne.

00000164 <Menu_1_1>:
     164:	07 01 41 01 1a 02 00 02 1a 02 d2 04 00 00 50 6c     ..A...........Pl
     174:	61 79 20 77 69 74 68 20 4a 6f 79 73 74 69 63 6b     ay with Joystick
	...

00000185 <Menu_5>:
     185:	14 06 1a 02 9f 01 1a 02 70 00 d2 04 00 00 4d 75     ........p.....Mu
     195:	73 69 63 20 44 65 6d 6f 21 00                       sic Demo!.

0000019f <Menu_4>:
     19f:	14 05 85 01 bf 01 1a 02 95 00 d2 04 00 00 44 75     ..............Du
     1af:	61 6c 20 42 75 66 66 65 72 20 44 65 6d 6f 21 00     al Buffer Demo!.

000001bf <Menu_3>:
     1bf:	0f 04 9f 01 e3 01 1a 02 bc 00 d2 04 00 00 4f 6e     ..............On
     1cf:	20 74 68 65 20 46 6c 79 20 44 65 62 75 67 67 69      the Fly Debuggi
     1df:	6e 67 21 00                                         ng!.

000001e3 <Menu_2>:
     1e3:	0a 03 bf 01 00 02 1a 02 11 01 d2 04 00 00 4f 6e     ..............On
     1f3:	6c 69 6e 65 20 54 75 6e 69 6e 67 21 00              line Tuning!.

00000200 <Menu_1>:
     200:	05 02 e3 01 1a 02 1a 02 64 01 d2 04 00 00 4c 65     ........d.....Le
     210:	74 27 73 20 50 6c 61 79 21 00                       t's Play!.

0000021a <NULL_MENU>:
	...

00000228 <font>:
     228:	00 00 00 00 00 00 00 5e 00 00 00 0e 00 0e 00 28     .......^.......(
     238:	7c 28 7c 28 08 54 7c 54 20 26 10 08 64 00 28 54     |(|(.T|T &..d.(T
     248:	28 40 00 00 00 0e 00 00 00 3c 42 00 00 00 42 3c     (@.......<B...B<
     258:	00 00 00 54 38 54 00 10 10 7c 10 10 00 80 60 20     ...T8T...|....` 
     268:	00 10 10 10 10 00 00 60 60 00 00 20 10 08 04 00     .......``.. ....
     278:	00 3c 42 3c 00 00 44 7e 40 00 44 62 52 4c 00 22     .<B<..D~@.DbRL."
     288:	4a 4a 36 00 18 14 7e 10 00 2e 4a 4a 32 00 3c 4a     JJ6...~...JJ2.<J
     298:	4a 30 00 02 62 1a 06 00 34 4a 4a 34 00 0c 52 52     J0..b...4JJ4..RR
     2a8:	3c 00 00 6c 6c 00 00 80 6c 2c 00 00 00 10 28 44     <..ll...l,....(D
     2b8:	00 28 28 28 28 00 00 44 28 10 00 00 04 52 0c 00     .((((..D(....R..
     2c8:	3c 42 5a 1c 00 7c 12 12 7c 00 7e 4a 4a 34 00 3c     <BZ..|..|.~JJ4.<
     2d8:	42 42 24 00 7e 42 42 3c 00 7e 4a 4a 42 00 7e 0a     BB$.~BB<.~JJB.~.
     2e8:	0a 02 00 3c 42 52 74 00 7e 08 08 7e 00 00 42 7e     ...<BRt.~..~..B~
     2f8:	42 00 20 40 40 3e 00 7e 18 24 42 00 7e 40 40 40     B. @@>.~.$B.~@@@
     308:	00 7e 0c 0c 7e 00 7e 0c 30 7e 00 3c 42 42 3c 00     .~..~.~.0~.<BB<.
     318:	7e 12 12 0c 00 3c 62 42 bc 00 7e 12 32 4c 00 24     ~....<bB..~.2L.$
     328:	4a 52 24 00 00 02 7e 02 00 3e 40 40 3e 00 1e 60     JR$...~..>@@>..`
     338:	60 1e 00 7e 30 30 7e 00 66 18 18 66 00 00 0e 70     `..~00~.f..f...p
     348:	0e 00 62 52 4a 46 00 00 7e 42 42 00 04 08 10 20     ..bRJF..~BB.... 
     358:	00 00 42 42 7e 00 00 04 02 04 00 40 40 40 40 00     ..BB~......@@@@.
     368:	00 02 04 00 00 30 48 28 78 00 7e 48 48 30 00 30     .....0H(x.~HH0.0
     378:	48 48 00 00 30 48 48 7e 00 30 68 58 10 00 10 7c     HH..0HH~.0hX...|
     388:	12 04 00 50 a8 a8 98 00 7e 08 08 70 00 00 48 7a     ...P....~..p..Hz
     398:	40 00 00 40 80 7a 00 7e 10 28 40 00 00 42 7e 40     @..@.z.~.(@..B~@
     3a8:	00 78 10 18 70 00 78 08 08 70 00 30 48 48 30 00     .x..p.x..p.0HH0.
     3b8:	f8 48 48 30 00 30 48 48 f8 00 78 08 08 10 00 50     .HH0.0HH..x....P
     3c8:	58 68 28 00 08 3e 48 40 00 38 40 40 78 00 00 38     Xh(..>H@.8@@x..8
     3d8:	40 38 00 78 60 60 78 00 48 30 30 48 00 18 a0 40     @8.x``x.H00H...@
     3e8:	38 00 48 68 58 48 00 00 08 3c 42 00 00 00 7e 00     8.HhXH...<B...~.
     3f8:	00 00 42 3c 08 00 04 02 04 02 00                    ..B<.......

00000403 <__c.2299>:
     403:	63 64 69 6e 6f 70 73 75 78 58 5b 00 00              cdinopsuxX[..

00000410 <__ctors_end>:
     410:	11 24       	eor	r1, r1
     412:	1f be       	out	0x3f, r1	; 63
     414:	cf ef       	ldi	r28, 0xFF	; 255
     416:	d4 e0       	ldi	r29, 0x04	; 4
     418:	de bf       	out	0x3e, r29	; 62
     41a:	cd bf       	out	0x3d, r28	; 61

0000041c <__do_copy_data>:
     41c:	13 e0       	ldi	r17, 0x03	; 3
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b1 e0       	ldi	r27, 0x01	; 1
     422:	e8 e7       	ldi	r30, 0x78	; 120
     424:	f6 e2       	ldi	r31, 0x26	; 38
     426:	02 c0       	rjmp	.+4      	; 0x42c <__do_copy_data+0x10>
     428:	05 90       	lpm	r0, Z+
     42a:	0d 92       	st	X+, r0
     42c:	a4 35       	cpi	r26, 0x54	; 84
     42e:	b1 07       	cpc	r27, r17
     430:	d9 f7       	brne	.-10     	; 0x428 <__do_copy_data+0xc>

00000432 <__do_clear_bss>:
     432:	23 e0       	ldi	r18, 0x03	; 3
     434:	a4 e5       	ldi	r26, 0x54	; 84
     436:	b3 e0       	ldi	r27, 0x03	; 3
     438:	01 c0       	rjmp	.+2      	; 0x43c <.do_clear_bss_start>

0000043a <.do_clear_bss_loop>:
     43a:	1d 92       	st	X+, r1

0000043c <.do_clear_bss_start>:
     43c:	ab 38       	cpi	r26, 0x8B	; 139
     43e:	b2 07       	cpc	r27, r18
     440:	e1 f7       	brne	.-8      	; 0x43a <.do_clear_bss_loop>
     442:	0e 94 00 05 	call	0xa00	; 0xa00 <main>
     446:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <_exit>

0000044a <__bad_interrupt>:
     44a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000044e <adc_read>:
uint8_t adc_read(int channel)
{
	uint8_t data=0;
	int i=0;
	
	volatile uint8_t *p_write= (uint8_t *) (ADC_ADDR_START+channel);
     44e:	fc 01       	movw	r30, r24
     450:	fc 5e       	subi	r31, 0xEC	; 236
	volatile uint8_t *p_read= (uint8_t*) (ADC_ADDR_START);
	*p_write=channel;		//select Channel of ADC
     452:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     454:	26 ea       	ldi	r18, 0xA6	; 166
     456:	2a 95       	dec	r18
     458:	f1 f7       	brne	.-4      	; 0x456 <adc_read+0x8>
     45a:	00 c0       	rjmp	.+0      	; 0x45c <adc_read+0xe>
	_delay_us(500);
	
	data=*p_read;		//read data from ADC
     45c:	80 91 00 14 	lds	r24, 0x1400
	i=data;
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	36 ea       	ldi	r19, 0xA6	; 166
     464:	3a 95       	dec	r19
     466:	f1 f7       	brne	.-4      	; 0x464 <adc_read+0x16>
     468:	00 c0       	rjmp	.+0      	; 0x46a <adc_read+0x1c>
	_delay_us(500);
	data=*p_read;		//read data from ADC
     46a:	20 91 00 14 	lds	r18, 0x1400
	i+=data;
     46e:	82 0f       	add	r24, r18
     470:	91 1d       	adc	r25, r1
     472:	26 ea       	ldi	r18, 0xA6	; 166
     474:	2a 95       	dec	r18
     476:	f1 f7       	brne	.-4      	; 0x474 <adc_read+0x26>
     478:	00 c0       	rjmp	.+0      	; 0x47a <adc_read+0x2c>
	_delay_us(500);
	data=*p_read;		//read data from ADC
     47a:	20 91 00 14 	lds	r18, 0x1400
     47e:	36 ea       	ldi	r19, 0xA6	; 166
     480:	3a 95       	dec	r19
     482:	f1 f7       	brne	.-4      	; 0x480 <adc_read+0x32>
     484:	00 c0       	rjmp	.+0      	; 0x486 <adc_read+0x38>
	i+=data;
     486:	82 0f       	add	r24, r18
     488:	91 1d       	adc	r25, r1
	_delay_us(500);

	data=(uint8_t) (i/3);		//Average 3 samples
     48a:	63 e0       	ldi	r22, 0x03	; 3
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	0e 94 8d 0c 	call	0x191a	; 0x191a <__divmodhi4>
     492:	86 2f       	mov	r24, r22
	return data;
	
}
     494:	08 95       	ret

00000496 <adc_calibrate>:
	
	
	volatile uint8_t *p_read= (uint8_t *) (ADC_ADDR_START);
	
	
	data=*p_read;		//read data from ADC
     496:	80 91 00 14 	lds	r24, 0x1400
     49a:	8a e0       	ldi	r24, 0x0A	; 10
     49c:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t adc_calibrate(int channel)
{
	uint8_t data=0;
	uint16_t i=0;
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	30 e0       	ldi	r19, 0x00	; 0
	
	
	data=*p_read;		//read data from ADC
	int j;
	for(j = 0; j< 10; j++){
		data=*p_read;
     4a2:	e0 e0       	ldi	r30, 0x00	; 0
     4a4:	f4 e1       	ldi	r31, 0x14	; 20
     4a6:	40 81       	ld	r20, Z
		i+=data;
     4a8:	24 0f       	add	r18, r20
     4aa:	31 1d       	adc	r19, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ac:	a7 ea       	ldi	r26, 0xA7	; 167
     4ae:	b1 e6       	ldi	r27, 0x61	; 97
     4b0:	11 97       	sbiw	r26, 0x01	; 1
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <adc_calibrate+0x1a>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <adc_calibrate+0x20>
     4b6:	00 00       	nop
     4b8:	01 97       	sbiw	r24, 0x01	; 1
	volatile uint8_t *p_read= (uint8_t *) (ADC_ADDR_START);
	
	
	data=*p_read;		//read data from ADC
	int j;
	for(j = 0; j< 10; j++){
     4ba:	00 97       	sbiw	r24, 0x00	; 0
     4bc:	a1 f7       	brne	.-24     	; 0x4a6 <adc_calibrate+0x10>
		data=*p_read;
		i+=data;
		_delay_ms(100);	
	}
	data=(uint8_t) (i/10);			//Average 10 samples
     4be:	ad ec       	ldi	r26, 0xCD	; 205
     4c0:	bc ec       	ldi	r27, 0xCC	; 204
     4c2:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__umulhisi3>
     4c6:	96 95       	lsr	r25
     4c8:	87 95       	ror	r24
     4ca:	96 95       	lsr	r25
     4cc:	87 95       	ror	r24
     4ce:	96 95       	lsr	r25
     4d0:	87 95       	ror	r24
	return data;
	
}
     4d2:	08 95       	ret

000004d4 <adc_init>:

static uint8_t x_mean=0,y_mean=0;

void adc_init(void)
{
	MCUCR |= (1<<SRE);		//Enable XMEM interface
     4d4:	85 b7       	in	r24, 0x35	; 53
     4d6:	80 68       	ori	r24, 0x80	; 128
     4d8:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);		//Mask out higher 4 bits of address
     4da:	80 b7       	in	r24, 0x30	; 48
     4dc:	80 62       	ori	r24, 0x20	; 32
     4de:	80 bf       	out	0x30, r24	; 48
	x_mean=adc_calibrate(X_CH);
     4e0:	86 e0       	ldi	r24, 0x06	; 6
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 4b 02 	call	0x496	; 0x496 <adc_calibrate>
     4e8:	80 93 55 03 	sts	0x0355, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ec:	80 e1       	ldi	r24, 0x10	; 16
     4ee:	8a 95       	dec	r24
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <adc_init+0x1a>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <adc_init+0x20>
	_delay_us(50);
	y_mean=adc_calibrate(Y_CH);
     4f4:	84 e0       	ldi	r24, 0x04	; 4
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 4b 02 	call	0x496	; 0x496 <adc_calibrate>
     4fc:	80 93 54 03 	sts	0x0354, r24
     500:	80 e1       	ldi	r24, 0x10	; 16
     502:	8a 95       	dec	r24
     504:	f1 f7       	brne	.-4      	; 0x502 <__stack+0x3>
     506:	00 c0       	rjmp	.+0      	; 0x508 <__stack+0x9>
     508:	08 95       	ret

0000050a <adc_get_position>:
	*y_val=(signed int) ((*y_val-y_mean)*100/128);
}

//struct adc_pos {int16_t x; int16_t y;};
	
struct adc_pos adc_get_position(void){
     50a:	cf 93       	push	r28
	struct adc_pos pos;


	pos.x = adc_read(X_CH);
     50c:	86 e0       	ldi	r24, 0x06	; 6
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 27 02 	call	0x44e	; 0x44e <adc_read>
     514:	c8 2f       	mov	r28, r24
	pos.y = adc_read(Y_CH);//-y_mean;
     516:	84 e0       	ldi	r24, 0x04	; 4
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 27 02 	call	0x44e	; 0x44e <adc_read>
	//
	return pos;
     51e:	6c 2f       	mov	r22, r28
     520:	78 2f       	mov	r23, r24
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <spi_config>:

		//SPI FUNCTIONS

void spi_config(void)
{
	DDRB |= (1<<SS) | (1<<MOSI) | (1<<SCK);		//set MOSI, SS and SCK as output
     528:	87 b3       	in	r24, 0x17	; 23
     52a:	80 6b       	ori	r24, 0xB0	; 176
     52c:	87 bb       	out	0x17, r24	; 23
	PORTB|=(1<<SS);								//set SS high to disable slave
     52e:	c4 9a       	sbi	0x18, 4	; 24
	SPCR |= (1<<SPE) | (1<<MSTR);				//enable spi in master mode,non-interrupt,MSB first,Leading Edge=Rising,sample at leading edge,fosc/4 is SCK
     530:	8d b1       	in	r24, 0x0d	; 13
     532:	80 65       	ori	r24, 0x50	; 80
     534:	8d b9       	out	0x0d, r24	; 13
     536:	08 95       	ret

00000538 <spi_chipselect>:
}


void spi_chipselect(uint8_t signal)
{
	if(signal==1)
     538:	81 30       	cpi	r24, 0x01	; 1
     53a:	11 f4       	brne	.+4      	; 0x540 <spi_chipselect+0x8>
	{
		PORTB &= ~(1<<SS);					//set SS=0 and enable slave, define enable 1 in main prog!!!
     53c:	c4 98       	cbi	0x18, 4	; 24
     53e:	08 95       	ret
	}
	else
	{
		PORTB |=(1<<SS);					//set SS=1 and disable slave, define disable 0 in main prog!!!
     540:	c4 9a       	sbi	0x18, 4	; 24
     542:	08 95       	ret

00000544 <spi_tx_rx>:

unsigned char spi_tx_rx(unsigned char data)
{
	char rx_data;

	SPDR=data;							//sent data on SPI
     544:	8f b9       	out	0x0f, r24	; 15

	while(!(SPSR & (1<<SPIF)));			//wait until flag is not equal to 1
     546:	77 9b       	sbis	0x0e, 7	; 14
     548:	fe cf       	rjmp	.-4      	; 0x546 <spi_tx_rx+0x2>

	rx_data=SPDR;						//receive data from spi
     54a:	8f b1       	in	r24, 0x0f	; 15
	return rx_data;
}
     54c:	08 95       	ret

0000054e <can_reset>:
		

void can_reset(void)
{
	//ENABLE SLAVE AND SEND TRANSMIT CODE
	spi_chipselect(ENABLE);
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	spi_tx_rx(RESET);
     554:	80 ec       	ldi	r24, 0xC0	; 192
     556:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	spi_chipselect(DISABLE);
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
     560:	08 95       	ret

00000562 <can_rx_if_clear>:


void can_rx_if_clear(void)
{
	
	spi_chipselect(ENABLE);
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	
	spi_tx_rx(BIT_MODIFY_CMD);			
     568:	85 e0       	ldi	r24, 0x05	; 5
     56a:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	spi_tx_rx(INT_FLAG_ADDR);
     56e:	8c e2       	ldi	r24, 0x2C	; 44
     570:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	spi_tx_rx(RX_MASK);			
     574:	8f ef       	ldi	r24, 0xFF	; 255
     576:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	spi_tx_rx(0x00);				//send 0x00 to clear flags
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	
	spi_chipselect(DISABLE);
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
     586:	08 95       	ret

00000588 <can_transmit>:
}


void can_transmit(uint8_t buff_num,uint8_t msg_id,uint8_t length, char *data)		//ask that can we for address use 8_t!!!!!
{
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	c8 2f       	mov	r28, r24
     596:	d6 2f       	mov	r29, r22
     598:	04 2f       	mov	r16, r20
     59a:	e2 2e       	mov	r14, r18
     59c:	13 2f       	mov	r17, r19

	unsigned char temp=0;
	//always maximum priority is used, standard frames no remote request

	spi_chipselect(ENABLE);		//enable slave (mcp)
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>


			//check for pending transmissions

	
	spi_tx_rx((unsigned char)READ_CMD);
     5a4:	83 e0       	ldi	r24, 0x03	; 3
     5a6:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>

	spi_tx_rx((unsigned char)0x30+(buff_num*0x10));		//send address of Transmit Control Register (add 10 to base address to point to other buffers)
     5aa:	8c 2f       	mov	r24, r28
     5ac:	82 95       	swap	r24
     5ae:	80 7f       	andi	r24, 0xF0	; 240
     5b0:	0f 2e       	mov	r0, r31
     5b2:	f0 e3       	ldi	r31, 0x30	; 48
     5b4:	ff 2e       	mov	r15, r31
     5b6:	f0 2d       	mov	r31, r0
     5b8:	f8 0e       	add	r15, r24
     5ba:	8f 2d       	mov	r24, r15
     5bc:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>

	temp=spi_tx_rx((unsigned char)0);			//send zero and get status of buffer (Transmit Control Register) in temp
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
		temp=spi_tx_rx((unsigned char)0);			//send zero and get status of buffer (Transmit Control Register) in temp
		
		spi_chipselect(DISABLE);
	}
*/
	spi_chipselect(DISABLE);
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>

			//preparing TX buffer to start transmission
	
		//priority
		
	spi_chipselect(ENABLE);
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>

	spi_tx_rx((unsigned char)WRITE_CMD);		//send write command when flag is cleared
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>

	spi_tx_rx((unsigned char)0x30+(buff_num*0x10));		//send address of Transmit Control Register (add 10 to base address to point to other registers)
     5d8:	8f 2d       	mov	r24, r15
     5da:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>

	spi_tx_rx((unsigned char)0x03);			//send message priority as highest (first 2 bits in control register)!!!!
     5de:	83 e0       	ldi	r24, 0x03	; 3
     5e0:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>

	spi_chipselect(DISABLE);
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	
	//higher byte of ID
	
	spi_chipselect(ENABLE);
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>

	spi_tx_rx(WRITE_CMD);
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	
	spi_tx_rx(0x31+(buff_num*0x10));		//send address of Transmit Buffer Std. Identifier HIGH Register (add 10 to base address to point to other registers)
     5f6:	c2 95       	swap	r28
     5f8:	c0 7f       	andi	r28, 0xF0	; 240
     5fa:	81 e3       	ldi	r24, 0x31	; 49
     5fc:	8c 0f       	add	r24, r28
     5fe:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>

	spi_tx_rx((unsigned char)msg_id>>3);			//shift out lower 3 bits!!!!
     602:	8d 2f       	mov	r24, r29
     604:	86 95       	lsr	r24
     606:	86 95       	lsr	r24
     608:	86 95       	lsr	r24
     60a:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>

	spi_chipselect(DISABLE);
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	
		//lower byte of ID
	
	spi_chipselect(ENABLE);
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	
	spi_tx_rx(WRITE_CMD);
     61a:	82 e0       	ldi	r24, 0x02	; 2
     61c:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	
	spi_tx_rx((unsigned char)0x32+(buff_num*0x10));		//send address of Transmit Buffer Std. Identifier LOW Register (add 10 to base address to point to other registers)
     620:	82 e3       	ldi	r24, 0x32	; 50
     622:	8c 0f       	add	r24, r28
     624:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>

	spi_tx_rx((unsigned char)msg_id<<5);			//shift lower 5 bits to higher position!!!!
     628:	8d 2f       	mov	r24, r29
     62a:	82 95       	swap	r24
     62c:	88 0f       	add	r24, r24
     62e:	80 7e       	andi	r24, 0xE0	; 224
     630:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	
	spi_chipselect(DISABLE);
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	
		//length of data
	
	spi_chipselect(ENABLE);
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	
	spi_tx_rx(WRITE_CMD);
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>

	spi_tx_rx((unsigned char)0x35+(buff_num*0x10));		//send address of Transmit Buffer Data Length Register, RTR is always 0!!!
     646:	85 e3       	ldi	r24, 0x35	; 53
     648:	8c 0f       	add	r24, r28
     64a:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>

	spi_tx_rx((unsigned char)(length & 0x0F));			//only lower 4 bits of length are used, RTR=0
     64e:	80 2f       	mov	r24, r16
     650:	8f 70       	andi	r24, 0x0F	; 15
     652:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	
	spi_chipselect(DISABLE);
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>


			//NOW DATA IS SENT
	spi_chipselect(ENABLE);
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	spi_tx_rx(WRITE_CMD);
     662:	82 e0       	ldi	r24, 0x02	; 2
     664:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	spi_tx_rx((unsigned char)((0x36+(buff_num*0x10))));
     668:	86 e3       	ldi	r24, 0x36	; 54
     66a:	8c 0f       	add	r24, r28
     66c:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>

	unsigned char loop_var;
	
	 for(loop_var=0;loop_var<length;loop_var++)
     670:	00 23       	and	r16, r16
     672:	49 f0       	breq	.+18     	; 0x686 <can_transmit+0xfe>
     674:	ce 2d       	mov	r28, r14
     676:	d1 2f       	mov	r29, r17
     678:	10 e0       	ldi	r17, 0x00	; 0
	 {
		 //spi_tx_rx((unsigned char)((0x36+(buff_num*0x10))+loop_var));		//transmit buffer data registers addresses

		 spi_tx_rx(data[loop_var]);				//data to be sent!!!!
     67a:	89 91       	ld	r24, Y+
     67c:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	spi_tx_rx(WRITE_CMD);
	spi_tx_rx((unsigned char)((0x36+(buff_num*0x10))));

	unsigned char loop_var;
	
	 for(loop_var=0;loop_var<length;loop_var++)
     680:	1f 5f       	subi	r17, 0xFF	; 255
     682:	10 13       	cpse	r17, r16
     684:	fa cf       	rjmp	.-12     	; 0x67a <can_transmit+0xf2>

		 spi_tx_rx(data[loop_var]);				//data to be sent!!!!

	 }

	spi_chipselect(DISABLE);
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	
		//set TXREQ to initiate transmission
	
	spi_chipselect(ENABLE);
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	spi_tx_rx(WRITE_CMD);
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	

			//TX initiation part


	spi_tx_rx((unsigned char)0x30+(buff_num*0x10));		//send address of Transmit Control Register (add 10 to base address to point to other registers)
     698:	8f 2d       	mov	r24, r15
     69a:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>

	spi_tx_rx((unsigned char)0x08);			//set TXREQ to start transmission, it is 4th bit!!!!
     69e:	88 e0       	ldi	r24, 0x08	; 8
     6a0:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>

	spi_chipselect(DISABLE);				//disable slave
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	
	//clear flag!!! YULONG THE GREAT
	
	can_rx_if_clear();
     6aa:	0e 94 b1 02 	call	0x562	; 0x562 <can_rx_if_clear>

}
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	08 95       	ret

000006bc <can_write_reg>:
	spi_chipselect(DISABLE);

}

void can_write_reg(uint8_t addr, char data)
{
     6bc:	cf 93       	push	r28
     6be:	c6 2f       	mov	r28, r22
    spi_tx_rx((unsigned char) addr);
     6c0:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
    spi_tx_rx((unsigned char)data);
     6c4:	8c 2f       	mov	r24, r28
     6c6:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
}
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <can_receive>:

void can_receive(uint8_t *id,uint8_t *length, char *data)
{
     6ce:	8f 92       	push	r8
     6d0:	9f 92       	push	r9
     6d2:	af 92       	push	r10
     6d4:	bf 92       	push	r11
     6d6:	cf 92       	push	r12
     6d8:	df 92       	push	r13
     6da:	ef 92       	push	r14
     6dc:	ff 92       	push	r15
     6de:	0f 93       	push	r16
     6e0:	1f 93       	push	r17
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
     6ea:	2e 97       	sbiw	r28, 0x0e	; 14
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	f8 94       	cli
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	cd bf       	out	0x3d, r28	; 61
     6f6:	6c 01       	movw	r12, r24
     6f8:	5b 01       	movw	r10, r22
     6fa:	84 2e       	mov	r8, r20
     6fc:	95 2e       	mov	r9, r21
    unsigned char temp_data[14]={0};
     6fe:	8e 01       	movw	r16, r28
     700:	0f 5f       	subi	r16, 0xFF	; 255
     702:	1f 4f       	sbci	r17, 0xFF	; 255
     704:	8e e0       	ldi	r24, 0x0E	; 14
     706:	f8 01       	movw	r30, r16
     708:	11 92       	st	Z+, r1
     70a:	8a 95       	dec	r24
     70c:	e9 f7       	brne	.-6      	; 0x708 <can_receive+0x3a>
    uint8_t buff_id=0,loop_var=0;
  

            //ID of RX buffer which received message

	spi_chipselect(ENABLE);
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	
	spi_tx_rx((unsigned char)RX_STATUS_CMD);      //send RX Status Command
     714:	80 eb       	ldi	r24, 0xB0	; 176
     716:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>

    buff_id=spi_tx_rx(0);			//to exclude first byte because of suspected error 
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	buff_id=spi_tx_rx(0);			//to ensure we get correct byte because data is repeating and previous can be corrupted
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
     726:	f8 2e       	mov	r15, r24
	
	spi_chipselect(DISABLE);
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
    buff_id=(buff_id>>6);               //get value of buffer id into higher two bytes
	
	
    //message reception
	
	spi_chipselect(ENABLE);
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
    spi_tx_rx(READ_CMD);
     734:	83 e0       	ldi	r24, 0x03	; 3
     736:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
    buff_id=spi_tx_rx(0);			//to exclude first byte because of suspected error 
	buff_id=spi_tx_rx(0);			//to ensure we get correct byte because data is repeating and previous can be corrupted
	
	spi_chipselect(DISABLE);
	
    buff_id=(buff_id>>6);               //get value of buffer id into higher two bytes
     73a:	8f 2d       	mov	r24, r15
     73c:	82 95       	swap	r24
     73e:	86 95       	lsr	r24
     740:	86 95       	lsr	r24
     742:	83 70       	andi	r24, 0x03	; 3
    //message reception
	
	spi_chipselect(ENABLE);
    spi_tx_rx(READ_CMD);

    spi_tx_rx((unsigned char) 0x60 + (buff_id-1));      //id can have value of  or 2, so subtract 1 in order to make it 0 or 1
     744:	81 5a       	subi	r24, 0xA1	; 161
     746:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
     74a:	7e 01       	movw	r14, r28
     74c:	ff e0       	ldi	r31, 0x0F	; 15
     74e:	ef 0e       	add	r14, r31
     750:	f1 1c       	adc	r15, r1


     for(loop_var=0;loop_var<14;loop_var++)
     {
         temp_data[loop_var]=spi_tx_rx(0);          //receive whole data
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
     758:	f8 01       	movw	r30, r16
     75a:	81 93       	st	Z+, r24
     75c:	8f 01       	movw	r16, r30
    spi_tx_rx(READ_CMD);

    spi_tx_rx((unsigned char) 0x60 + (buff_id-1));      //id can have value of  or 2, so subtract 1 in order to make it 0 or 1


     for(loop_var=0;loop_var<14;loop_var++)
     75e:	ee 15       	cp	r30, r14
     760:	ff 05       	cpc	r31, r15
     762:	b9 f7       	brne	.-18     	; 0x752 <can_receive+0x84>
     {
         temp_data[loop_var]=spi_tx_rx(0);          //receive whole data
     }
	 
     id[0]=temp_data[1]<<3;
     764:	8a 81       	ldd	r24, Y+2	; 0x02
     766:	88 0f       	add	r24, r24
     768:	88 0f       	add	r24, r24
     76a:	88 0f       	add	r24, r24
     76c:	f6 01       	movw	r30, r12
     76e:	80 83       	st	Z, r24
     id[1]=temp_data[2]>>5;
     770:	8b 81       	ldd	r24, Y+3	; 0x03
     772:	82 95       	swap	r24
     774:	86 95       	lsr	r24
     776:	87 70       	andi	r24, 0x07	; 7
     778:	81 83       	std	Z+1, r24	; 0x01

     length[0]=temp_data[5];        //5th byte is length
     77a:	8e 81       	ldd	r24, Y+6	; 0x06
     77c:	f5 01       	movw	r30, r10
     77e:	80 83       	st	Z, r24
     780:	fe 01       	movw	r30, r28
     782:	37 96       	adiw	r30, 0x07	; 7
     784:	a8 2d       	mov	r26, r8
     786:	b9 2d       	mov	r27, r9

     for(loop_var=6;loop_var<14;loop_var++)
     {
         data[loop_var-6]=temp_data[loop_var];              //data starts from  6th bye!!!
     788:	81 91       	ld	r24, Z+
     78a:	8d 93       	st	X+, r24
     id[0]=temp_data[1]<<3;
     id[1]=temp_data[2]>>5;

     length[0]=temp_data[5];        //5th byte is length

     for(loop_var=6;loop_var<14;loop_var++)
     78c:	ee 16       	cp	r14, r30
     78e:	ff 06       	cpc	r15, r31
     790:	d9 f7       	brne	.-10     	; 0x788 <can_receive+0xba>
	 spi_tx_rx(INT_FLAG_ADDR);
	 
	 spi_tx_rx(0x00);
	 
	 spi_chipselect(DISABLE);*/
	can_rx_if_clear();
     792:	0e 94 b1 02 	call	0x562	; 0x562 <can_rx_if_clear>
	//can_reset();
}
     796:	2e 96       	adiw	r28, 0x0e	; 14
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	af 90       	pop	r10
     7b6:	9f 90       	pop	r9
     7b8:	8f 90       	pop	r8
     7ba:	08 95       	ret

000007bc <can_read_status>:


char can_read_status(void)
{
	char data=0;
	spi_chipselect(ENABLE);
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	spi_tx_rx(READ_CMD);
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	spi_tx_rx(0xFE);		//address of data register
     7c8:	8e ef       	ldi	r24, 0xFE	; 254
     7ca:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	data=spi_tx_rx(0);		//upper 3 bits are mode of operation, bit 1 till 3 are for interrupt 
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	return data;			//for mode, shift by 5, for interrupt, and with 0b00001110 and shift by 1
     7d4:	08 95       	ret

000007d6 <can_config>:
	can_rx_if_clear();

}

void can_config(int mode)
{
     7d6:	cf 93       	push	r28
     7d8:	c8 2f       	mov	r28, r24
	can_reset();		//reset mcp
     7da:	0e 94 a7 02 	call	0x54e	; 0x54e <can_reset>

	spi_chipselect(ENABLE);		//enable slave
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>

	spi_tx_rx(WRITE_CMD);
     7e4:	82 e0       	ldi	r24, 0x02	; 2
     7e6:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>

            //Send address of CAN CONTROL registerxFF because 0xXFH is mentioned
			//0b10000000 to enter config mode
			//be aware of potential delay while setting config_mode
			
    can_write_reg(0xFF,0x80);			//check config mode is achieved or not
     7ea:	60 e8       	ldi	r22, 0x80	; 128
     7ec:	8f ef       	ldi	r24, 0xFF	; 255
     7ee:	0e 94 5e 03 	call	0x6bc	; 0x6bc <can_write_reg>
	
	spi_chipselect(DISABLE);
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	
	if(can_read_status()>>5 !=0x04)
     7f8:	0e 94 de 03 	call	0x7bc	; 0x7bc <can_read_status>
     7fc:	82 95       	swap	r24
     7fe:	86 95       	lsr	r24
     800:	87 70       	andi	r24, 0x07	; 7
     802:	84 30       	cpi	r24, 0x04	; 4
     804:	49 f0       	breq	.+18     	; 0x818 <can_config+0x42>
	{
		printf("\n\rERROR UNABLE TO ENTER CONFIG MODE\n\r");
     806:	2e e1       	ldi	r18, 0x1E	; 30
     808:	31 e0       	ldi	r19, 0x01	; 1
     80a:	3f 93       	push	r19
     80c:	2f 93       	push	r18
     80e:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <printf>
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	08 c0       	rjmp	.+16     	; 0x828 <can_config+0x52>
	}	
	
	else 
	{
		printf("\n\r CONFIG MODE ACHIEVED\n\r");
     818:	24 e4       	ldi	r18, 0x44	; 68
     81a:	31 e0       	ldi	r19, 0x01	; 1
     81c:	3f 93       	push	r19
     81e:	2f 93       	push	r18
     820:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <printf>
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
     828:	88 e1       	ldi	r24, 0x18	; 24
     82a:	94 e0       	ldi	r25, 0x04	; 4
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	f1 f7       	brne	.-4      	; 0x82c <can_config+0x56>
     830:	00 c0       	rjmp	.+0      	; 0x832 <can_config+0x5c>
     832:	00 00       	nop

        //send 0x00 to enable all messages
		_delay_us(1000); // TODO remove this test
		

	spi_chipselect(ENABLE);		//enable slave
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	spi_tx_rx(WRITE_CMD);
     83a:	82 e0       	ldi	r24, 0x02	; 2
     83c:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
    can_write_reg(0x20,0x00);
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	80 e2       	ldi	r24, 0x20	; 32
     844:	0e 94 5e 03 	call	0x6bc	; 0x6bc <can_write_reg>
	spi_chipselect(DISABLE);
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
     84e:	88 e1       	ldi	r24, 0x18	; 24
     850:	94 e0       	ldi	r25, 0x04	; 4
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <can_config+0x7c>
     856:	00 c0       	rjmp	.+0      	; 0x858 <can_config+0x82>
     858:	00 00       	nop

	_delay_us(1000); // TODO remove this test

	spi_chipselect(ENABLE);		//enable slave
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	spi_tx_rx(WRITE_CMD);
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	can_write_reg(0x24,0x00);
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	84 e2       	ldi	r24, 0x24	; 36
     86a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <can_write_reg>
	spi_chipselect(DISABLE);
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
     874:	88 e1       	ldi	r24, 0x18	; 24
     876:	94 e0       	ldi	r25, 0x04	; 4
     878:	01 97       	sbiw	r24, 0x01	; 1
     87a:	f1 f7       	brne	.-4      	; 0x878 <can_config+0xa2>
     87c:	00 c0       	rjmp	.+0      	; 0x87e <can_config+0xa8>
     87e:	00 00       	nop
	
	_delay_us(1000); // TODO remove this test
	
	spi_chipselect(ENABLE);		//enable slave
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	spi_tx_rx(WRITE_CMD);
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	can_write_reg(0x21,0x00);
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	81 e2       	ldi	r24, 0x21	; 33
     890:	0e 94 5e 03 	call	0x6bc	; 0x6bc <can_write_reg>
	spi_chipselect(DISABLE);
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
     89a:	88 e1       	ldi	r24, 0x18	; 24
     89c:	94 e0       	ldi	r25, 0x04	; 4
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <can_config+0xc8>
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <can_config+0xce>
     8a4:	00 00       	nop
	
	_delay_us(1000); // TODO remove this test
	
	spi_chipselect(ENABLE);		//enable slave
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	spi_tx_rx(WRITE_CMD);
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	can_write_reg(0x25,0x00);
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	85 e2       	ldi	r24, 0x25	; 37
     8b6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <can_write_reg>
	spi_chipselect(DISABLE);
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
     8c0:	88 e1       	ldi	r24, 0x18	; 24
     8c2:	94 e0       	ldi	r25, 0x04	; 4
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	f1 f7       	brne	.-4      	; 0x8c4 <can_config+0xee>
     8c8:	00 c0       	rjmp	.+0      	; 0x8ca <can_config+0xf4>
     8ca:	00 00       	nop
	//Enable interrupts for reception

	//address of CAN Interrupt register

	//enable RX0 and RX1 interrupt only!!!!
    spi_chipselect(ENABLE);		//enable slave
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
    spi_tx_rx(WRITE_CMD);
     8d2:	82 e0       	ldi	r24, 0x02	; 2
     8d4:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
	can_write_reg(0x2B,0x03);
     8d8:	63 e0       	ldi	r22, 0x03	; 3
     8da:	8b e2       	ldi	r24, 0x2B	; 43
     8dc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <can_write_reg>
	spi_chipselect(DISABLE);
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
     8e6:	88 e1       	ldi	r24, 0x18	; 24
     8e8:	94 e0       	ldi	r25, 0x04	; 4
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	f1 f7       	brne	.-4      	; 0x8ea <can_config+0x114>
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <can_config+0x11a>
     8f0:	00 00       	nop
}
return 0;
}
*/

 spi_chipselect(ENABLE);		//enable slave
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
 spi_tx_rx(WRITE_CMD);
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
 can_write_reg(CNF1,BRP_value);
     8fe:	63 e0       	ldi	r22, 0x03	; 3
     900:	8a e2       	ldi	r24, 0x2A	; 42
     902:	0e 94 5e 03 	call	0x6bc	; 0x6bc <can_write_reg>
 spi_chipselect(DISABLE);
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
     90c:	88 e1       	ldi	r24, 0x18	; 24
     90e:	94 e0       	ldi	r25, 0x04	; 4
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	f1 f7       	brne	.-4      	; 0x910 <can_config+0x13a>
     914:	00 c0       	rjmp	.+0      	; 0x916 <can_config+0x140>
     916:	00 00       	nop
 
 	_delay_us(1000); // TODO remove this test
 
 spi_chipselect(ENABLE);		//enable slave
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
 spi_tx_rx(WRITE_CMD);
     91e:	82 e0       	ldi	r24, 0x02	; 2
     920:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
 can_write_reg(CNF2,PH1_PRP_value);
     924:	61 ed       	ldi	r22, 0xD1	; 209
     926:	89 e2       	ldi	r24, 0x29	; 41
     928:	0e 94 5e 03 	call	0x6bc	; 0x6bc <can_write_reg>
 spi_chipselect(DISABLE);
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
     932:	88 e1       	ldi	r24, 0x18	; 24
     934:	94 e0       	ldi	r25, 0x04	; 4
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	f1 f7       	brne	.-4      	; 0x936 <can_config+0x160>
     93a:	00 c0       	rjmp	.+0      	; 0x93c <can_config+0x166>
     93c:	00 00       	nop
 
 	_delay_us(1000); // TODO remove this test
  
 spi_chipselect(ENABLE);		//enable slave
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
 spi_tx_rx(WRITE_CMD);
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
 can_write_reg(CNF3,PH2_value);
     94a:	61 e4       	ldi	r22, 0x41	; 65
     94c:	88 e2       	ldi	r24, 0x28	; 40
     94e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <can_write_reg>
 spi_chipselect(DISABLE);
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
     958:	88 e1       	ldi	r24, 0x18	; 24
     95a:	94 e0       	ldi	r25, 0x04	; 4
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	f1 f7       	brne	.-4      	; 0x95c <can_config+0x186>
     960:	00 c0       	rjmp	.+0      	; 0x962 <can_config+0x18c>
     962:	00 00       	nop

	//goto normal mode
			//Send address of CAN CONTROL registerxFF because 0xXFH is mentioned

			//mode, to shift bytes  to higher nibble enter normal mode
	spi_chipselect(ENABLE);		//enable slave
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>
	spi_tx_rx(WRITE_CMD);			
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	0e 94 a2 02 	call	0x544	; 0x544 <spi_tx_rx>
    can_write_reg(0xFF,(mode<<5));			//mode should be sent as 0,1 and 2 from main since it is left shifted here by 5
     970:	6c 2f       	mov	r22, r28
     972:	62 95       	swap	r22
     974:	66 0f       	add	r22, r22
     976:	60 7e       	andi	r22, 0xE0	; 224
     978:	8f ef       	ldi	r24, 0xFF	; 255
     97a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <can_write_reg>
	spi_chipselect(DISABLE);
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	0e 94 9c 02 	call	0x538	; 0x538 <spi_chipselect>

}
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <Graphic_demo_enable>:
/************************************************************************/
/*  Graphic Demo                                                        */
/************************************************************************/
int flag_enable_graphic_demo = 0;
void Graphic_demo_enable(void){
	flag_enable_graphic_demo = 1;
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	90 93 61 03 	sts	0x0361, r25
     990:	80 93 60 03 	sts	0x0360, r24
     994:	08 95       	ret

00000996 <Music_demo_enable>:
/************************************************************************/
/*  Music Demo                                                          */
/************************************************************************/
int flag_enable_music_demo = 0;
void Music_demo_enable(void){
	flag_enable_music_demo = 1;
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	90 93 5f 03 	sts	0x035F, r25
     99e:	80 93 5e 03 	sts	0x035E, r24
     9a2:	08 95       	ret

000009a4 <generic_SelectCallback>:
static void genric_draw_fun(uint8_t x, uint8_t y, const char *str){
	oled_goto_xy(x,y);
	oled_putstr_P(str);
}

void generic_SelectCallback(uint8_t x, uint8_t y, const char* str){
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	ea 01       	movw	r28, r20
	oled_goto_xy(x,y);
     9aa:	0e 94 c1 09 	call	0x1382	; 0x1382 <oled_goto_xy>
	oled_putstr_P_inverse(str);
     9ae:	ce 01       	movw	r24, r28
     9b0:	0e 94 a6 0a 	call	0x154c	; 0x154c <oled_putstr_P_inverse>
}
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	08 95       	ret

000009ba <enable_debug_mode_display>:
/************************************************************************/
/* enable_debug_mode_display                                            */
/************************************************************************/
int flag_enable_debug_mode_display = 0;
void enable_debug_mode_display(void){
	oled_goto_xy(6,0);
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	86 e0       	ldi	r24, 0x06	; 6
     9be:	0e 94 c1 09 	call	0x1382	; 0x1382 <oled_goto_xy>
	puts("Into Debug mode");
     9c2:	8e e5       	ldi	r24, 0x5E	; 94
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <puts>
	flag_enable_debug_mode_display = 1;
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	90 93 65 03 	sts	0x0365, r25
     9d2:	80 93 64 03 	sts	0x0364, r24
     9d6:	08 95       	ret

000009d8 <genric_draw_fun>:





static void genric_draw_fun(uint8_t x, uint8_t y, const char *str){
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	ea 01       	movw	r28, r20
	oled_goto_xy(x,y);
     9de:	0e 94 c1 09 	call	0x1382	; 0x1382 <oled_goto_xy>
	oled_putstr_P(str);
     9e2:	ce 01       	movw	r24, r28
     9e4:	0e 94 14 0a 	call	0x1428	; 0x1428 <oled_putstr_P>
}
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	08 95       	ret

000009ee <plunger>:
/************************************************************************/
/*			PLUNGER FUCNTION TO ACTIVATE SOLENOID                      */
/************************************************************************/
void plunger(void)
{
	cli();
     9ee:	f8 94       	cli
	PORTB &= ~(1<<PB0);			// clear PORTB_0 pin 1 when switch is pressed, will be used for plunger
     9f0:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	90 ef       	ldi	r25, 0xF0	; 240
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <plunger+0x8>
						
	_delay_ms(50);             //can be changed!!!
	PORTB |= (1<<PB0);			// Set PORTB_0
     9fa:	c0 9a       	sbi	0x18, 0	; 24
	sei();
     9fc:	78 94       	sei
     9fe:	08 95       	ret

00000a00 <main>:
int is_main_not_fetch_the_buffer=0;
char rx_buff[20];
int rx_count=0;

int main(void)
{	/* Set up the default menu text write callback, and navigate to an absolute menu item entry. */
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
     a08:	a0 97       	sbiw	r28, 0x20	; 32
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	cd bf       	out	0x3d, r28	; 61
		stdout = &oled_stdout;
     a14:	8e e0       	ldi	r24, 0x0E	; 14
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	90 93 88 03 	sts	0x0388, r25
     a1c:	80 93 87 03 	sts	0x0387, r24
		usart_init(MYUBRR);
     a20:	8f e1       	ldi	r24, 0x1F	; 31
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <usart_init>

		fprintf(&usart_stdout,"Usart says hello!\n");
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	31 e0       	ldi	r19, 0x01	; 1
     a2c:	42 e1       	ldi	r20, 0x12	; 18
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	61 e0       	ldi	r22, 0x01	; 1
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	82 e8       	ldi	r24, 0x82	; 130
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <fwrite>
		oled_init();
     a3c:	0e 94 8e 09 	call	0x131c	; 0x131c <oled_init>
		oled_clear();
     a40:	0e 94 25 0a 	call	0x144a	; 0x144a <oled_clear>
		oled_putstr_inverse("hello world!!\n");
     a44:	85 e9       	ldi	r24, 0x95	; 149
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	0e 94 97 0a 	call	0x152e	; 0x152e <oled_putstr_inverse>
		adc_init();
     a4c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <adc_init>
	
	
		//INTERRUPT CONFIGURATION and Plunger Configuration (INT2 is for CAN and INT 0 is for solenoid)

		DDRB= (1<<PB0);							//Make PB0 as output for plunger
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	87 bb       	out	0x17, r24	; 23
		PORTB = (1<<PB0);
     a54:	88 bb       	out	0x18, r24	; 24
		
		sei();									//Enable Global Interrupts
     a56:	78 94       	sei
		GICR |= (1<<INT0) | (1<<INT2);			//Enable INT_2, falling edge (ISC2 is zero)
     a58:	8b b7       	in	r24, 0x3b	; 59
     a5a:	80 66       	ori	r24, 0x60	; 96
     a5c:	8b bf       	out	0x3b, r24	; 59
		MCUCR |= (1<<ISC01);					//Falling edge interrupt for Plunger
     a5e:	85 b7       	in	r24, 0x35	; 53
     a60:	82 60       	ori	r24, 0x02	; 2
     a62:	85 bf       	out	0x35, r24	; 53
	//	uart_config();
	//	fdevopen(&uart_transmit, (void *) 0);		//UART write function
	//
		//SPI and CAN functions

		spi_config();
     a64:	0e 94 94 02 	call	0x528	; 0x528 <spi_config>

		can_reset();
     a68:	0e 94 a7 02 	call	0x54e	; 0x54e <can_reset>

		can_config(NORMAL);		//configure in loop back mode
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <can_config>
		//
	Menu_SetGenericWriteCallback(genric_draw_fun);
     a74:	8c ee       	ldi	r24, 0xEC	; 236
     a76:	94 e0       	ldi	r25, 0x04	; 4
     a78:	0e 94 83 09 	call	0x1306	; 0x1306 <Menu_SetGenericWriteCallback>
	Menu_SetGenericClear(oled_clear);
     a7c:	85 e2       	ldi	r24, 0x25	; 37
     a7e:	9a e0       	ldi	r25, 0x0A	; 10
     a80:	0e 94 c4 08 	call	0x1188	; 0x1188 <Menu_SetGenericClear>
	oled_clear();
     a84:	0e 94 25 0a 	call	0x144a	; 0x144a <oled_clear>
	Menu_Navigate(&Menu_1);
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	92 e0       	ldi	r25, 0x02	; 2
     a8c:	0e 94 43 09 	call	0x1286	; 0x1286 <Menu_Navigate>
	Menu_DrawBase();
     a90:	0e 94 db 08 	call	0x11b6	; 0x11b6 <Menu_DrawBase>
	Menu_Navigate(&Menu_1);
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	92 e0       	ldi	r25, 0x02	; 2
     a98:	0e 94 43 09 	call	0x1286	; 0x1286 <Menu_Navigate>
	
	
	// default pid 
	tx_data[3] = 8;//KP
     a9c:	88 e0       	ldi	r24, 0x08	; 8
     a9e:	8c 87       	std	Y+12, r24	; 0x0c
	tx_data[4] = 5;//KI
     aa0:	85 e0       	ldi	r24, 0x05	; 5
     aa2:	8d 87       	std	Y+13, r24	; 0x0d
	tx_data[5] = 5;//KD
     aa4:	8e 87       	std	Y+14, r24	; 0x0e
	/************************************************************************/
	/*      music  init                                                     */
	/************************************************************************/
	InitMusic();
     aa6:	0e 94 15 0c 	call	0x182a	; 0x182a <InitMusic>
     aaa:	5e 01       	movw	r10, r28
     aac:	23 e1       	ldi	r18, 0x13	; 19
     aae:	a2 0e       	add	r10, r18
     ab0:	b1 1c       	adc	r11, r1
     ab2:	8e 01       	movw	r16, r28
     ab4:	08 5f       	subi	r16, 0xF8	; 248
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	8a 2c       	mov	r8, r10
     aba:	9b 2c       	mov	r9, r11
				if (flag_enable_debug_mode_display)
				{
					int print_temp[7];
					oled_goto_xy(5,1);
					print_temp[0] = (0x80 & tx_data[1] )? (tx_data[1] + 0xff00):tx_data[1];
					printf("data Tran: %d, x:%3d, y:%3d, tranx: %d, %d, %d, %d, %d"\
     abc:	0f 2e       	mov	r0, r31
     abe:	f4 ea       	ldi	r31, 0xA4	; 164
     ac0:	cf 2e       	mov	r12, r31
     ac2:	f1 e0       	ldi	r31, 0x01	; 1
     ac4:	df 2e       	mov	r13, r31
     ac6:	f0 2d       	mov	r31, r0
						print_temp[i] = (0x80 & rx_data[i] )? (rx_data[i] + 0xff00):rx_data[i];
					}
					int16_t encoder_val = (uint8_t)rx_data[5]*0x100 + (uint8_t)rx_data[6];
					int16_t set_val =  (uint8_t)rx_data[3]*0x100 + (uint8_t)rx_data[4];
					//int a = (0x80 & rx_data[2] )? (rx_data[2] + 0xff00):rx_data[2];
					printf("Receive Data: %3i, %3i, SP: %5d, ENC: %5d\n",print_temp[0],print_temp[1],set_val,encoder_val);
     ac8:	0f 2e       	mov	r0, r31
     aca:	fb ed       	ldi	r31, 0xDB	; 219
     acc:	ef 2e       	mov	r14, r31
     ace:	f1 e0       	ldi	r31, 0x01	; 1
     ad0:	ff 2e       	mov	r15, r31
     ad2:	f0 2d       	mov	r31, r0

	
	while (1)
    {
		
			switch (button_val)
     ad4:	80 91 66 03 	lds	r24, 0x0366
     ad8:	83 30       	cpi	r24, 0x03	; 3
     ada:	09 f4       	brne	.+2      	; 0xade <main+0xde>
     adc:	3f c0       	rjmp	.+126    	; 0xb5c <main+0x15c>
     ade:	28 f4       	brcc	.+10     	; 0xaea <main+0xea>
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	51 f0       	breq	.+20     	; 0xaf8 <main+0xf8>
     ae4:	82 30       	cpi	r24, 0x02	; 2
     ae6:	09 f1       	breq	.+66     	; 0xb2a <main+0x12a>
     ae8:	7d c0       	rjmp	.+250    	; 0xbe4 <main+0x1e4>
     aea:	84 30       	cpi	r24, 0x04	; 4
     aec:	09 f4       	brne	.+2      	; 0xaf0 <main+0xf0>
     aee:	4f c0       	rjmp	.+158    	; 0xb8e <main+0x18e>
     af0:	85 30       	cpi	r24, 0x05	; 5
     af2:	09 f4       	brne	.+2      	; 0xaf6 <main+0xf6>
     af4:	65 c0       	rjmp	.+202    	; 0xbc0 <main+0x1c0>
     af6:	76 c0       	rjmp	.+236    	; 0xbe4 <main+0x1e4>
}
/************************************************************************/
/*  display flags clr routine                                */
/************************************************************************/
inline static void Menu_Dsp_flag_clr(void){
	flag_enable_debug_mode_display = 0;
     af8:	10 92 65 03 	sts	0x0365, r1
     afc:	10 92 64 03 	sts	0x0364, r1
	flag_enable_online_tuning = 0;
     b00:	10 92 63 03 	sts	0x0363, r1
     b04:	10 92 62 03 	sts	0x0362, r1
	flag_enable_graphic_demo = 0;
     b08:	10 92 61 03 	sts	0x0361, r1
     b0c:	10 92 60 03 	sts	0x0360, r1
	flag_enable_music_demo = 0;
     b10:	10 92 5f 03 	sts	0x035F, r1
     b14:	10 92 5e 03 	sts	0x035E, r1
		
			switch (button_val)
			{
				case BUTTON_UP:
					Menu_Dsp_flag_clr();
					Menu_Navigate(MENU_PREVIOUS);
     b18:	0e 94 bf 08 	call	0x117e	; 0x117e <Menu_GetCurrentMenu>
     b1c:	04 96       	adiw	r24, 0x04	; 4
     b1e:	fc 01       	movw	r30, r24
     b20:	85 91       	lpm	r24, Z+
     b22:	94 91       	lpm	r25, Z
     b24:	0e 94 43 09 	call	0x1286	; 0x1286 <Menu_Navigate>
					break;
     b28:	5d c0       	rjmp	.+186    	; 0xbe4 <main+0x1e4>
}
/************************************************************************/
/*  display flags clr routine                                */
/************************************************************************/
inline static void Menu_Dsp_flag_clr(void){
	flag_enable_debug_mode_display = 0;
     b2a:	10 92 65 03 	sts	0x0365, r1
     b2e:	10 92 64 03 	sts	0x0364, r1
	flag_enable_online_tuning = 0;
     b32:	10 92 63 03 	sts	0x0363, r1
     b36:	10 92 62 03 	sts	0x0362, r1
	flag_enable_graphic_demo = 0;
     b3a:	10 92 61 03 	sts	0x0361, r1
     b3e:	10 92 60 03 	sts	0x0360, r1
	flag_enable_music_demo = 0;
     b42:	10 92 5f 03 	sts	0x035F, r1
     b46:	10 92 5e 03 	sts	0x035E, r1
					Menu_Dsp_flag_clr();
					Menu_Navigate(MENU_PREVIOUS);
					break;
				case BUTTON_DOWN:
					Menu_Dsp_flag_clr();
					Menu_Navigate(MENU_NEXT);
     b4a:	0e 94 bf 08 	call	0x117e	; 0x117e <Menu_GetCurrentMenu>
     b4e:	02 96       	adiw	r24, 0x02	; 2
     b50:	fc 01       	movw	r30, r24
     b52:	85 91       	lpm	r24, Z+
     b54:	94 91       	lpm	r25, Z
     b56:	0e 94 43 09 	call	0x1286	; 0x1286 <Menu_Navigate>
					break;
     b5a:	44 c0       	rjmp	.+136    	; 0xbe4 <main+0x1e4>
}
/************************************************************************/
/*  display flags clr routine                                */
/************************************************************************/
inline static void Menu_Dsp_flag_clr(void){
	flag_enable_debug_mode_display = 0;
     b5c:	10 92 65 03 	sts	0x0365, r1
     b60:	10 92 64 03 	sts	0x0364, r1
	flag_enable_online_tuning = 0;
     b64:	10 92 63 03 	sts	0x0363, r1
     b68:	10 92 62 03 	sts	0x0362, r1
	flag_enable_graphic_demo = 0;
     b6c:	10 92 61 03 	sts	0x0361, r1
     b70:	10 92 60 03 	sts	0x0360, r1
	flag_enable_music_demo = 0;
     b74:	10 92 5f 03 	sts	0x035F, r1
     b78:	10 92 5e 03 	sts	0x035E, r1
					Menu_Dsp_flag_clr();
					Menu_Navigate(MENU_NEXT);
					break;
				case BUTTON_LEFT:
					Menu_Dsp_flag_clr();
					Menu_Navigate(MENU_PARENT);
     b7c:	0e 94 bf 08 	call	0x117e	; 0x117e <Menu_GetCurrentMenu>
     b80:	06 96       	adiw	r24, 0x06	; 6
     b82:	fc 01       	movw	r30, r24
     b84:	85 91       	lpm	r24, Z+
     b86:	94 91       	lpm	r25, Z
     b88:	0e 94 43 09 	call	0x1286	; 0x1286 <Menu_Navigate>
					break;
     b8c:	2b c0       	rjmp	.+86     	; 0xbe4 <main+0x1e4>
}
/************************************************************************/
/*  display flags clr routine                                */
/************************************************************************/
inline static void Menu_Dsp_flag_clr(void){
	flag_enable_debug_mode_display = 0;
     b8e:	10 92 65 03 	sts	0x0365, r1
     b92:	10 92 64 03 	sts	0x0364, r1
	flag_enable_online_tuning = 0;
     b96:	10 92 63 03 	sts	0x0363, r1
     b9a:	10 92 62 03 	sts	0x0362, r1
	flag_enable_graphic_demo = 0;
     b9e:	10 92 61 03 	sts	0x0361, r1
     ba2:	10 92 60 03 	sts	0x0360, r1
	flag_enable_music_demo = 0;
     ba6:	10 92 5f 03 	sts	0x035F, r1
     baa:	10 92 5e 03 	sts	0x035E, r1
					Menu_Dsp_flag_clr();
					Menu_Navigate(MENU_PARENT);
					break;
				case BUTTON_RIGHT:
					Menu_Dsp_flag_clr();
					Menu_Navigate(MENU_CHILD);
     bae:	0e 94 bf 08 	call	0x117e	; 0x117e <Menu_GetCurrentMenu>
     bb2:	08 96       	adiw	r24, 0x08	; 8
     bb4:	fc 01       	movw	r30, r24
     bb6:	85 91       	lpm	r24, Z+
     bb8:	94 91       	lpm	r25, Z
     bba:	0e 94 43 09 	call	0x1286	; 0x1286 <Menu_Navigate>
					break;
     bbe:	12 c0       	rjmp	.+36     	; 0xbe4 <main+0x1e4>
}
/************************************************************************/
/*  display flags clr routine                                */
/************************************************************************/
inline static void Menu_Dsp_flag_clr(void){
	flag_enable_debug_mode_display = 0;
     bc0:	10 92 65 03 	sts	0x0365, r1
     bc4:	10 92 64 03 	sts	0x0364, r1
	flag_enable_online_tuning = 0;
     bc8:	10 92 63 03 	sts	0x0363, r1
     bcc:	10 92 62 03 	sts	0x0362, r1
	flag_enable_graphic_demo = 0;
     bd0:	10 92 61 03 	sts	0x0361, r1
     bd4:	10 92 60 03 	sts	0x0360, r1
	flag_enable_music_demo = 0;
     bd8:	10 92 5f 03 	sts	0x035F, r1
     bdc:	10 92 5e 03 	sts	0x035E, r1
					Menu_Dsp_flag_clr();
					Menu_Navigate(MENU_CHILD);
					break;
				case BUTTON_ENTER:
					Menu_Dsp_flag_clr();
					Menu_EnterCurrentItem();
     be0:	0e 94 c9 08 	call	0x1192	; 0x1192 <Menu_EnterCurrentItem>
					break;
				default:
					break;
			}
			button_val = BUTTON_NONE;
     be4:	10 92 66 03 	sts	0x0366, r1
		
			//while (1)
			{
			adc_pos_t pos = adc_get_position();
     be8:	0e 94 85 02 	call	0x50a	; 0x50a <adc_get_position>
     bec:	76 2e       	mov	r7, r22
     bee:	67 2e       	mov	r6, r23
     bf0:	58 2e       	mov	r5, r24
     bf2:	8f ef       	ldi	r24, 0xFF	; 255
     bf4:	9f ed       	ldi	r25, 0xDF	; 223
     bf6:	21 e0       	ldi	r18, 0x01	; 1
     bf8:	81 50       	subi	r24, 0x01	; 1
     bfa:	90 40       	sbci	r25, 0x00	; 0
     bfc:	20 40       	sbci	r18, 0x00	; 0
     bfe:	e1 f7       	brne	.-8      	; 0xbf8 <main+0x1f8>
     c00:	00 c0       	rjmp	.+0      	; 0xc02 <main+0x202>
     c02:	00 00       	nop
			_delay_ms(125);
			/************************************************************************ /
			/ *       arrange  the frame to send to can                              * /
			/ ************************************************************************/
			tx_data[0] = pos.x*0xff00;
     c04:	19 86       	std	Y+9, r1	; 0x09
			tx_data[1] = pos.x;//(int8_t)((pos.x & 0x8000)? (((pos.x)|0x7f)+ 0x80):(pos.x));
     c06:	7a 86       	std	Y+10, r7	; 0x0a
			tx_data[2] = 255-pos.y;
     c08:	86 2d       	mov	r24, r6
     c0a:	80 95       	com	r24
     c0c:	8b 87       	std	Y+11, r24	; 0x0b
			tx_data[6] = 0;
			tx_data[7] = 0;*/
			
			//int x = (0x80 & pos.x )? (pos.x + 0xff00):pos.x;
			//int y = (0x80 & pos.y )? (pos.y + 0xff00):pos.y;
			can_transmit(0,0x05,8,tx_data);			//BUFFER 0, ID 0x05, 8 data bytes and data=stored string
     c0e:	9e 01       	movw	r18, r28
     c10:	27 5f       	subi	r18, 0xF7	; 247
     c12:	3f 4f       	sbci	r19, 0xFF	; 255
     c14:	48 e0       	ldi	r20, 0x08	; 8
     c16:	65 e0       	ldi	r22, 0x05	; 5
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	0e 94 c4 02 	call	0x588	; 0x588 <can_transmit>
			
			//CAN RECEIVE FLAG PART
			if(can_rx_flag)
     c1e:	80 91 5c 03 	lds	r24, 0x035C
     c22:	90 91 5d 03 	lds	r25, 0x035D
     c26:	89 2b       	or	r24, r25
     c28:	69 f0       	breq	.+26     	; 0xc44 <main+0x244>
					encoder upper byte from node 2
					encoder lower byte from node 2
																						* /
				/ ************************************************************************/

				can_rx_flag=0;
     c2a:	10 92 5d 03 	sts	0x035D, r1
     c2e:	10 92 5c 03 	sts	0x035C, r1
				can_receive(rx_id,rx_length,rx_data);
     c32:	ae 01       	movw	r20, r28
     c34:	4f 5f       	subi	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	ce 01       	movw	r24, r28
     c3e:	41 96       	adiw	r24, 0x11	; 17
     c40:	0e 94 67 03 	call	0x6ce	; 0x6ce <can_receive>

			}
			
			// enable debug mode displaying
				if (flag_enable_debug_mode_display)
     c44:	20 91 64 03 	lds	r18, 0x0364
     c48:	30 91 65 03 	lds	r19, 0x0365
     c4c:	23 2b       	or	r18, r19
     c4e:	09 f4       	brne	.+2      	; 0xc52 <main+0x252>
     c50:	63 c0       	rjmp	.+198    	; 0xd18 <main+0x318>
				{
					int print_temp[7];
					oled_goto_xy(5,1);
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	85 e0       	ldi	r24, 0x05	; 5
     c56:	0e 94 c1 09 	call	0x1382	; 0x1382 <oled_goto_xy>
					print_temp[0] = (0x80 & tx_data[1] )? (tx_data[1] + 0xff00):tx_data[1];
     c5a:	8a 85       	ldd	r24, Y+10	; 0x0a
     c5c:	88 23       	and	r24, r24
     c5e:	1c f4       	brge	.+6      	; 0xc66 <main+0x266>
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	9a 95       	dec	r25
     c64:	01 c0       	rjmp	.+2      	; 0xc68 <main+0x268>
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	9c 8b       	std	Y+20, r25	; 0x14
     c6a:	8b 8b       	std	Y+19, r24	; 0x13
					printf("data Tran: %d, x:%3d, y:%3d, tranx: %d, %d, %d, %d, %d"\
     c6c:	88 89       	ldd	r24, Y+16	; 0x10
     c6e:	1f 92       	push	r1
     c70:	8f 93       	push	r24
     c72:	8f 85       	ldd	r24, Y+15	; 0x0f
     c74:	1f 92       	push	r1
     c76:	8f 93       	push	r24
     c78:	8e 85       	ldd	r24, Y+14	; 0x0e
     c7a:	1f 92       	push	r1
     c7c:	8f 93       	push	r24
     c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c80:	1f 92       	push	r1
     c82:	8f 93       	push	r24
     c84:	8c 85       	ldd	r24, Y+12	; 0x0c
     c86:	1f 92       	push	r1
     c88:	8f 93       	push	r24
     c8a:	5f 92       	push	r5
     c8c:	6f 92       	push	r6
     c8e:	1f 92       	push	r1
     c90:	7f 92       	push	r7
     c92:	89 85       	ldd	r24, Y+9	; 0x09
     c94:	1f 92       	push	r1
     c96:	8f 93       	push	r24
     c98:	df 92       	push	r13
     c9a:	cf 92       	push	r12
     c9c:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <printf>
					, tx_data[0],pos.x,pos.y,tx_data[3],tx_data[4],tx_data[5],tx_data[6],tx_data[7]);		//0 is pattern, 1 is x and 2 is y
					oled_goto_xy(5,4);
     ca0:	64 e0       	ldi	r22, 0x04	; 4
     ca2:	85 e0       	ldi	r24, 0x05	; 5
     ca4:	0e 94 c1 09 	call	0x1382	; 0x1382 <oled_goto_xy>
     ca8:	fe 01       	movw	r30, r28
     caa:	31 96       	adiw	r30, 0x01	; 1
     cac:	a8 2d       	mov	r26, r8
     cae:	b9 2d       	mov	r27, r9
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
					
					int i;
					for (i = 0; i< 7; i++)
					{
						print_temp[i] = (0x80 & rx_data[i] )? (rx_data[i] + 0xff00):rx_data[i];
     cba:	81 91       	ld	r24, Z+
     cbc:	88 23       	and	r24, r24
     cbe:	1c f4       	brge	.+6      	; 0xcc6 <main+0x2c6>
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	9a 95       	dec	r25
     cc4:	01 c0       	rjmp	.+2      	; 0xcc8 <main+0x2c8>
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	8d 93       	st	X+, r24
     cca:	9d 93       	st	X+, r25
					printf("data Tran: %d, x:%3d, y:%3d, tranx: %d, %d, %d, %d, %d"\
					, tx_data[0],pos.x,pos.y,tx_data[3],tx_data[4],tx_data[5],tx_data[6],tx_data[7]);		//0 is pattern, 1 is x and 2 is y
					oled_goto_xy(5,4);
					
					int i;
					for (i = 0; i< 7; i++)
     ccc:	e0 17       	cp	r30, r16
     cce:	f1 07       	cpc	r31, r17
     cd0:	a1 f7       	brne	.-24     	; 0xcba <main+0x2ba>
					{
						print_temp[i] = (0x80 & rx_data[i] )? (rx_data[i] + 0xff00):rx_data[i];
					}
					int16_t encoder_val = (uint8_t)rx_data[5]*0x100 + (uint8_t)rx_data[6];
     cd2:	8e 81       	ldd	r24, Y+6	; 0x06
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	98 2f       	mov	r25, r24
     cd8:	88 27       	eor	r24, r24
     cda:	2f 81       	ldd	r18, Y+7	; 0x07
     cdc:	82 0f       	add	r24, r18
     cde:	91 1d       	adc	r25, r1
					int16_t set_val =  (uint8_t)rx_data[3]*0x100 + (uint8_t)rx_data[4];
					//int a = (0x80 & rx_data[2] )? (rx_data[2] + 0xff00):rx_data[2];
					printf("Receive Data: %3i, %3i, SP: %5d, ENC: %5d\n",print_temp[0],print_temp[1],set_val,encoder_val);
     ce0:	9f 93       	push	r25
     ce2:	8f 93       	push	r24
					for (i = 0; i< 7; i++)
					{
						print_temp[i] = (0x80 & rx_data[i] )? (rx_data[i] + 0xff00):rx_data[i];
					}
					int16_t encoder_val = (uint8_t)rx_data[5]*0x100 + (uint8_t)rx_data[6];
					int16_t set_val =  (uint8_t)rx_data[3]*0x100 + (uint8_t)rx_data[4];
     ce4:	8c 81       	ldd	r24, Y+4	; 0x04
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	98 2f       	mov	r25, r24
     cea:	88 27       	eor	r24, r24
     cec:	2d 81       	ldd	r18, Y+5	; 0x05
     cee:	82 0f       	add	r24, r18
     cf0:	91 1d       	adc	r25, r1
					//int a = (0x80 & rx_data[2] )? (rx_data[2] + 0xff00):rx_data[2];
					printf("Receive Data: %3i, %3i, SP: %5d, ENC: %5d\n",print_temp[0],print_temp[1],set_val,encoder_val);
     cf2:	9f 93       	push	r25
     cf4:	8f 93       	push	r24
     cf6:	8e 89       	ldd	r24, Y+22	; 0x16
     cf8:	8f 93       	push	r24
     cfa:	8d 89       	ldd	r24, Y+21	; 0x15
     cfc:	8f 93       	push	r24
     cfe:	8c 89       	ldd	r24, Y+20	; 0x14
     d00:	8f 93       	push	r24
     d02:	8b 89       	ldd	r24, Y+19	; 0x13
     d04:	8f 93       	push	r24
     d06:	ff 92       	push	r15
     d08:	ef 92       	push	r14
     d0a:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <printf>
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61



				//PLUNGER FLAG PART

				if(flag_plunger)
     d18:	80 91 5a 03 	lds	r24, 0x035A
     d1c:	90 91 5b 03 	lds	r25, 0x035B
     d20:	89 2b       	or	r24, r25
     d22:	31 f0       	breq	.+12     	; 0xd30 <main+0x330>
				{
					flag_plunger=0;     //clear flag
     d24:	10 92 5b 03 	sts	0x035B, r1
     d28:	10 92 5a 03 	sts	0x035A, r1
					plunger();             //call plunger functions
     d2c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <plunger>
				}
			
				// Terminal command parsing
				if(is_main_not_fetch_the_buffer){
     d30:	80 91 58 03 	lds	r24, 0x0358
     d34:	90 91 59 03 	lds	r25, 0x0359
     d38:	89 2b       	or	r24, r25
     d3a:	09 f4       	brne	.+2      	; 0xd3e <main+0x33e>
     d3c:	cb ce       	rjmp	.-618    	; 0xad4 <main+0xd4>
					
					oled_goto_xy(0,0);
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	0e 94 c1 09 	call	0x1382	; 0x1382 <oled_goto_xy>
					printf("%s",rx_buff);
     d46:	81 e7       	ldi	r24, 0x71	; 113
     d48:	93 e0       	ldi	r25, 0x03	; 3
     d4a:	9f 93       	push	r25
     d4c:	8f 93       	push	r24
     d4e:	86 e0       	ldi	r24, 0x06	; 6
     d50:	92 e0       	ldi	r25, 0x02	; 2
     d52:	9f 93       	push	r25
     d54:	8f 93       	push	r24
     d56:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <printf>
					is_main_not_fetch_the_buffer = 0;
     d5a:	10 92 59 03 	sts	0x0359, r1
     d5e:	10 92 58 03 	sts	0x0358, r1
					// menu navigation cmd
					if (!strcmp("e\n",rx_buff))
     d62:	61 e7       	ldi	r22, 0x71	; 113
     d64:	73 e0       	ldi	r23, 0x03	; 3
     d66:	89 e0       	ldi	r24, 0x09	; 9
     d68:	92 e0       	ldi	r25, 0x02	; 2
     d6a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <strcmp>
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	89 2b       	or	r24, r25
     d78:	21 f4       	brne	.+8      	; 0xd82 <main+0x382>
					{
						button_val = BUTTON_UP;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	80 93 66 03 	sts	0x0366, r24
     d80:	97 c0       	rjmp	.+302    	; 0xeb0 <main+0x4b0>
					} else if (!strcmp("d\n",rx_buff))
     d82:	61 e7       	ldi	r22, 0x71	; 113
     d84:	73 e0       	ldi	r23, 0x03	; 3
     d86:	82 ea       	ldi	r24, 0xA2	; 162
     d88:	92 e0       	ldi	r25, 0x02	; 2
     d8a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <strcmp>
     d8e:	89 2b       	or	r24, r25
     d90:	21 f4       	brne	.+8      	; 0xd9a <main+0x39a>
					{
						button_val = BUTTON_DOWN;
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	80 93 66 03 	sts	0x0366, r24
     d98:	8b c0       	rjmp	.+278    	; 0xeb0 <main+0x4b0>
					} else if (!strcmp("s\n",rx_buff))
     d9a:	61 e7       	ldi	r22, 0x71	; 113
     d9c:	73 e0       	ldi	r23, 0x03	; 3
     d9e:	8c e0       	ldi	r24, 0x0C	; 12
     da0:	92 e0       	ldi	r25, 0x02	; 2
     da2:	0e 94 c4 0c 	call	0x1988	; 0x1988 <strcmp>
     da6:	89 2b       	or	r24, r25
     da8:	21 f4       	brne	.+8      	; 0xdb2 <main+0x3b2>
					{
						button_val = BUTTON_LEFT;
     daa:	83 e0       	ldi	r24, 0x03	; 3
     dac:	80 93 66 03 	sts	0x0366, r24
     db0:	7f c0       	rjmp	.+254    	; 0xeb0 <main+0x4b0>
					} else if (!strcmp("f\n",rx_buff))
     db2:	61 e7       	ldi	r22, 0x71	; 113
     db4:	73 e0       	ldi	r23, 0x03	; 3
     db6:	8f e0       	ldi	r24, 0x0F	; 15
     db8:	92 e0       	ldi	r25, 0x02	; 2
     dba:	0e 94 c4 0c 	call	0x1988	; 0x1988 <strcmp>
     dbe:	89 2b       	or	r24, r25
     dc0:	21 f4       	brne	.+8      	; 0xdca <main+0x3ca>
					{
						button_val = BUTTON_RIGHT;
     dc2:	84 e0       	ldi	r24, 0x04	; 4
     dc4:	80 93 66 03 	sts	0x0366, r24
     dc8:	73 c0       	rjmp	.+230    	; 0xeb0 <main+0x4b0>
					}  else if (!strcmp("q\n",rx_buff))
     dca:	61 e7       	ldi	r22, 0x71	; 113
     dcc:	73 e0       	ldi	r23, 0x03	; 3
     dce:	82 e1       	ldi	r24, 0x12	; 18
     dd0:	92 e0       	ldi	r25, 0x02	; 2
     dd2:	0e 94 c4 0c 	call	0x1988	; 0x1988 <strcmp>
     dd6:	89 2b       	or	r24, r25
     dd8:	21 f4       	brne	.+8      	; 0xde2 <main+0x3e2>
					{
						button_val = BUTTON_ENTER;
     dda:	85 e0       	ldi	r24, 0x05	; 5
     ddc:	80 93 66 03 	sts	0x0366, r24
     de0:	67 c0       	rjmp	.+206    	; 0xeb0 <main+0x4b0>
					}	else 
					// Online Tuning Mode
					if (!strcmp("config\n",rx_buff))
     de2:	61 e7       	ldi	r22, 0x71	; 113
     de4:	73 e0       	ldi	r23, 0x03	; 3
     de6:	85 e1       	ldi	r24, 0x15	; 21
     de8:	92 e0       	ldi	r25, 0x02	; 2
     dea:	0e 94 c4 0c 	call	0x1988	; 0x1988 <strcmp>
     dee:	89 2b       	or	r24, r25
     df0:	d9 f5       	brne	.+118    	; 0xe68 <main+0x468>
}
/************************************************************************/
/*  display flags clr routine                                */
/************************************************************************/
inline static void Menu_Dsp_flag_clr(void){
	flag_enable_debug_mode_display = 0;
     df2:	10 92 65 03 	sts	0x0365, r1
     df6:	10 92 64 03 	sts	0x0364, r1
	flag_enable_online_tuning = 0;
     dfa:	10 92 63 03 	sts	0x0363, r1
     dfe:	10 92 62 03 	sts	0x0362, r1
	flag_enable_graphic_demo = 0;
     e02:	10 92 61 03 	sts	0x0361, r1
     e06:	10 92 60 03 	sts	0x0360, r1
	flag_enable_music_demo = 0;
     e0a:	10 92 5f 03 	sts	0x035F, r1
     e0e:	10 92 5e 03 	sts	0x035E, r1
					}	else 
					// Online Tuning Mode
					if (!strcmp("config\n",rx_buff))
					{	
						Menu_Dsp_flag_clr();
						Menu_Navigate(&Menu_2_1);
     e12:	81 e1       	ldi	r24, 0x11	; 17
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	0e 94 43 09 	call	0x1286	; 0x1286 <Menu_Navigate>
						oled_goto_xy(6,0);
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	86 e0       	ldi	r24, 0x06	; 6
     e1e:	0e 94 c1 09 	call	0x1382	; 0x1382 <oled_goto_xy>
						puts("Into PID config mode");
     e22:	8d e1       	ldi	r24, 0x1D	; 29
     e24:	92 e0       	ldi	r25, 0x02	; 2
     e26:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <puts>
						oled_goto_xy(2,5);
     e2a:	65 e0       	ldi	r22, 0x05	; 5
     e2c:	82 e0       	ldi	r24, 0x02	; 2
     e2e:	0e 94 c1 09 	call	0x1382	; 0x1382 <oled_goto_xy>
						printf("Current Kp%2d, Ki%2d, Kd%2d",tx_data[3],tx_data[4],tx_data[5]);
     e32:	8e 85       	ldd	r24, Y+14	; 0x0e
     e34:	1f 92       	push	r1
     e36:	8f 93       	push	r24
     e38:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3a:	1f 92       	push	r1
     e3c:	8f 93       	push	r24
     e3e:	8c 85       	ldd	r24, Y+12	; 0x0c
     e40:	1f 92       	push	r1
     e42:	8f 93       	push	r24
     e44:	82 e3       	ldi	r24, 0x32	; 50
     e46:	92 e0       	ldi	r25, 0x02	; 2
     e48:	9f 93       	push	r25
     e4a:	8f 93       	push	r24
     e4c:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <printf>
						flag_enable_online_tuning = 1;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	90 93 63 03 	sts	0x0363, r25
     e58:	80 93 62 03 	sts	0x0362, r24
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	24 c0       	rjmp	.+72     	; 0xeb0 <main+0x4b0>
					}else 
					// Play Mode
					if (!strcmp("play\n",rx_buff))
     e68:	61 e7       	ldi	r22, 0x71	; 113
     e6a:	73 e0       	ldi	r23, 0x03	; 3
     e6c:	8e e4       	ldi	r24, 0x4E	; 78
     e6e:	92 e0       	ldi	r25, 0x02	; 2
     e70:	0e 94 c4 0c 	call	0x1988	; 0x1988 <strcmp>
     e74:	89 2b       	or	r24, r25
     e76:	e1 f4       	brne	.+56     	; 0xeb0 <main+0x4b0>
}
/************************************************************************/
/*  display flags clr routine                                */
/************************************************************************/
inline static void Menu_Dsp_flag_clr(void){
	flag_enable_debug_mode_display = 0;
     e78:	10 92 65 03 	sts	0x0365, r1
     e7c:	10 92 64 03 	sts	0x0364, r1
	flag_enable_online_tuning = 0;
     e80:	10 92 63 03 	sts	0x0363, r1
     e84:	10 92 62 03 	sts	0x0362, r1
	flag_enable_graphic_demo = 0;
     e88:	10 92 61 03 	sts	0x0361, r1
     e8c:	10 92 60 03 	sts	0x0360, r1
	flag_enable_music_demo = 0;
     e90:	10 92 5f 03 	sts	0x035F, r1
     e94:	10 92 5e 03 	sts	0x035E, r1
					}else 
					// Play Mode
					if (!strcmp("play\n",rx_buff))
					{	
						Menu_Dsp_flag_clr();
						Menu_Navigate(&Menu_1_1);
     e98:	84 e6       	ldi	r24, 0x64	; 100
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	0e 94 43 09 	call	0x1286	; 0x1286 <Menu_Navigate>
						oled_goto_xy(6,0);
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	86 e0       	ldi	r24, 0x06	; 6
     ea4:	0e 94 c1 09 	call	0x1382	; 0x1382 <oled_goto_xy>
						puts("Into Play mode");
     ea8:	84 e5       	ldi	r24, 0x54	; 84
     eaa:	92 e0       	ldi	r25, 0x02	; 2
     eac:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <puts>
					}
					if (!strcmp("debug\n",rx_buff))
     eb0:	61 e7       	ldi	r22, 0x71	; 113
     eb2:	73 e0       	ldi	r23, 0x03	; 3
     eb4:	83 e6       	ldi	r24, 0x63	; 99
     eb6:	92 e0       	ldi	r25, 0x02	; 2
     eb8:	0e 94 c4 0c 	call	0x1988	; 0x1988 <strcmp>
     ebc:	89 2b       	or	r24, r25
     ebe:	b1 f4       	brne	.+44     	; 0xeec <main+0x4ec>
}
/************************************************************************/
/*  display flags clr routine                                */
/************************************************************************/
inline static void Menu_Dsp_flag_clr(void){
	flag_enable_debug_mode_display = 0;
     ec0:	10 92 65 03 	sts	0x0365, r1
     ec4:	10 92 64 03 	sts	0x0364, r1
	flag_enable_online_tuning = 0;
     ec8:	10 92 63 03 	sts	0x0363, r1
     ecc:	10 92 62 03 	sts	0x0362, r1
	flag_enable_graphic_demo = 0;
     ed0:	10 92 61 03 	sts	0x0361, r1
     ed4:	10 92 60 03 	sts	0x0360, r1
	flag_enable_music_demo = 0;
     ed8:	10 92 5f 03 	sts	0x035F, r1
     edc:	10 92 5e 03 	sts	0x035E, r1
						puts("Into Play mode");
					}
					if (!strcmp("debug\n",rx_buff))
					{
						Menu_Dsp_flag_clr();
						Menu_Navigate(&Menu_3_1);
     ee0:	8c eb       	ldi	r24, 0xBC	; 188
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 43 09 	call	0x1286	; 0x1286 <Menu_Navigate>
						/*oled_goto_xy(6,0);
						puts("Into Debug mode");*/
						Menu_EnterCurrentItem();
     ee8:	0e 94 c9 08 	call	0x1192	; 0x1192 <Menu_EnterCurrentItem>
					}
					
					/************************************************************************/
					/*    online changing pid gains enabled                                 */
					/************************************************************************/
					if (flag_enable_online_tuning)
     eec:	80 91 62 03 	lds	r24, 0x0362
     ef0:	90 91 63 03 	lds	r25, 0x0363
     ef4:	89 2b       	or	r24, r25
     ef6:	09 f4       	brne	.+2      	; 0xefa <main+0x4fa>
     ef8:	8d c0       	rjmp	.+282    	; 0x1014 <main+0x614>
					{	
						int getval;
						if (!strncmp("kp ",rx_buff,3)){
     efa:	43 e0       	ldi	r20, 0x03	; 3
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	61 e7       	ldi	r22, 0x71	; 113
     f00:	73 e0       	ldi	r23, 0x03	; 3
     f02:	8a e6       	ldi	r24, 0x6A	; 106
     f04:	92 e0       	ldi	r25, 0x02	; 2
     f06:	0e 94 cd 0c 	call	0x199a	; 0x199a <strncmp>
     f0a:	89 2b       	or	r24, r25
     f0c:	f1 f4       	brne	.+60     	; 0xf4a <main+0x54a>
							sscanf(rx_buff,"kp %d\n", &getval);
     f0e:	bf 92       	push	r11
     f10:	af 92       	push	r10
     f12:	8e e6       	ldi	r24, 0x6E	; 110
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	9f 93       	push	r25
     f18:	8f 93       	push	r24
     f1a:	81 e7       	ldi	r24, 0x71	; 113
     f1c:	93 e0       	ldi	r25, 0x03	; 3
     f1e:	9f 93       	push	r25
     f20:	8f 93       	push	r24
     f22:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <sscanf>
							tx_data[3] = (char) getval; 
     f26:	8b 89       	ldd	r24, Y+19	; 0x13
     f28:	9c 89       	ldd	r25, Y+20	; 0x14
     f2a:	8c 87       	std	Y+12, r24	; 0x0c
							printf("new kp: %2d\n",tx_data[3]);
     f2c:	99 27       	eor	r25, r25
     f2e:	9f 93       	push	r25
     f30:	8f 93       	push	r24
     f32:	85 e7       	ldi	r24, 0x75	; 117
     f34:	92 e0       	ldi	r25, 0x02	; 2
     f36:	9f 93       	push	r25
     f38:	8f 93       	push	r24
     f3a:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <printf>
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	4d c0       	rjmp	.+154    	; 0xfe4 <main+0x5e4>
						} else if (!strncmp("ki ",rx_buff,3))
     f4a:	43 e0       	ldi	r20, 0x03	; 3
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	61 e7       	ldi	r22, 0x71	; 113
     f50:	73 e0       	ldi	r23, 0x03	; 3
     f52:	82 e8       	ldi	r24, 0x82	; 130
     f54:	92 e0       	ldi	r25, 0x02	; 2
     f56:	0e 94 cd 0c 	call	0x199a	; 0x199a <strncmp>
     f5a:	89 2b       	or	r24, r25
     f5c:	e9 f4       	brne	.+58     	; 0xf98 <main+0x598>
						{
							sscanf(rx_buff,"ki %d\n", &getval);
     f5e:	bf 92       	push	r11
     f60:	af 92       	push	r10
     f62:	86 e8       	ldi	r24, 0x86	; 134
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	9f 93       	push	r25
     f68:	8f 93       	push	r24
     f6a:	81 e7       	ldi	r24, 0x71	; 113
     f6c:	93 e0       	ldi	r25, 0x03	; 3
     f6e:	9f 93       	push	r25
     f70:	8f 93       	push	r24
     f72:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <sscanf>
							tx_data[4] = (char) getval;
     f76:	8b 89       	ldd	r24, Y+19	; 0x13
     f78:	8d 87       	std	Y+13, r24	; 0x0d
							printf("new ki: %2d\n",tx_data[3]);
     f7a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f7c:	1f 92       	push	r1
     f7e:	8f 93       	push	r24
     f80:	8d e8       	ldi	r24, 0x8D	; 141
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	9f 93       	push	r25
     f86:	8f 93       	push	r24
     f88:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <printf>
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	26 c0       	rjmp	.+76     	; 0xfe4 <main+0x5e4>
						} else if (!strncmp("kd ",rx_buff,3))
     f98:	43 e0       	ldi	r20, 0x03	; 3
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	61 e7       	ldi	r22, 0x71	; 113
     f9e:	73 e0       	ldi	r23, 0x03	; 3
     fa0:	8a e9       	ldi	r24, 0x9A	; 154
     fa2:	92 e0       	ldi	r25, 0x02	; 2
     fa4:	0e 94 cd 0c 	call	0x199a	; 0x199a <strncmp>
     fa8:	89 2b       	or	r24, r25
     faa:	e1 f4       	brne	.+56     	; 0xfe4 <main+0x5e4>
						{
							sscanf(rx_buff,"kd %d\n", &getval);
     fac:	bf 92       	push	r11
     fae:	af 92       	push	r10
     fb0:	8e e9       	ldi	r24, 0x9E	; 158
     fb2:	92 e0       	ldi	r25, 0x02	; 2
     fb4:	9f 93       	push	r25
     fb6:	8f 93       	push	r24
     fb8:	81 e7       	ldi	r24, 0x71	; 113
     fba:	93 e0       	ldi	r25, 0x03	; 3
     fbc:	9f 93       	push	r25
     fbe:	8f 93       	push	r24
     fc0:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <sscanf>
							tx_data[5] = (char) getval;
     fc4:	8b 89       	ldd	r24, Y+19	; 0x13
     fc6:	8e 87       	std	Y+14, r24	; 0x0e
							printf("new kd: %2d\n",tx_data[3]);
     fc8:	8c 85       	ldd	r24, Y+12	; 0x0c
     fca:	1f 92       	push	r1
     fcc:	8f 93       	push	r24
     fce:	85 ea       	ldi	r24, 0xA5	; 165
     fd0:	92 e0       	ldi	r25, 0x02	; 2
     fd2:	9f 93       	push	r25
     fd4:	8f 93       	push	r24
     fd6:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <printf>
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
						}
						oled_goto_xy(2,5);
     fe4:	65 e0       	ldi	r22, 0x05	; 5
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	0e 94 c1 09 	call	0x1382	; 0x1382 <oled_goto_xy>
						printf("Current Kp%2d, Ki%2d, Kd%2d",tx_data[3],tx_data[4],tx_data[5]);
     fec:	8e 85       	ldd	r24, Y+14	; 0x0e
     fee:	1f 92       	push	r1
     ff0:	8f 93       	push	r24
     ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff4:	1f 92       	push	r1
     ff6:	8f 93       	push	r24
     ff8:	8c 85       	ldd	r24, Y+12	; 0x0c
     ffa:	1f 92       	push	r1
     ffc:	8f 93       	push	r24
     ffe:	82 e3       	ldi	r24, 0x32	; 50
    1000:	92 e0       	ldi	r25, 0x02	; 2
    1002:	9f 93       	push	r25
    1004:	8f 93       	push	r24
    1006:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <printf>
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
						
					}
					// music
					if (flag_enable_music_demo)
    1014:	80 91 5e 03 	lds	r24, 0x035E
    1018:	90 91 5f 03 	lds	r25, 0x035F
    101c:	89 2b       	or	r24, r25
    101e:	41 f0       	breq	.+16     	; 0x1030 <main+0x630>
					{
						flag_enable_music_demo = 0;
    1020:	10 92 5f 03 	sts	0x035F, r1
    1024:	10 92 5e 03 	sts	0x035E, r1
						cli();
    1028:	f8 94       	cli
						MusicDemo();
    102a:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <MusicDemo>
						sei();
    102e:	78 94       	sei
					}
					// graphic
					if (flag_enable_graphic_demo)
    1030:	80 91 60 03 	lds	r24, 0x0360
    1034:	90 91 61 03 	lds	r25, 0x0361
    1038:	89 2b       	or	r24, r25
    103a:	09 f4       	brne	.+2      	; 0x103e <main+0x63e>
    103c:	4b cd       	rjmp	.-1386   	; 0xad4 <main+0xd4>
					{
						flag_enable_graphic_demo = 0;
    103e:	10 92 61 03 	sts	0x0361, r1
    1042:	10 92 60 03 	sts	0x0360, r1
						cli();
    1046:	f8 94       	cli
						oled_clear_buffer();
    1048:	0e 94 4e 0b 	call	0x169c	; 0x169c <oled_clear_buffer>
						oled_goto_xy_buffer(23,4);
    104c:	64 e0       	ldi	r22, 0x04	; 4
    104e:	87 e1       	ldi	r24, 0x17	; 23
    1050:	0e 94 43 0b 	call	0x1686	; 0x1686 <oled_goto_xy_buffer>
						oled_putstr_buffer("hello world!!\n");
    1054:	85 e9       	ldi	r24, 0x95	; 149
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	0e 94 32 0b 	call	0x1664	; 0x1664 <oled_putstr_buffer>
    105c:	ff 24       	eor	r15, r15
    105e:	f3 94       	inc	r15
						uint16_t x = 0;
						
						do{
							x++;
							oled_draw_circle(64,32,x);
    1060:	4f 2d       	mov	r20, r15
    1062:	60 e2       	ldi	r22, 0x20	; 32
    1064:	80 e4       	ldi	r24, 0x40	; 64
    1066:	0e 94 56 0b 	call	0x16ac	; 0x16ac <oled_draw_circle>
							oled_draw_rect(12,13,2*x,x);
    106a:	4f 2d       	mov	r20, r15
    106c:	44 0f       	add	r20, r20
    106e:	2f 2d       	mov	r18, r15
    1070:	6d e0       	ldi	r22, 0x0D	; 13
    1072:	8c e0       	ldi	r24, 0x0C	; 12
    1074:	0e 94 cd 0b 	call	0x179a	; 0x179a <oled_draw_rect>
    1078:	9f ef       	ldi	r25, 0xFF	; 255
    107a:	2f e7       	ldi	r18, 0x7F	; 127
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	91 50       	subi	r25, 0x01	; 1
    1080:	20 40       	sbci	r18, 0x00	; 0
    1082:	80 40       	sbci	r24, 0x00	; 0
    1084:	e1 f7       	brne	.-8      	; 0x107e <main+0x67e>
    1086:	00 c0       	rjmp	.+0      	; 0x1088 <main+0x688>
    1088:	00 c0       	rjmp	.+0      	; 0x108a <main+0x68a>
    108a:	f3 94       	inc	r15
							_delay_ms(100);
						} while(x<=32);
    108c:	92 e2       	ldi	r25, 0x22	; 34
    108e:	f9 12       	cpse	r15, r25
    1090:	e7 cf       	rjmp	.-50     	; 0x1060 <main+0x660>
						sei();
    1092:	78 94       	sei
    1094:	13 cd       	rjmp	.-1498   	; 0xabc <main+0xbc>

00001096 <__vector_3>:
                                                                               */
      /************************************************************************/


ISR(INT2_vect)
{
    1096:	1f 92       	push	r1
    1098:	0f 92       	push	r0
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	0f 92       	push	r0
    109e:	11 24       	eor	r1, r1
    10a0:	8f 93       	push	r24
    10a2:	9f 93       	push	r25
	can_rx_flag=1;					//set receive (CAN receive NOT UART!!!) flag for main function, flag will be cleared in main.
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	90 93 5d 03 	sts	0x035D, r25
    10ac:	80 93 5c 03 	sts	0x035C, r24
	GIFR &= ~(1<<INTF2);		//clear interrupt flag
    10b0:	8a b7       	in	r24, 0x3a	; 58
    10b2:	8f 7d       	andi	r24, 0xDF	; 223
    10b4:	8a bf       	out	0x3a, r24	; 58
}
    10b6:	9f 91       	pop	r25
    10b8:	8f 91       	pop	r24
    10ba:	0f 90       	pop	r0
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	0f 90       	pop	r0
    10c0:	1f 90       	pop	r1
    10c2:	18 95       	reti

000010c4 <__vector_1>:


ISR(INT0_vect)
{
    10c4:	1f 92       	push	r1
    10c6:	0f 92       	push	r0
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	0f 92       	push	r0
    10cc:	11 24       	eor	r1, r1
    10ce:	8f 93       	push	r24
    10d0:	9f 93       	push	r25
	flag_plunger=1;		//set flag
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	90 93 5b 03 	sts	0x035B, r25
    10da:	80 93 5a 03 	sts	0x035A, r24
	GIFR &= ~(1<<INTF0);	//clear flag of interrupt
    10de:	8a b7       	in	r24, 0x3a	; 58
    10e0:	8f 7b       	andi	r24, 0xBF	; 191
    10e2:	8a bf       	out	0x3a, r24	; 58
}
    10e4:	9f 91       	pop	r25
    10e6:	8f 91       	pop	r24
    10e8:	0f 90       	pop	r0
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	0f 90       	pop	r0
    10ee:	1f 90       	pop	r1
    10f0:	18 95       	reti

000010f2 <__vector_20>:


ISR ( USART1_RXC_vect)
{
    10f2:	1f 92       	push	r1
    10f4:	0f 92       	push	r0
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	0f 92       	push	r0
    10fa:	11 24       	eor	r1, r1
    10fc:	2f 93       	push	r18
    10fe:	8f 93       	push	r24
    1100:	9f 93       	push	r25
    1102:	ef 93       	push	r30
    1104:	ff 93       	push	r31
	
		if(!is_main_not_fetch_the_buffer){
    1106:	80 91 58 03 	lds	r24, 0x0358
    110a:	90 91 59 03 	lds	r25, 0x0359
    110e:	89 2b       	or	r24, r25
    1110:	61 f5       	brne	.+88     	; 0x116a <__vector_20+0x78>
			
			rx_buff[rx_count]=UDR1;
    1112:	83 b1       	in	r24, 0x03	; 3
    1114:	e0 91 56 03 	lds	r30, 0x0356
    1118:	f0 91 57 03 	lds	r31, 0x0357
    111c:	ef 58       	subi	r30, 0x8F	; 143
    111e:	fc 4f       	sbci	r31, 0xFC	; 252
    1120:	80 83       	st	Z, r24
			
			
			//UCSR1A &= ~(1<<RXC1);		//Clear Flag
			//UCSR1A |= (1<<UDRE1);		//Flush the buffer and enable it for next transmission
			UCSR1A &= ~(1<<RXC1);		//Clear Flag
    1122:	17 98       	cbi	0x02, 7	; 2
			
			if(rx_buff[rx_count]=='\r'||rx_buff[rx_count]=='\n'||rx_count>18)
    1124:	80 91 56 03 	lds	r24, 0x0356
    1128:	90 91 57 03 	lds	r25, 0x0357
    112c:	fc 01       	movw	r30, r24
    112e:	ef 58       	subi	r30, 0x8F	; 143
    1130:	fc 4f       	sbci	r31, 0xFC	; 252
    1132:	20 81       	ld	r18, Z
    1134:	2d 30       	cpi	r18, 0x0D	; 13
    1136:	29 f0       	breq	.+10     	; 0x1142 <__vector_20+0x50>
    1138:	2a 30       	cpi	r18, 0x0A	; 10
    113a:	19 f0       	breq	.+6      	; 0x1142 <__vector_20+0x50>
    113c:	83 31       	cpi	r24, 0x13	; 19
    113e:	91 05       	cpc	r25, r1
    1140:	7c f0       	brlt	.+30     	; 0x1160 <__vector_20+0x6e>
			{
				rx_buff[rx_count+1] = '\0';
    1142:	fc 01       	movw	r30, r24
    1144:	ef 58       	subi	r30, 0x8F	; 143
    1146:	fc 4f       	sbci	r31, 0xFC	; 252
    1148:	11 82       	std	Z+1, r1	; 0x01
				rx_count=0;
    114a:	10 92 57 03 	sts	0x0357, r1
    114e:	10 92 56 03 	sts	0x0356, r1
				is_main_not_fetch_the_buffer=1;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	90 93 59 03 	sts	0x0359, r25
    115a:	80 93 58 03 	sts	0x0358, r24
    115e:	05 c0       	rjmp	.+10     	; 0x116a <__vector_20+0x78>
			
			}else{
				rx_count++;
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	90 93 57 03 	sts	0x0357, r25
    1166:	80 93 56 03 	sts	0x0356, r24
				
				
			}	
		}
		
}
    116a:	ff 91       	pop	r31
    116c:	ef 91       	pop	r30
    116e:	9f 91       	pop	r25
    1170:	8f 91       	pop	r24
    1172:	2f 91       	pop	r18
    1174:	0f 90       	pop	r0
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	0f 90       	pop	r0
    117a:	1f 90       	pop	r1
    117c:	18 95       	reti

0000117e <Menu_GetCurrentMenu>:


Menu_Item_t* Menu_GetCurrentMenu(void)
{
	return CurrentMenuItem;
}
    117e:	80 91 1c 01 	lds	r24, 0x011C
    1182:	90 91 1d 01 	lds	r25, 0x011D
    1186:	08 95       	ret

00001188 <Menu_SetGenericClear>:
{
	MenuWriteFunc = WriteFunc;
	Menu_Navigate(CurrentMenuItem);
}
void Menu_SetGenericClear(void (*ClrFunc)(void)){
	MenuClrFunc = ClrFunc;
    1188:	90 93 6a 03 	sts	0x036A, r25
    118c:	80 93 69 03 	sts	0x0369, r24
    1190:	08 95       	ret

00001192 <Menu_EnterCurrentItem>:
}
void Menu_EnterCurrentItem(void)
{
	if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
    1192:	e0 91 1c 01 	lds	r30, 0x011C
    1196:	f0 91 1d 01 	lds	r31, 0x011D
    119a:	82 e0       	ldi	r24, 0x02	; 2
    119c:	ea 31       	cpi	r30, 0x1A	; 26
    119e:	f8 07       	cpc	r31, r24
    11a0:	49 f0       	breq	.+18     	; 0x11b4 <Menu_EnterCurrentItem+0x22>
    11a2:	30 97       	sbiw	r30, 0x00	; 0
    11a4:	39 f0       	breq	.+14     	; 0x11b4 <Menu_EnterCurrentItem+0x22>
		return;

	void (*EnterCallback)(void) = MENU_ITEM_READ_POINTER(&CurrentMenuItem->EnterCallback);
    11a6:	3c 96       	adiw	r30, 0x0c	; 12
    11a8:	85 91       	lpm	r24, Z+
    11aa:	94 91       	lpm	r25, Z

	if (EnterCallback)
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	11 f0       	breq	.+4      	; 0x11b4 <Menu_EnterCurrentItem+0x22>
		EnterCallback();
    11b0:	fc 01       	movw	r30, r24
    11b2:	09 95       	icall
    11b4:	08 95       	ret

000011b6 <Menu_DrawBase>:
}

/************************************************************************/
/* draw the base of the whole menu, all same level items of new         */
/************************************************************************/
void Menu_DrawBase(void){
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
static Menu_Item_t* CurrentMenuItem = &NULL_MENU;


Menu_Item_t* Menu_GetCurrentMenu(void)
{
	return CurrentMenuItem;
    11ba:	c0 91 1c 01 	lds	r28, 0x011C
    11be:	d0 91 1d 01 	lds	r29, 0x011D
/************************************************************************/
/* draw the base of the whole menu, all same level items of new         */
/************************************************************************/
void Menu_DrawBase(void){
	Menu_Item_t * ptr = Menu_GetCurrentMenu();// payattention here you need some thing
	if ((ptr == &NULL_MENU) || (ptr == NULL))
    11c2:	22 e0       	ldi	r18, 0x02	; 2
    11c4:	ca 31       	cpi	r28, 0x1A	; 26
    11c6:	d2 07       	cpc	r29, r18
    11c8:	09 f4       	brne	.+2      	; 0x11cc <Menu_DrawBase+0x16>
    11ca:	5a c0       	rjmp	.+180    	; 0x1280 <Menu_DrawBase+0xca>
    11cc:	20 97       	sbiw	r28, 0x00	; 0
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <Menu_DrawBase+0x1c>
    11d0:	57 c0       	rjmp	.+174    	; 0x1280 <Menu_DrawBase+0xca>
	return;
	// get the first item of the same level
	while (
		(MENU_ITEM_READ_POINTER(&ptr->Previous) != &NULL_MENU)
    11d2:	ce 01       	movw	r24, r28
    11d4:	04 96       	adiw	r24, 0x04	; 4
    11d6:	fc 01       	movw	r30, r24
    11d8:	25 91       	lpm	r18, Z+
    11da:	34 91       	lpm	r19, Z
void Menu_DrawBase(void){
	Menu_Item_t * ptr = Menu_GetCurrentMenu();// payattention here you need some thing
	if ((ptr == &NULL_MENU) || (ptr == NULL))
	return;
	// get the first item of the same level
	while (
    11dc:	2a 51       	subi	r18, 0x1A	; 26
    11de:	32 40       	sbci	r19, 0x02	; 2
    11e0:	a9 f0       	breq	.+42     	; 0x120c <Menu_DrawBase+0x56>
		(MENU_ITEM_READ_POINTER(&ptr->Previous) != &NULL_MENU)
		 && (MENU_ITEM_READ_POINTER(&ptr->Previous) != NULL)
    11e2:	fc 01       	movw	r30, r24
    11e4:	25 91       	lpm	r18, Z+
    11e6:	34 91       	lpm	r19, Z
    11e8:	23 2b       	or	r18, r19
    11ea:	81 f0       	breq	.+32     	; 0x120c <Menu_DrawBase+0x56>
		 )
		ptr = MENU_ITEM_READ_POINTER(&ptr->Previous);
    11ec:	fc 01       	movw	r30, r24
    11ee:	85 91       	lpm	r24, Z+
    11f0:	94 91       	lpm	r25, Z
    11f2:	ec 01       	movw	r28, r24
	Menu_Item_t * ptr = Menu_GetCurrentMenu();// payattention here you need some thing
	if ((ptr == &NULL_MENU) || (ptr == NULL))
	return;
	// get the first item of the same level
	while (
		(MENU_ITEM_READ_POINTER(&ptr->Previous) != &NULL_MENU)
    11f4:	04 96       	adiw	r24, 0x04	; 4
    11f6:	fc 01       	movw	r30, r24
    11f8:	25 91       	lpm	r18, Z+
    11fa:	34 91       	lpm	r19, Z
void Menu_DrawBase(void){
	Menu_Item_t * ptr = Menu_GetCurrentMenu();// payattention here you need some thing
	if ((ptr == &NULL_MENU) || (ptr == NULL))
	return;
	// get the first item of the same level
	while (
    11fc:	2a 51       	subi	r18, 0x1A	; 26
    11fe:	32 40       	sbci	r19, 0x02	; 2
    1200:	29 f0       	breq	.+10     	; 0x120c <Menu_DrawBase+0x56>
		(MENU_ITEM_READ_POINTER(&ptr->Previous) != &NULL_MENU)
		 && (MENU_ITEM_READ_POINTER(&ptr->Previous) != NULL)
    1202:	fc 01       	movw	r30, r24
    1204:	25 91       	lpm	r18, Z+
    1206:	34 91       	lpm	r19, Z
    1208:	23 2b       	or	r18, r19
    120a:	81 f7       	brne	.-32     	; 0x11ec <Menu_DrawBase+0x36>
		 )
		ptr = MENU_ITEM_READ_POINTER(&ptr->Previous);
		
	// get the first item of the same level
	if (MenuWriteFunc){
    120c:	20 91 6b 03 	lds	r18, 0x036B
    1210:	30 91 6c 03 	lds	r19, 0x036C
    1214:	21 15       	cp	r18, r1
    1216:	31 05       	cpc	r19, r1
    1218:	09 f4       	brne	.+2      	; 0x121c <Menu_DrawBase+0x66>
    121a:	32 c0       	rjmp	.+100    	; 0x1280 <Menu_DrawBase+0xca>
		MenuWriteFunc(pgm_read_byte(&(ptr->pos_x)),pgm_read_byte(&(ptr->pos_y)),ptr->Text);
    121c:	fe 01       	movw	r30, r28
    121e:	31 96       	adiw	r30, 0x01	; 1
    1220:	64 91       	lpm	r22, Z
    1222:	fe 01       	movw	r30, r28
    1224:	84 91       	lpm	r24, Z
    1226:	ae 01       	movw	r20, r28
    1228:	42 5f       	subi	r20, 0xF2	; 242
    122a:	5f 4f       	sbci	r21, 0xFF	; 255
    122c:	f9 01       	movw	r30, r18
    122e:	09 95       	icall
		while (( MENU_ITEM_READ_POINTER(&ptr->Next) != &NULL_MENU) && ( MENU_ITEM_READ_POINTER(&ptr->Next) != NULL)) {
    1230:	22 96       	adiw	r28, 0x02	; 2
    1232:	fe 01       	movw	r30, r28
    1234:	85 91       	lpm	r24, Z+
    1236:	94 91       	lpm	r25, Z
    1238:	8a 51       	subi	r24, 0x1A	; 26
    123a:	92 40       	sbci	r25, 0x02	; 2
    123c:	09 f1       	breq	.+66     	; 0x1280 <Menu_DrawBase+0xca>
    123e:	fe 01       	movw	r30, r28
    1240:	85 91       	lpm	r24, Z+
    1242:	94 91       	lpm	r25, Z
    1244:	89 2b       	or	r24, r25
    1246:	e1 f0       	breq	.+56     	; 0x1280 <Menu_DrawBase+0xca>
			ptr = MENU_ITEM_READ_POINTER(&ptr->Next);
    1248:	fe 01       	movw	r30, r28
    124a:	c5 91       	lpm	r28, Z+
    124c:	d4 91       	lpm	r29, Z
			MenuWriteFunc(pgm_read_byte(&(ptr->pos_x)),pgm_read_byte(&(ptr->pos_y)),ptr->Text);
    124e:	fe 01       	movw	r30, r28
    1250:	31 96       	adiw	r30, 0x01	; 1
    1252:	64 91       	lpm	r22, Z
    1254:	fe 01       	movw	r30, r28
    1256:	84 91       	lpm	r24, Z
    1258:	ae 01       	movw	r20, r28
    125a:	42 5f       	subi	r20, 0xF2	; 242
    125c:	5f 4f       	sbci	r21, 0xFF	; 255
    125e:	e0 91 6b 03 	lds	r30, 0x036B
    1262:	f0 91 6c 03 	lds	r31, 0x036C
    1266:	09 95       	icall
		ptr = MENU_ITEM_READ_POINTER(&ptr->Previous);
		
	// get the first item of the same level
	if (MenuWriteFunc){
		MenuWriteFunc(pgm_read_byte(&(ptr->pos_x)),pgm_read_byte(&(ptr->pos_y)),ptr->Text);
		while (( MENU_ITEM_READ_POINTER(&ptr->Next) != &NULL_MENU) && ( MENU_ITEM_READ_POINTER(&ptr->Next) != NULL)) {
    1268:	22 96       	adiw	r28, 0x02	; 2
    126a:	fe 01       	movw	r30, r28
    126c:	85 91       	lpm	r24, Z+
    126e:	94 91       	lpm	r25, Z
    1270:	8a 51       	subi	r24, 0x1A	; 26
    1272:	92 40       	sbci	r25, 0x02	; 2
    1274:	29 f0       	breq	.+10     	; 0x1280 <Menu_DrawBase+0xca>
    1276:	fe 01       	movw	r30, r28
    1278:	85 91       	lpm	r24, Z+
    127a:	94 91       	lpm	r25, Z
    127c:	89 2b       	or	r24, r25
    127e:	21 f7       	brne	.-56     	; 0x1248 <Menu_DrawBase+0x92>
			ptr = MENU_ITEM_READ_POINTER(&ptr->Next);
			MenuWriteFunc(pgm_read_byte(&(ptr->pos_x)),pgm_read_byte(&(ptr->pos_y)),ptr->Text);
		}
	}
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	08 95       	ret

00001286 <Menu_Navigate>:
{
	return CurrentMenuItem;
}

void Menu_Navigate(Menu_Item_t* const NewMenu)
{
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
	if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
    128a:	22 e0       	ldi	r18, 0x02	; 2
    128c:	8a 31       	cpi	r24, 0x1A	; 26
    128e:	92 07       	cpc	r25, r18
    1290:	09 f4       	brne	.+2      	; 0x1294 <Menu_Navigate+0xe>
    1292:	36 c0       	rjmp	.+108    	; 0x1300 <Menu_Navigate+0x7a>
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	09 f4       	brne	.+2      	; 0x129a <Menu_Navigate+0x14>
    1298:	33 c0       	rjmp	.+102    	; 0x1300 <Menu_Navigate+0x7a>
		return;
	static Menu_Item_t* LastMenuItem;
	LastMenuItem = CurrentMenuItem;
    129a:	e0 91 1c 01 	lds	r30, 0x011C
    129e:	f0 91 1d 01 	lds	r31, 0x011D
    12a2:	f0 93 68 03 	sts	0x0368, r31
    12a6:	e0 93 67 03 	sts	0x0367, r30
	CurrentMenuItem = NewMenu;
    12aa:	90 93 1d 01 	sts	0x011D, r25
    12ae:	80 93 1c 01 	sts	0x011C, r24
	if (MENU_ITEM_READ_POINTER(&LastMenuItem->Parent) != MENU_ITEM_READ_POINTER(&NewMenu->Parent))
    12b2:	36 96       	adiw	r30, 0x06	; 6
    12b4:	25 91       	lpm	r18, Z+
    12b6:	34 91       	lpm	r19, Z
    12b8:	06 96       	adiw	r24, 0x06	; 6
    12ba:	fc 01       	movw	r30, r24
    12bc:	85 91       	lpm	r24, Z+
    12be:	94 91       	lpm	r25, Z
    12c0:	28 17       	cp	r18, r24
    12c2:	39 07       	cpc	r19, r25
    12c4:	29 f0       	breq	.+10     	; 0x12d0 <Menu_Navigate+0x4a>
	{
		// not the same level navigation, need to be refreshed
		MenuClrFunc();
    12c6:	e0 91 69 03 	lds	r30, 0x0369
    12ca:	f0 91 6a 03 	lds	r31, 0x036A
    12ce:	09 95       	icall
/*
	if (MenuWriteFunc)
		MenuWriteFunc(pgm_read_byte(&(CurrentMenuItem->pos_x)),pgm_read_byte(&(CurrentMenuItem->pos_y)),CurrentMenuItem->Text);
*/

	void (*SelectCallback)(uint8_t x, uint8_t y, const char* Text) = MENU_ITEM_READ_POINTER(&CurrentMenuItem->SelectCallback);
    12d0:	e0 91 1c 01 	lds	r30, 0x011C
    12d4:	f0 91 1d 01 	lds	r31, 0x011D
    12d8:	3a 96       	adiw	r30, 0x0a	; 10
    12da:	c5 91       	lpm	r28, Z+
    12dc:	d4 91       	lpm	r29, Z
	
	Menu_DrawBase();
    12de:	0e 94 db 08 	call	0x11b6	; 0x11b6 <Menu_DrawBase>
	if (SelectCallback)
    12e2:	20 97       	sbiw	r28, 0x00	; 0
    12e4:	69 f0       	breq	.+26     	; 0x1300 <Menu_Navigate+0x7a>
		SelectCallback(pgm_read_byte(&(CurrentMenuItem->pos_x)),pgm_read_byte(&(CurrentMenuItem->pos_y)),CurrentMenuItem->Text);
    12e6:	40 91 1c 01 	lds	r20, 0x011C
    12ea:	50 91 1d 01 	lds	r21, 0x011D
    12ee:	fa 01       	movw	r30, r20
    12f0:	31 96       	adiw	r30, 0x01	; 1
    12f2:	64 91       	lpm	r22, Z
    12f4:	fa 01       	movw	r30, r20
    12f6:	84 91       	lpm	r24, Z
    12f8:	42 5f       	subi	r20, 0xF2	; 242
    12fa:	5f 4f       	sbci	r21, 0xFF	; 255
    12fc:	fe 01       	movw	r30, r28
    12fe:	09 95       	icall
}
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	08 95       	ret

00001306 <Menu_SetGenericWriteCallback>:

void Menu_SetGenericWriteCallback(void (*WriteFunc)(uint8_t x, uint8_t y, const char* Text))
{
	MenuWriteFunc = WriteFunc;
    1306:	90 93 6c 03 	sts	0x036C, r25
    130a:	80 93 6b 03 	sts	0x036B, r24
	Menu_Navigate(CurrentMenuItem);
    130e:	80 91 1c 01 	lds	r24, 0x011C
    1312:	90 91 1d 01 	lds	r25, 0x011D
    1316:	0e 94 43 09 	call	0x1286	; 0x1286 <Menu_Navigate>
    131a:	08 95       	ret

0000131c <oled_init>:
}

 
 void oled_init(void)
 {
 	MCUCR |= (1<<SRE);        //Enable External Memory interface
    131c:	85 b7       	in	r24, 0x35	; 53
    131e:	80 68       	ori	r24, 0x80	; 128
    1320:	85 bf       	out	0x35, r24	; 53
 	SFIOR |= (1<<XMM2);       //Mask out higher 4 bits of address
    1322:	80 b7       	in	r24, 0x30	; 48
    1324:	80 62       	ori	r24, 0x20	; 32
    1326:	80 bf       	out	0x30, r24	; 48
 	volatile uint8_t *addr= (uint8_t *) OLED_ADDR_CMD_START;		//selcet command mode
 	
 	//code copied from datasheet
 	*addr=0xae;				//turn display off
    1328:	ef e0       	ldi	r30, 0x0F	; 15
    132a:	f0 e1       	ldi	r31, 0x10	; 16
    132c:	8e ea       	ldi	r24, 0xAE	; 174
    132e:	80 83       	st	Z, r24
 	*addr=0xa1;			//column addr 127 is mapped to seg0
    1330:	81 ea       	ldi	r24, 0xA1	; 161
    1332:	80 83       	st	Z, r24
 	*addr=0xda;				//com pin configuration
    1334:	8a ed       	ldi	r24, 0xDA	; 218
    1336:	80 83       	st	Z, r24
 	*addr=0x12;				//com pin config=alternative
    1338:	82 e1       	ldi	r24, 0x12	; 18
    133a:	80 83       	st	Z, r24
 	*addr=0xc8;				//o/p scan direction com63 to com0
    133c:	88 ec       	ldi	r24, 0xC8	; 200
    133e:	80 83       	st	Z, r24
 	*addr=0xa8;				//multiplex ratio config
    1340:	88 ea       	ldi	r24, 0xA8	; 168
    1342:	80 83       	st	Z, r24
 	*addr=0x3f;				//ratio=63
    1344:	8f e3       	ldi	r24, 0x3F	; 63
    1346:	80 83       	st	Z, r24
 	*addr=0xd5;				//dclck ratio
    1348:	85 ed       	ldi	r24, 0xD5	; 213
    134a:	80 83       	st	Z, r24
 	*addr=0x80;				//divide ratio and oscl. frequency
    134c:	80 e8       	ldi	r24, 0x80	; 128
    134e:	80 83       	st	Z, r24
 	*addr=0x81;				//contrast control
    1350:	81 e8       	ldi	r24, 0x81	; 129
    1352:	80 83       	st	Z, r24
 	*addr=0x50;				//value of contrast is 50h
    1354:	80 e5       	ldi	r24, 0x50	; 80
    1356:	80 83       	st	Z, r24
 	*addr=0xd9;				//set pre-charge period
    1358:	89 ed       	ldi	r24, 0xD9	; 217
    135a:	80 83       	st	Z, r24
 	*addr=0x21;				//value =21
    135c:	81 e2       	ldi	r24, 0x21	; 33
    135e:	80 83       	st	Z, r24
 	*addr=0x20;				//set memory addressing mode
    1360:	80 e2       	ldi	r24, 0x20	; 32
    1362:	80 83       	st	Z, r24
 	*addr=0x00;				//horz addressing mode
    1364:	10 82       	st	Z, r1
 	*addr=0xdb;				//vcom de-select level mode
    1366:	8b ed       	ldi	r24, 0xDB	; 219
    1368:	80 83       	st	Z, r24
 	*addr=0x30;				//value=0.83vcc
    136a:	80 e3       	ldi	r24, 0x30	; 48
    136c:	80 83       	st	Z, r24
 	*addr=0xad;				//master configuration
    136e:	8d ea       	ldi	r24, 0xAD	; 173
    1370:	80 83       	st	Z, r24
 	*addr=0x00;				//select extrenal iref
    1372:	10 82       	st	Z, r1
 	*addr=0xa4;				//out follows ram content
    1374:	84 ea       	ldi	r24, 0xA4	; 164
    1376:	80 83       	st	Z, r24
 	*addr=0xa6;				//set normal display
    1378:	86 ea       	ldi	r24, 0xA6	; 166
    137a:	80 83       	st	Z, r24
 	*addr=0xaf;				//display on
    137c:	8f ea       	ldi	r24, 0xAF	; 175
    137e:	80 83       	st	Z, r24
    1380:	08 95       	ret

00001382 <oled_goto_xy>:



void oled_goto_xy(uint8_t col,uint8_t row){
	// input: 0 to max - min.
	current_col_address = col;
    1382:	80 93 70 03 	sts	0x0370, r24
	current_pag_address = row;
    1386:	60 93 6f 03 	sts	0x036F, r22
void oled_wr_cmd(uint8_t cmd){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_CMD_START;
	*addr = cmd;*/
	volatile uint8_t *  addr = (uint8_t *)OLED_ADDR_CMD_START;
	*addr = cmd;
    138a:	ef e0       	ldi	r30, 0x0F	; 15
    138c:	f0 e1       	ldi	r31, 0x10	; 16
    138e:	91 e2       	ldi	r25, 0x21	; 33
    1390:	90 83       	st	Z, r25
    1392:	80 83       	st	Z, r24
    1394:	8f e7       	ldi	r24, 0x7F	; 127
    1396:	80 83       	st	Z, r24
    1398:	82 e2       	ldi	r24, 0x22	; 34
    139a:	80 83       	st	Z, r24
    139c:	60 83       	st	Z, r22
    139e:	86 e0       	ldi	r24, 0x06	; 6
    13a0:	80 83       	st	Z, r24
    13a2:	08 95       	ret

000013a4 <oled_goto_nextln>:
	oled_wr_cmd(END_PAGE);
}

void oled_goto_nextln(void){
	// input: 0 to max-min
	current_pag_address++;
    13a4:	80 91 6f 03 	lds	r24, 0x036F
    13a8:	8f 5f       	subi	r24, 0xFF	; 255
    13aa:	80 93 6f 03 	sts	0x036F, r24
	if(current_pag_address > END_PAGE - START_PAGE)
    13ae:	80 91 6f 03 	lds	r24, 0x036F
    13b2:	87 30       	cpi	r24, 0x07	; 7
    13b4:	10 f0       	brcs	.+4      	; 0x13ba <oled_goto_nextln+0x16>
		current_pag_address = 0;
    13b6:	10 92 6f 03 	sts	0x036F, r1
	oled_goto_xy(0, current_pag_address);
    13ba:	60 91 6f 03 	lds	r22, 0x036F
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	0e 94 c1 09 	call	0x1382	; 0x1382 <oled_goto_xy>
    13c4:	08 95       	ret

000013c6 <oled_putchar>:
}
void oled_putchar( const char c){
    13c6:	cf 93       	push	r28
	if(c == '\n'){
    13c8:	8a 30       	cpi	r24, 0x0A	; 10
    13ca:	19 f4       	brne	.+6      	; 0x13d2 <oled_putchar+0xc>
		oled_goto_nextln();
    13cc:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <oled_goto_nextln>
		return;
    13d0:	29 c0       	rjmp	.+82     	; 0x1424 <oled_putchar+0x5e>
	}
	int i;
	const char j = (c-' ');
    13d2:	c0 ee       	ldi	r28, 0xE0	; 224
    13d4:	c8 0f       	add	r28, r24
	current_col_address+=CHA_WIDTH;
    13d6:	80 91 70 03 	lds	r24, 0x0370
    13da:	8b 5f       	subi	r24, 0xFB	; 251
    13dc:	80 93 70 03 	sts	0x0370, r24

	if(current_col_address/CHA_WIDTH >= MAX_CHARS_A_LINE){
    13e0:	80 91 70 03 	lds	r24, 0x0370
    13e4:	8d 37       	cpi	r24, 0x7D	; 125
    13e6:	70 f0       	brcs	.+28     	; 0x1404 <oled_putchar+0x3e>
		//current_col_address = 0;
		oled_goto_nextln();
    13e8:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <oled_goto_nextln>
    13ec:	0b c0       	rjmp	.+22     	; 0x1404 <oled_putchar+0x3e>
    13ee:	fc 01       	movw	r30, r24
    13f0:	e2 0f       	add	r30, r18
    13f2:	f3 1f       	adc	r31, r19
	}


	for(i = 0; i < 5; i++){
		// pay attention, progmem read
		 oled_wr_d(pgm_read_byte(&font[(int)j][i]));
    13f4:	e4 91       	lpm	r30, Z
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
    13f6:	ec 93       	st	X, r30
		//current_col_address = 0;
		oled_goto_nextln();
	}


	for(i = 0; i < 5; i++){
    13f8:	2f 5f       	subi	r18, 0xFF	; 255
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	25 30       	cpi	r18, 0x05	; 5
    13fe:	31 05       	cpc	r19, r1
    1400:	b1 f7       	brne	.-20     	; 0x13ee <oled_putchar+0x28>
    1402:	10 c0       	rjmp	.+32     	; 0x1424 <oled_putchar+0x5e>
    1404:	8c 2f       	mov	r24, r28
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9c 01       	movw	r18, r24
    140a:	22 0f       	add	r18, r18
    140c:	33 1f       	adc	r19, r19
    140e:	22 0f       	add	r18, r18
    1410:	33 1f       	adc	r19, r19
    1412:	82 0f       	add	r24, r18
    1414:	93 1f       	adc	r25, r19
	current_pag_address++;
	if(current_pag_address > END_PAGE - START_PAGE)
		current_pag_address = 0;
	oled_goto_xy(0, current_pag_address);
}
void oled_putchar( const char c){
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	88 5d       	subi	r24, 0xD8	; 216
    141c:	9d 4f       	sbci	r25, 0xFD	; 253
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
    141e:	af e0       	ldi	r26, 0x0F	; 15
    1420:	b2 e1       	ldi	r27, 0x12	; 18
    1422:	e5 cf       	rjmp	.-54     	; 0x13ee <oled_putchar+0x28>

	for(i = 0; i < 5; i++){
		// pay attention, progmem read
		 oled_wr_d(pgm_read_byte(&font[(int)j][i]));
	}
}
    1424:	cf 91       	pop	r28
    1426:	08 95       	ret

00001428 <oled_putstr_P>:
}
void oled_putstr_inverse( const char * str){
	while(*str)
		oled_putchar_inverse(*str++);
}
void oled_putstr_P( const char * str){
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	ec 01       	movw	r28, r24
		char read = pgm_read_byte(str);
    142e:	fc 01       	movw	r30, r24
    1430:	84 91       	lpm	r24, Z
		// Display buffer on LCD.
		while(read){
    1432:	88 23       	and	r24, r24
    1434:	39 f0       	breq	.+14     	; 0x1444 <oled_putstr_P+0x1c>
			oled_putchar(read);
    1436:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <oled_putchar>
			str++;
    143a:	21 96       	adiw	r28, 0x01	; 1
			read = pgm_read_byte(str);
    143c:	fe 01       	movw	r30, r28
    143e:	84 91       	lpm	r24, Z
		oled_putchar_inverse(*str++);
}
void oled_putstr_P( const char * str){
		char read = pgm_read_byte(str);
		// Display buffer on LCD.
		while(read){
    1440:	81 11       	cpse	r24, r1
    1442:	f9 cf       	rjmp	.-14     	; 0x1436 <oled_putstr_P+0xe>
			oled_putchar(read);
			str++;
			read = pgm_read_byte(str);
		}
		
}
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	08 95       	ret

0000144a <oled_clear>:
		read = pgm_read_byte(str);
	}
	
}
void oled_clear(void){
	current_col_address = 0;
    144a:	10 92 70 03 	sts	0x0370, r1
	current_pag_address = 0;
    144e:	10 92 6f 03 	sts	0x036F, r1
void oled_wr_cmd(uint8_t cmd){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_CMD_START;
	*addr = cmd;*/
	volatile uint8_t *  addr = (uint8_t *)OLED_ADDR_CMD_START;
	*addr = cmd;
    1452:	ef e0       	ldi	r30, 0x0F	; 15
    1454:	f0 e1       	ldi	r31, 0x10	; 16
    1456:	8e ea       	ldi	r24, 0xAE	; 174
    1458:	80 83       	st	Z, r24
    145a:	80 e2       	ldi	r24, 0x20	; 32
    145c:	80 83       	st	Z, r24
    145e:	10 82       	st	Z, r1
    1460:	81 e2       	ldi	r24, 0x21	; 33
    1462:	80 83       	st	Z, r24
    1464:	10 82       	st	Z, r1
    1466:	8f e7       	ldi	r24, 0x7F	; 127
    1468:	80 83       	st	Z, r24
    146a:	82 e2       	ldi	r24, 0x22	; 34
    146c:	80 83       	st	Z, r24
    146e:	10 82       	st	Z, r1
    1470:	87 e0       	ldi	r24, 0x07	; 7
    1472:	80 83       	st	Z, r24
    1474:	80 e4       	ldi	r24, 0x40	; 64
    1476:	80 83       	st	Z, r24
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	94 e0       	ldi	r25, 0x04	; 4
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
    147c:	ef e0       	ldi	r30, 0x0F	; 15
    147e:	f2 e1       	ldi	r31, 0x12	; 18
    1480:	10 82       	st	Z, r1
    1482:	01 97       	sbiw	r24, 0x01	; 1
	oled_wr_cmd(0x22);
	oled_wr_cmd(0);
	oled_wr_cmd(7);
	oled_wr_cmd(0x40);
	int temp;
	for(temp = 0; temp < 8*128; temp++){
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	e1 f7       	brne	.-8      	; 0x1480 <oled_clear+0x36>
void oled_wr_cmd(uint8_t cmd){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_CMD_START;
	*addr = cmd;*/
	volatile uint8_t *  addr = (uint8_t *)OLED_ADDR_CMD_START;
	*addr = cmd;
    1488:	ef e0       	ldi	r30, 0x0F	; 15
    148a:	f0 e1       	ldi	r31, 0x10	; 16
    148c:	81 e2       	ldi	r24, 0x21	; 33
    148e:	80 83       	st	Z, r24
    1490:	10 82       	st	Z, r1
    1492:	8f e7       	ldi	r24, 0x7F	; 127
    1494:	80 83       	st	Z, r24
    1496:	82 e2       	ldi	r24, 0x22	; 34
    1498:	80 83       	st	Z, r24
    149a:	10 82       	st	Z, r1
    149c:	86 e0       	ldi	r24, 0x06	; 6
    149e:	80 83       	st	Z, r24
    14a0:	8c e7       	ldi	r24, 0x7C	; 124
    14a2:	80 83       	st	Z, r24
    14a4:	8f ea       	ldi	r24, 0xAF	; 175
    14a6:	80 83       	st	Z, r24
	oled_wr_cmd(0x22);
	oled_wr_cmd(START_PAGE);
	oled_wr_cmd(END_PAGE);
	oled_wr_cmd(0x7c);
	oled_wr_cmd(0xaf); // on
	oled_goto_xy(0,0);
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	0e 94 c1 09 	call	0x1382	; 0x1382 <oled_goto_xy>
    14b0:	08 95       	ret

000014b2 <oled_putchar_printf>:
		oled_wr_d(0);
	}
}

int oled_putchar_printf(char var, FILE *stream){
	if(var == '\r'||var =='\n'){
    14b2:	8d 30       	cpi	r24, 0x0D	; 13
    14b4:	11 f0       	breq	.+4      	; 0x14ba <oled_putchar_printf+0x8>
    14b6:	8a 30       	cpi	r24, 0x0A	; 10
    14b8:	19 f4       	brne	.+6      	; 0x14c0 <oled_putchar_printf+0xe>
		oled_goto_nextln();
    14ba:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <oled_goto_nextln>
		return 0;
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <oled_putchar_printf+0x12>
	}

	oled_putchar(var);
    14c0:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <oled_putchar>
	return 0;
}
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	08 95       	ret

000014ca <oled_putchar_inverse>:

void oled_putchar_inverse(char c){
    14ca:	cf 93       	push	r28
	if(c == '\n'){
    14cc:	8a 30       	cpi	r24, 0x0A	; 10
    14ce:	19 f4       	brne	.+6      	; 0x14d6 <oled_putchar_inverse+0xc>
		oled_goto_nextln();
    14d0:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <oled_goto_nextln>
		return;
    14d4:	2a c0       	rjmp	.+84     	; 0x152a <oled_putchar_inverse+0x60>
	}
	int i;
	const char j = (c-' ');
    14d6:	c0 ee       	ldi	r28, 0xE0	; 224
    14d8:	c8 0f       	add	r28, r24
	current_col_address+=CHA_WIDTH;
    14da:	80 91 70 03 	lds	r24, 0x0370
    14de:	8b 5f       	subi	r24, 0xFB	; 251
    14e0:	80 93 70 03 	sts	0x0370, r24

	if(current_col_address/CHA_WIDTH >= MAX_CHARS_A_LINE){
    14e4:	80 91 70 03 	lds	r24, 0x0370
    14e8:	8d 37       	cpi	r24, 0x7D	; 125
    14ea:	78 f0       	brcs	.+30     	; 0x150a <oled_putchar_inverse+0x40>
		//current_col_address = 0;
		oled_goto_nextln();
    14ec:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <oled_goto_nextln>
    14f0:	0c c0       	rjmp	.+24     	; 0x150a <oled_putchar_inverse+0x40>
    14f2:	fc 01       	movw	r30, r24
    14f4:	e2 0f       	add	r30, r18
    14f6:	f3 1f       	adc	r31, r19
	}


	for(i = 0; i < 5; i++){
		// pay attention, progmem read
		oled_wr_d(~(pgm_read_byte(&font[(int)j][i])));
    14f8:	e4 91       	lpm	r30, Z
    14fa:	e0 95       	com	r30
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
    14fc:	ec 93       	st	X, r30
		//current_col_address = 0;
		oled_goto_nextln();
	}


	for(i = 0; i < 5; i++){
    14fe:	2f 5f       	subi	r18, 0xFF	; 255
    1500:	3f 4f       	sbci	r19, 0xFF	; 255
    1502:	25 30       	cpi	r18, 0x05	; 5
    1504:	31 05       	cpc	r19, r1
    1506:	a9 f7       	brne	.-22     	; 0x14f2 <oled_putchar_inverse+0x28>
    1508:	10 c0       	rjmp	.+32     	; 0x152a <oled_putchar_inverse+0x60>
    150a:	8c 2f       	mov	r24, r28
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	9c 01       	movw	r18, r24
    1510:	22 0f       	add	r18, r18
    1512:	33 1f       	adc	r19, r19
    1514:	22 0f       	add	r18, r18
    1516:	33 1f       	adc	r19, r19
    1518:	82 0f       	add	r24, r18
    151a:	93 1f       	adc	r25, r19

	oled_putchar(var);
	return 0;
}

void oled_putchar_inverse(char c){
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	88 5d       	subi	r24, 0xD8	; 216
    1522:	9d 4f       	sbci	r25, 0xFD	; 253
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
    1524:	af e0       	ldi	r26, 0x0F	; 15
    1526:	b2 e1       	ldi	r27, 0x12	; 18
    1528:	e4 cf       	rjmp	.-56     	; 0x14f2 <oled_putchar_inverse+0x28>

	for(i = 0; i < 5; i++){
		// pay attention, progmem read
		oled_wr_d(~(pgm_read_byte(&font[(int)j][i])));
	}
}
    152a:	cf 91       	pop	r28
    152c:	08 95       	ret

0000152e <oled_putstr_inverse>:

void oled_putstr( const char * str){
	while(*str)
		oled_putchar(*str++);
}
void oled_putstr_inverse( const char * str){
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	ec 01       	movw	r28, r24
	while(*str)
    1534:	88 81       	ld	r24, Y
    1536:	88 23       	and	r24, r24
    1538:	31 f0       	breq	.+12     	; 0x1546 <oled_putstr_inverse+0x18>
    153a:	21 96       	adiw	r28, 0x01	; 1
		oled_putchar_inverse(*str++);
    153c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <oled_putchar_inverse>
void oled_putstr( const char * str){
	while(*str)
		oled_putchar(*str++);
}
void oled_putstr_inverse( const char * str){
	while(*str)
    1540:	89 91       	ld	r24, Y+
    1542:	81 11       	cpse	r24, r1
    1544:	fb cf       	rjmp	.-10     	; 0x153c <oled_putstr_inverse+0xe>
		oled_putchar_inverse(*str++);
}
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	08 95       	ret

0000154c <oled_putstr_P_inverse>:
			str++;
			read = pgm_read_byte(str);
		}
		
}
void oled_putstr_P_inverse( const char * str){
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	ec 01       	movw	r28, r24
	char read = pgm_read_byte(str);
    1552:	fc 01       	movw	r30, r24
    1554:	84 91       	lpm	r24, Z
	// Display buffer on LCD.
	while(read){
    1556:	88 23       	and	r24, r24
    1558:	39 f0       	breq	.+14     	; 0x1568 <oled_putstr_P_inverse+0x1c>
		oled_putchar_inverse(read);
    155a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <oled_putchar_inverse>
		str++;
    155e:	21 96       	adiw	r28, 0x01	; 1
		read = pgm_read_byte(str);
    1560:	fe 01       	movw	r30, r28
    1562:	84 91       	lpm	r24, Z
		
}
void oled_putstr_P_inverse( const char * str){
	char read = pgm_read_byte(str);
	// Display buffer on LCD.
	while(read){
    1564:	81 11       	cpse	r24, r1
    1566:	f9 cf       	rjmp	.-14     	; 0x155a <oled_putstr_P_inverse+0xe>
		oled_putchar_inverse(read);
		str++;
		read = pgm_read_byte(str);
	}
	
}
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	08 95       	ret

0000156e <oled_draw_dot_buffer>:
static volatile uint8_t * const buffer_start = (uint8_t *)DISP_BUFFER_START;
static volatile uint16_t current_buffer_file_pointer = 0; 
void oled_draw_dot_buffer(uint8_t x, uint8_t y)
{
	// LOCATE THE BYTE
	uint16_t index_offset = x + (y/8)*128;
    156e:	e6 2f       	mov	r30, r22
    1570:	e6 95       	lsr	r30
    1572:	e6 95       	lsr	r30
    1574:	e6 95       	lsr	r30
    1576:	40 e8       	ldi	r20, 0x80	; 128
    1578:	e4 9f       	mul	r30, r20
    157a:	f0 01       	movw	r30, r0
    157c:	11 24       	eor	r1, r1
    157e:	e8 0f       	add	r30, r24
    1580:	f1 1d       	adc	r31, r1
	buffer_start[index_offset] |= (1 << y % 8); 
    1582:	f7 5e       	subi	r31, 0xE7	; 231
    1584:	20 81       	ld	r18, Z
    1586:	67 70       	andi	r22, 0x07	; 7
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	ac 01       	movw	r20, r24
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <oled_draw_dot_buffer+0x26>
    1590:	44 0f       	add	r20, r20
    1592:	55 1f       	adc	r21, r21
    1594:	6a 95       	dec	r22
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <oled_draw_dot_buffer+0x22>
    1598:	ba 01       	movw	r22, r20
    159a:	62 2b       	or	r22, r18
    159c:	60 83       	st	Z, r22
    159e:	08 95       	ret

000015a0 <oled_buffer_update>:

void oled_buffer_update(void)
{
	// copy the whole buffer to the oled
	int i;
	oled_goto_xy(0,0);
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	0e 94 c1 09 	call	0x1382	; 0x1382 <oled_goto_xy>
    15a8:	e0 e0       	ldi	r30, 0x00	; 0
    15aa:	f9 e1       	ldi	r31, 0x19	; 25
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
    15ac:	af e0       	ldi	r26, 0x0F	; 15
    15ae:	b2 e1       	ldi	r27, 0x12	; 18
	// copy the whole buffer to the oled
	int i;
	oled_goto_xy(0,0);
	for (i = 0; i< 896; i++)
	{
		oled_wr_d(buffer_start[i]);
    15b0:	81 91       	ld	r24, Z+
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
    15b2:	8c 93       	st	X, r24
void oled_buffer_update(void)
{
	// copy the whole buffer to the oled
	int i;
	oled_goto_xy(0,0);
	for (i = 0; i< 896; i++)
    15b4:	e0 38       	cpi	r30, 0x80	; 128
    15b6:	8c e1       	ldi	r24, 0x1C	; 28
    15b8:	f8 07       	cpc	r31, r24
    15ba:	d1 f7       	brne	.-12     	; 0x15b0 <oled_buffer_update+0x10>
	{
		oled_wr_d(buffer_start[i]);
	}
	
}
    15bc:	08 95       	ret

000015be <oled_putchar_buffer>:

void oled_putchar_buffer(char c)
{
	if(c == '\n'){
    15be:	8a 30       	cpi	r24, 0x0A	; 10
    15c0:	59 f4       	brne	.+22     	; 0x15d8 <oled_putchar_buffer+0x1a>
		current_buffer_file_pointer += 128;
    15c2:	80 91 6d 03 	lds	r24, 0x036D
    15c6:	90 91 6e 03 	lds	r25, 0x036E
    15ca:	80 58       	subi	r24, 0x80	; 128
    15cc:	9f 4f       	sbci	r25, 0xFF	; 255
    15ce:	90 93 6e 03 	sts	0x036E, r25
    15d2:	80 93 6d 03 	sts	0x036D, r24
		return;
    15d6:	08 95       	ret
	}
	int i;
	const char j = (c-' ');
    15d8:	80 52       	subi	r24, 0x20	; 32
	

	if(((current_buffer_file_pointer)%128)/CHA_WIDTH >= MAX_CHARS_A_LINE){
    15da:	20 91 6d 03 	lds	r18, 0x036D
    15de:	30 91 6e 03 	lds	r19, 0x036E
    15e2:	2f 77       	andi	r18, 0x7F	; 127
    15e4:	33 27       	eor	r19, r19
    15e6:	2d 37       	cpi	r18, 0x7D	; 125
    15e8:	31 05       	cpc	r19, r1
    15ea:	78 f1       	brcs	.+94     	; 0x164a <oled_putchar_buffer+0x8c>
		//current_col_address = 0;
		current_buffer_file_pointer += 128;
    15ec:	20 91 6d 03 	lds	r18, 0x036D
    15f0:	30 91 6e 03 	lds	r19, 0x036E
    15f4:	20 58       	subi	r18, 0x80	; 128
    15f6:	3f 4f       	sbci	r19, 0xFF	; 255
    15f8:	30 93 6e 03 	sts	0x036E, r19
    15fc:	20 93 6d 03 	sts	0x036D, r18
		if (current_buffer_file_pointer >= 896)
    1600:	20 91 6d 03 	lds	r18, 0x036D
    1604:	30 91 6e 03 	lds	r19, 0x036E
    1608:	20 38       	cpi	r18, 0x80	; 128
    160a:	33 40       	sbci	r19, 0x03	; 3
    160c:	f0 f0       	brcs	.+60     	; 0x164a <oled_putchar_buffer+0x8c>
		{
			current_buffer_file_pointer = 0;
    160e:	10 92 6e 03 	sts	0x036E, r1
    1612:	10 92 6d 03 	sts	0x036D, r1
    1616:	19 c0       	rjmp	.+50     	; 0x164a <oled_putchar_buffer+0x8c>
	}


	for(i = 0; i < 5; i++){
		// pay attention, progmem read
		buffer_start[current_buffer_file_pointer] = pgm_read_byte(&font[(int)j][i]);
    1618:	a0 91 6d 03 	lds	r26, 0x036D
    161c:	b0 91 6e 03 	lds	r27, 0x036E
    1620:	b7 5e       	subi	r27, 0xE7	; 231
    1622:	fa 01       	movw	r30, r20
    1624:	e2 0f       	add	r30, r18
    1626:	f3 1f       	adc	r31, r19
    1628:	e4 91       	lpm	r30, Z
    162a:	ec 93       	st	X, r30
		current_buffer_file_pointer++;
    162c:	80 91 6d 03 	lds	r24, 0x036D
    1630:	90 91 6e 03 	lds	r25, 0x036E
    1634:	01 96       	adiw	r24, 0x01	; 1
    1636:	90 93 6e 03 	sts	0x036E, r25
    163a:	80 93 6d 03 	sts	0x036D, r24
		}
		
	}


	for(i = 0; i < 5; i++){
    163e:	2f 5f       	subi	r18, 0xFF	; 255
    1640:	3f 4f       	sbci	r19, 0xFF	; 255
    1642:	25 30       	cpi	r18, 0x05	; 5
    1644:	31 05       	cpc	r19, r1
    1646:	41 f7       	brne	.-48     	; 0x1618 <oled_putchar_buffer+0x5a>
    1648:	08 95       	ret
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	ac 01       	movw	r20, r24
    164e:	44 0f       	add	r20, r20
    1650:	55 1f       	adc	r21, r21
    1652:	44 0f       	add	r20, r20
    1654:	55 1f       	adc	r21, r21
    1656:	48 0f       	add	r20, r24
    1658:	59 1f       	adc	r21, r25
	}
	
}

void oled_putchar_buffer(char c)
{
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	48 5d       	subi	r20, 0xD8	; 216
    1660:	5d 4f       	sbci	r21, 0xFD	; 253
    1662:	da cf       	rjmp	.-76     	; 0x1618 <oled_putchar_buffer+0x5a>

00001664 <oled_putstr_buffer>:
		current_buffer_file_pointer++;
	}
}

void oled_putstr_buffer(const char *str)
{
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	ec 01       	movw	r28, r24
	while(*str)
    166a:	88 81       	ld	r24, Y
    166c:	88 23       	and	r24, r24
    166e:	31 f0       	breq	.+12     	; 0x167c <oled_putstr_buffer+0x18>
    1670:	21 96       	adiw	r28, 0x01	; 1
		oled_putchar_buffer(*str++);
    1672:	0e 94 df 0a 	call	0x15be	; 0x15be <oled_putchar_buffer>
	}
}

void oled_putstr_buffer(const char *str)
{
	while(*str)
    1676:	89 91       	ld	r24, Y+
    1678:	81 11       	cpse	r24, r1
    167a:	fb cf       	rjmp	.-10     	; 0x1672 <oled_putstr_buffer+0xe>
		oled_putchar_buffer(*str++);
		
	oled_buffer_update();	
    167c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <oled_buffer_update>
}
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	08 95       	ret

00001686 <oled_goto_xy_buffer>:

void oled_goto_xy_buffer(uint8_t x,uint8_t y)
{
	uint16_t index = x + y*128;
    1686:	90 e8       	ldi	r25, 0x80	; 128
    1688:	69 9f       	mul	r22, r25
    168a:	b0 01       	movw	r22, r0
    168c:	11 24       	eor	r1, r1
    168e:	68 0f       	add	r22, r24
    1690:	71 1d       	adc	r23, r1
	current_buffer_file_pointer = index;
    1692:	70 93 6e 03 	sts	0x036E, r23
    1696:	60 93 6d 03 	sts	0x036D, r22
    169a:	08 95       	ret

0000169c <oled_clear_buffer>:
}

extern void oled_clear_buffer(void)
{
    169c:	e0 e0       	ldi	r30, 0x00	; 0
    169e:	f9 e1       	ldi	r31, 0x19	; 25
	uint16_t i;
	for (i = 0; i< 1024; i++)
	{
		buffer_start[i] = 0x00;
    16a0:	11 92       	st	Z+, r1
}

extern void oled_clear_buffer(void)
{
	uint16_t i;
	for (i = 0; i< 1024; i++)
    16a2:	e1 15       	cp	r30, r1
    16a4:	8d e1       	ldi	r24, 0x1D	; 29
    16a6:	f8 07       	cpc	r31, r24
    16a8:	d9 f7       	brne	.-10     	; 0x16a0 <oled_clear_buffer+0x4>
	{
		buffer_start[i] = 0x00;
	}
}
    16aa:	08 95       	ret

000016ac <oled_draw_circle>:

void oled_draw_circle(uint8_t x0, uint8_t y0, uint8_t r)
{
    16ac:	af 92       	push	r10
    16ae:	bf 92       	push	r11
    16b0:	cf 92       	push	r12
    16b2:	df 92       	push	r13
    16b4:	ef 92       	push	r14
    16b6:	ff 92       	push	r15
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	08 2f       	mov	r16, r24
    16c2:	f6 2e       	mov	r15, r22
    16c4:	c4 2f       	mov	r28, r20
	int8_t f = 1 - r;
    16c6:	11 e0       	ldi	r17, 0x01	; 1
    16c8:	14 1b       	sub	r17, r20
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    16ca:	a4 2e       	mov	r10, r20
    16cc:	a1 94       	neg	r10
    16ce:	aa 0c       	add	r10, r10
	int8_t x = 0;
	int8_t y = r;
    16d0:	d4 2f       	mov	r29, r20
	oled_draw_dot_buffer(x0, y0+r);
    16d2:	64 2f       	mov	r22, r20
    16d4:	6f 0d       	add	r22, r15
    16d6:	0e 94 b7 0a 	call	0x156e	; 0x156e <oled_draw_dot_buffer>
	oled_draw_dot_buffer(x0, y0-r);
    16da:	6f 2d       	mov	r22, r15
    16dc:	6c 1b       	sub	r22, r28
    16de:	80 2f       	mov	r24, r16
    16e0:	0e 94 b7 0a 	call	0x156e	; 0x156e <oled_draw_dot_buffer>
	oled_draw_dot_buffer(x0+r, y0);
    16e4:	6f 2d       	mov	r22, r15
    16e6:	8c 2f       	mov	r24, r28
    16e8:	80 0f       	add	r24, r16
    16ea:	0e 94 b7 0a 	call	0x156e	; 0x156e <oled_draw_dot_buffer>
	oled_draw_dot_buffer(x0-r, y0);
    16ee:	6f 2d       	mov	r22, r15
    16f0:	80 2f       	mov	r24, r16
    16f2:	8c 1b       	sub	r24, r28
    16f4:	0e 94 b7 0a 	call	0x156e	; 0x156e <oled_draw_dot_buffer>
	while (x<y) {
    16f8:	1c 16       	cp	r1, r28
    16fa:	0c f0       	brlt	.+2      	; 0x16fe <oled_draw_circle+0x52>
    16fc:	41 c0       	rjmp	.+130    	; 0x1780 <oled_draw_circle+0xd4>
    16fe:	0f 2e       	mov	r0, r31
    1700:	f3 e0       	ldi	r31, 0x03	; 3
    1702:	ef 2e       	mov	r14, r31
    1704:	f0 2d       	mov	r31, r0
void oled_draw_circle(uint8_t x0, uint8_t y0, uint8_t r)
{
	int8_t f = 1 - r;
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
    1706:	c0 e0       	ldi	r28, 0x00	; 0
	oled_draw_dot_buffer(x0, y0+r);
	oled_draw_dot_buffer(x0, y0-r);
	oled_draw_dot_buffer(x0+r, y0);
	oled_draw_dot_buffer(x0-r, y0);
	while (x<y) {
		if (f >= 0) {
    1708:	11 23       	and	r17, r17
    170a:	24 f0       	brlt	.+8      	; 0x1714 <oled_draw_circle+0x68>
			y--;
    170c:	d1 50       	subi	r29, 0x01	; 1
			ddF_y += 2;
    170e:	a3 94       	inc	r10
    1710:	a3 94       	inc	r10
			f += ddF_y;
    1712:	1a 0d       	add	r17, r10
		}
		x++;
    1714:	cf 5f       	subi	r28, 0xFF	; 255
		ddF_x += 2;
		f += ddF_x;
    1716:	1e 0d       	add	r17, r14
    1718:	b0 2e       	mov	r11, r16
    171a:	bc 0e       	add	r11, r28
		oled_draw_dot_buffer(x0 + x, y0 + y);
    171c:	cd 2e       	mov	r12, r29
    171e:	cf 0c       	add	r12, r15
    1720:	6c 2d       	mov	r22, r12
    1722:	8b 2d       	mov	r24, r11
    1724:	0e 94 b7 0a 	call	0x156e	; 0x156e <oled_draw_dot_buffer>
    1728:	d0 2e       	mov	r13, r16
    172a:	dc 1a       	sub	r13, r28
		oled_draw_dot_buffer(x0 - x, y0 + y);
    172c:	6c 2d       	mov	r22, r12
    172e:	8d 2d       	mov	r24, r13
    1730:	0e 94 b7 0a 	call	0x156e	; 0x156e <oled_draw_dot_buffer>
		oled_draw_dot_buffer(x0 + x, y0 - y);
    1734:	cf 2c       	mov	r12, r15
    1736:	cd 1a       	sub	r12, r29
    1738:	6c 2d       	mov	r22, r12
    173a:	8b 2d       	mov	r24, r11
    173c:	0e 94 b7 0a 	call	0x156e	; 0x156e <oled_draw_dot_buffer>
		oled_draw_dot_buffer(x0 - x, y0 - y);
    1740:	6c 2d       	mov	r22, r12
    1742:	8d 2d       	mov	r24, r13
    1744:	0e 94 b7 0a 	call	0x156e	; 0x156e <oled_draw_dot_buffer>
    1748:	dc 2e       	mov	r13, r28
    174a:	df 0c       	add	r13, r15
		oled_draw_dot_buffer(x0 + y, y0 + x);
    174c:	6d 2d       	mov	r22, r13
    174e:	bd 2e       	mov	r11, r29
    1750:	b0 0e       	add	r11, r16
    1752:	8b 2d       	mov	r24, r11
    1754:	0e 94 b7 0a 	call	0x156e	; 0x156e <oled_draw_dot_buffer>
		oled_draw_dot_buffer(x0 - y, y0 + x);
    1758:	6d 2d       	mov	r22, r13
    175a:	d0 2e       	mov	r13, r16
    175c:	dd 1a       	sub	r13, r29
    175e:	8d 2d       	mov	r24, r13
    1760:	0e 94 b7 0a 	call	0x156e	; 0x156e <oled_draw_dot_buffer>
    1764:	cf 2c       	mov	r12, r15
    1766:	cc 1a       	sub	r12, r28
		oled_draw_dot_buffer(x0 + y, y0 - x);
    1768:	6c 2d       	mov	r22, r12
    176a:	8b 2d       	mov	r24, r11
    176c:	0e 94 b7 0a 	call	0x156e	; 0x156e <oled_draw_dot_buffer>
		oled_draw_dot_buffer(x0 - y, y0 - x);
    1770:	6c 2d       	mov	r22, r12
    1772:	8d 2d       	mov	r24, r13
    1774:	0e 94 b7 0a 	call	0x156e	; 0x156e <oled_draw_dot_buffer>
    1778:	e3 94       	inc	r14
    177a:	e3 94       	inc	r14
	int8_t y = r;
	oled_draw_dot_buffer(x0, y0+r);
	oled_draw_dot_buffer(x0, y0-r);
	oled_draw_dot_buffer(x0+r, y0);
	oled_draw_dot_buffer(x0-r, y0);
	while (x<y) {
    177c:	cd 17       	cp	r28, r29
    177e:	24 f2       	brlt	.-120    	; 0x1708 <oled_draw_circle+0x5c>
		oled_draw_dot_buffer(x0 + y, y0 + x);
		oled_draw_dot_buffer(x0 - y, y0 + x);
		oled_draw_dot_buffer(x0 + y, y0 - x);
		oled_draw_dot_buffer(x0 - y, y0 - x);
	}
	oled_buffer_update();
    1780:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <oled_buffer_update>
}
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	ff 90       	pop	r15
    178e:	ef 90       	pop	r14
    1790:	df 90       	pop	r13
    1792:	cf 90       	pop	r12
    1794:	bf 90       	pop	r11
    1796:	af 90       	pop	r10
    1798:	08 95       	ret

0000179a <oled_draw_rect>:

void oled_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
    179a:	bf 92       	push	r11
    179c:	cf 92       	push	r12
    179e:	df 92       	push	r13
    17a0:	ef 92       	push	r14
    17a2:	ff 92       	push	r15
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	d8 2e       	mov	r13, r24
    17ae:	c6 2f       	mov	r28, r22
    17b0:	c4 2e       	mov	r12, r20
    17b2:	b2 2e       	mov	r11, r18
	int16_t i;
	for (i=x; i<x+w; i++) {
    17b4:	08 2f       	mov	r16, r24
    17b6:	10 e0       	ldi	r17, 0x00	; 0
    17b8:	78 01       	movw	r14, r16
    17ba:	e4 0e       	add	r14, r20
    17bc:	f1 1c       	adc	r15, r1
    17be:	0e 15       	cp	r16, r14
    17c0:	1f 05       	cpc	r17, r15
    17c2:	84 f4       	brge	.+32     	; 0x17e4 <oled_draw_rect+0x4a>
		oled_draw_dot_buffer(i, y);
		oled_draw_dot_buffer(i, y+h-1);
    17c4:	df ef       	ldi	r29, 0xFF	; 255
    17c6:	d2 0f       	add	r29, r18
    17c8:	d6 0f       	add	r29, r22

void oled_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
		oled_draw_dot_buffer(i, y);
    17ca:	6c 2f       	mov	r22, r28
    17cc:	80 2f       	mov	r24, r16
    17ce:	0e 94 b7 0a 	call	0x156e	; 0x156e <oled_draw_dot_buffer>
		oled_draw_dot_buffer(i, y+h-1);
    17d2:	6d 2f       	mov	r22, r29
    17d4:	80 2f       	mov	r24, r16
    17d6:	0e 94 b7 0a 	call	0x156e	; 0x156e <oled_draw_dot_buffer>
}

void oled_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    17da:	0f 5f       	subi	r16, 0xFF	; 255
    17dc:	1f 4f       	sbci	r17, 0xFF	; 255
    17de:	0e 15       	cp	r16, r14
    17e0:	1f 05       	cpc	r17, r15
    17e2:	9c f3       	brlt	.-26     	; 0x17ca <oled_draw_rect+0x30>
		oled_draw_dot_buffer(i, y);
		oled_draw_dot_buffer(i, y+h-1);
	}
	for (i=y; i<y+h; i++) {
    17e4:	d0 e0       	ldi	r29, 0x00	; 0
    17e6:	8e 01       	movw	r16, r28
    17e8:	0b 0d       	add	r16, r11
    17ea:	11 1d       	adc	r17, r1
    17ec:	c0 17       	cp	r28, r16
    17ee:	d1 07       	cpc	r29, r17
    17f0:	84 f4       	brge	.+32     	; 0x1812 <oled_draw_rect+0x78>
		oled_draw_dot_buffer(x, i);
		oled_draw_dot_buffer(x+w-1, i);
    17f2:	ff 24       	eor	r15, r15
    17f4:	fa 94       	dec	r15
    17f6:	fc 0c       	add	r15, r12
    17f8:	fd 0c       	add	r15, r13
	for (i=x; i<x+w; i++) {
		oled_draw_dot_buffer(i, y);
		oled_draw_dot_buffer(i, y+h-1);
	}
	for (i=y; i<y+h; i++) {
		oled_draw_dot_buffer(x, i);
    17fa:	6c 2f       	mov	r22, r28
    17fc:	8d 2d       	mov	r24, r13
    17fe:	0e 94 b7 0a 	call	0x156e	; 0x156e <oled_draw_dot_buffer>
		oled_draw_dot_buffer(x+w-1, i);
    1802:	6c 2f       	mov	r22, r28
    1804:	8f 2d       	mov	r24, r15
    1806:	0e 94 b7 0a 	call	0x156e	; 0x156e <oled_draw_dot_buffer>
	int16_t i;
	for (i=x; i<x+w; i++) {
		oled_draw_dot_buffer(i, y);
		oled_draw_dot_buffer(i, y+h-1);
	}
	for (i=y; i<y+h; i++) {
    180a:	21 96       	adiw	r28, 0x01	; 1
    180c:	c0 17       	cp	r28, r16
    180e:	d1 07       	cpc	r29, r17
    1810:	a4 f3       	brlt	.-24     	; 0x17fa <oled_draw_rect+0x60>
		oled_draw_dot_buffer(x, i);
		oled_draw_dot_buffer(x+w-1, i);
	}
	oled_buffer_update();
    1812:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <oled_buffer_update>
}
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	ff 90       	pop	r15
    1820:	ef 90       	pop	r14
    1822:	df 90       	pop	r13
    1824:	cf 90       	pop	r12
    1826:	bf 90       	pop	r11
    1828:	08 95       	ret

0000182a <InitMusic>:

void InitMusic()
{
	// Configure OC1B pin as output

	DDRE |= _BV(PE2); //OC1B as output
    182a:	32 9a       	sbi	0x06, 2	; 6

	// timer1 configuration (for PWM)
	TCCR1A |= _BV(COM1B1);  // Clear OC1A/OC1B on compare match
    182c:	8f b5       	in	r24, 0x2f	; 47
    182e:	80 62       	ori	r24, 0x20	; 32
    1830:	8f bd       	out	0x2f, r24	; 47

	
	TCCR1B |= _BV(WGM13) 	//mode 8, PWM, Phase and Frequency Correct (TOP value is ICR1)
    1832:	8e b5       	in	r24, 0x2e	; 46
    1834:	82 61       	ori	r24, 0x12	; 18
    1836:	8e bd       	out	0x2e, r24	; 46
    1838:	08 95       	ret

0000183a <PlayMusic>:
	Plays music.
*/

void PlayMusic( const int* pMusicNotes /** Pointer to table containing music data */,
				uint8_t tempo /** paying tempo from 0 to 100. Higher value = slower playback*/ )
{
    183a:	ef 92       	push	r14
    183c:	ff 92       	push	r15
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	ec 01       	movw	r28, r24
	int duration;
	int note;
	int i;
	uint16_t delay = tempo * 1000;
    1848:	88 ee       	ldi	r24, 0xE8	; 232
    184a:	93 e0       	ldi	r25, 0x03	; 3
    184c:	68 9f       	mul	r22, r24
    184e:	d0 01       	movw	r26, r0
    1850:	69 9f       	mul	r22, r25
    1852:	b0 0d       	add	r27, r0
    1854:	11 24       	eor	r1, r1
			OCR1B = 0;
		}
		else
		{
			//not a pause, generate tone
			OCR1B = DEFAULT_VOLUME;
    1856:	04 e6       	ldi	r16, 0x64	; 100
    1858:	10 e0       	ldi	r17, 0x00	; 0
			ICR1H = (note >> 8);
			ICR1L = note;
		}

		//wait duration
		for(i=0;i<32-duration;i++)
    185a:	60 e2       	ldi	r22, 0x20	; 32
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	e1 2c       	mov	r14, r1
    1860:	f1 2c       	mov	r15, r1
	int duration;
	int note;
	int i;
	uint16_t delay = tempo * 1000;

	while( *pMusicNotes )
    1862:	23 c0       	rjmp	.+70     	; 0x18aa <PlayMusic+0x70>
	{
		note = *pMusicNotes;
		pMusicNotes++;
		note /= 2;
    1864:	c9 01       	movw	r24, r18
    1866:	99 23       	and	r25, r25
    1868:	0c f4       	brge	.+2      	; 0x186c <PlayMusic+0x32>
    186a:	01 96       	adiw	r24, 0x01	; 1
    186c:	95 95       	asr	r25
    186e:	87 95       	ror	r24
		duration = *pMusicNotes;
    1870:	2a 81       	ldd	r18, Y+2	; 0x02
    1872:	3b 81       	ldd	r19, Y+3	; 0x03
    1874:	24 96       	adiw	r28, 0x04	; 4
		pMusicNotes++;

		if( p == note )
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	91 05       	cpc	r25, r1
    187a:	19 f4       	brne	.+6      	; 0x1882 <PlayMusic+0x48>
		{
			//pause, do not generate any sound
			OCR1B = 0;
    187c:	19 bc       	out	0x29, r1	; 41
    187e:	18 bc       	out	0x28, r1	; 40
    1880:	04 c0       	rjmp	.+8      	; 0x188a <PlayMusic+0x50>
		}
		else
		{
			//not a pause, generate tone
			OCR1B = DEFAULT_VOLUME;
    1882:	19 bd       	out	0x29, r17	; 41
    1884:	08 bd       	out	0x28, r16	; 40

			//set frequency
			ICR1H = (note >> 8);
    1886:	95 bd       	out	0x25, r25	; 37
			ICR1L = note;
    1888:	84 bd       	out	0x24, r24	; 36
		}

		//wait duration
		for(i=0;i<32-duration;i++)
    188a:	ab 01       	movw	r20, r22
    188c:	42 1b       	sub	r20, r18
    188e:	53 0b       	sbc	r21, r19
    1890:	14 16       	cp	r1, r20
    1892:	15 06       	cpc	r1, r21
    1894:	54 f4       	brge	.+20     	; 0x18aa <PlayMusic+0x70>
    1896:	2e 2d       	mov	r18, r14
    1898:	3f 2d       	mov	r19, r15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    189a:	fd 01       	movw	r30, r26
    189c:	31 97       	sbiw	r30, 0x01	; 1
    189e:	f1 f7       	brne	.-4      	; 0x189c <PlayMusic+0x62>
    18a0:	2f 5f       	subi	r18, 0xFF	; 255
    18a2:	3f 4f       	sbci	r19, 0xFF	; 255
    18a4:	24 17       	cp	r18, r20
    18a6:	35 07       	cpc	r19, r21
    18a8:	c1 f7       	brne	.-16     	; 0x189a <PlayMusic+0x60>
	int duration;
	int note;
	int i;
	uint16_t delay = tempo * 1000;

	while( *pMusicNotes )
    18aa:	28 81       	ld	r18, Y
    18ac:	39 81       	ldd	r19, Y+1	; 0x01
    18ae:	21 15       	cp	r18, r1
    18b0:	31 05       	cpc	r19, r1
    18b2:	c1 f6       	brne	.-80     	; 0x1864 <PlayMusic+0x2a>

	}
	

	//turn off any sound
	OCR1B = 0;
    18b4:	19 bc       	out	0x29, r1	; 41
    18b6:	18 bc       	out	0x28, r1	; 40
}
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	1f 91       	pop	r17
    18be:	0f 91       	pop	r16
    18c0:	ff 90       	pop	r15
    18c2:	ef 90       	pop	r14
    18c4:	08 95       	ret

000018c6 <MusicDemo>:
	
extern void MusicDemo()
{
	PlayMusic( furelise, 20 );
    18c6:	64 e1       	ldi	r22, 0x14	; 20
    18c8:	82 eb       	ldi	r24, 0xB2	; 178
    18ca:	92 e0       	ldi	r25, 0x02	; 2
    18cc:	0e 94 1d 0c 	call	0x183a	; 0x183a <PlayMusic>
    18d0:	2f e3       	ldi	r18, 0x3F	; 63
    18d2:	8d e0       	ldi	r24, 0x0D	; 13
    18d4:	93 e0       	ldi	r25, 0x03	; 3
    18d6:	21 50       	subi	r18, 0x01	; 1
    18d8:	80 40       	sbci	r24, 0x00	; 0
    18da:	90 40       	sbci	r25, 0x00	; 0
    18dc:	e1 f7       	brne	.-8      	; 0x18d6 <MusicDemo+0x10>
    18de:	00 c0       	rjmp	.+0      	; 0x18e0 <MusicDemo+0x1a>
    18e0:	00 00       	nop
    18e2:	08 95       	ret

000018e4 <usart_init>:
/********************************************************************************
                                usart Related
********************************************************************************/
void usart_init( uint16_t ubrr) {
	// Set baud rate
	UBRR1H = (uint8_t)(ubrr>>8);
    18e4:	9c bf       	out	0x3c, r25	; 60
	UBRR1L = (uint8_t)ubrr;
    18e6:	80 b9       	out	0x00, r24	; 0
	// Enable receiver and transmitter
	UCSR1B |= (1<<RXEN1)|(1<<TXEN1) | (1<<RXCIE1);			//RX enable, TX enable in Interrupt mode!!!
    18e8:	81 b1       	in	r24, 0x01	; 1
    18ea:	88 69       	ori	r24, 0x98	; 152
    18ec:	81 b9       	out	0x01, r24	; 1
	// Set frame format: 8data, 1stop bit	
	UCSR1C |= (1<<URSEL1)|(3<<UCSZ10);						
    18ee:	8c b7       	in	r24, 0x3c	; 60
    18f0:	86 68       	ori	r24, 0x86	; 134
    18f2:	8c bf       	out	0x3c, r24	; 60
    18f4:	08 95       	ret

000018f6 <usart_putchar>:
}

void usart_putchar(char data) {
	// Wait for empty transmit buffer
	while ( !(UCSR1A & (_BV(UDRE1))) );
    18f6:	15 9b       	sbis	0x02, 5	; 2
    18f8:	fe cf       	rjmp	.-4      	; 0x18f6 <usart_putchar>
	// Start transmission
	UDR1 = data;
    18fa:	83 b9       	out	0x03, r24	; 3
    18fc:	08 95       	ret

000018fe <usart_putchar_printf>:
        usart_putchar(*s);
        s++;
    }
}

int usart_putchar_printf(char var, FILE *stream) {
    18fe:	cf 93       	push	r28
    1900:	c8 2f       	mov	r28, r24
    // translate \n to \r for br@y++ terminal
    if (var == '\n') usart_putchar('\r');
    1902:	8a 30       	cpi	r24, 0x0A	; 10
    1904:	19 f4       	brne	.+6      	; 0x190c <usart_putchar_printf+0xe>
    1906:	8d e0       	ldi	r24, 0x0D	; 13
    1908:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <usart_putchar>
    usart_putchar(var);
    190c:	8c 2f       	mov	r24, r28
    190e:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <usart_putchar>
    return 0;
}
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	cf 91       	pop	r28
    1918:	08 95       	ret

0000191a <__divmodhi4>:
    191a:	97 fb       	bst	r25, 7
    191c:	07 2e       	mov	r0, r23
    191e:	16 f4       	brtc	.+4      	; 0x1924 <__divmodhi4+0xa>
    1920:	00 94       	com	r0
    1922:	07 d0       	rcall	.+14     	; 0x1932 <__divmodhi4_neg1>
    1924:	77 fd       	sbrc	r23, 7
    1926:	09 d0       	rcall	.+18     	; 0x193a <__divmodhi4_neg2>
    1928:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__udivmodhi4>
    192c:	07 fc       	sbrc	r0, 7
    192e:	05 d0       	rcall	.+10     	; 0x193a <__divmodhi4_neg2>
    1930:	3e f4       	brtc	.+14     	; 0x1940 <__divmodhi4_exit>

00001932 <__divmodhi4_neg1>:
    1932:	90 95       	com	r25
    1934:	81 95       	neg	r24
    1936:	9f 4f       	sbci	r25, 0xFF	; 255
    1938:	08 95       	ret

0000193a <__divmodhi4_neg2>:
    193a:	70 95       	com	r23
    193c:	61 95       	neg	r22
    193e:	7f 4f       	sbci	r23, 0xFF	; 255

00001940 <__divmodhi4_exit>:
    1940:	08 95       	ret

00001942 <__umulhisi3>:
    1942:	a2 9f       	mul	r26, r18
    1944:	b0 01       	movw	r22, r0
    1946:	b3 9f       	mul	r27, r19
    1948:	c0 01       	movw	r24, r0
    194a:	a3 9f       	mul	r26, r19
    194c:	70 0d       	add	r23, r0
    194e:	81 1d       	adc	r24, r1
    1950:	11 24       	eor	r1, r1
    1952:	91 1d       	adc	r25, r1
    1954:	b2 9f       	mul	r27, r18
    1956:	70 0d       	add	r23, r0
    1958:	81 1d       	adc	r24, r1
    195a:	11 24       	eor	r1, r1
    195c:	91 1d       	adc	r25, r1
    195e:	08 95       	ret

00001960 <__udivmodhi4>:
    1960:	aa 1b       	sub	r26, r26
    1962:	bb 1b       	sub	r27, r27
    1964:	51 e1       	ldi	r21, 0x11	; 17
    1966:	07 c0       	rjmp	.+14     	; 0x1976 <__udivmodhi4_ep>

00001968 <__udivmodhi4_loop>:
    1968:	aa 1f       	adc	r26, r26
    196a:	bb 1f       	adc	r27, r27
    196c:	a6 17       	cp	r26, r22
    196e:	b7 07       	cpc	r27, r23
    1970:	10 f0       	brcs	.+4      	; 0x1976 <__udivmodhi4_ep>
    1972:	a6 1b       	sub	r26, r22
    1974:	b7 0b       	sbc	r27, r23

00001976 <__udivmodhi4_ep>:
    1976:	88 1f       	adc	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	5a 95       	dec	r21
    197c:	a9 f7       	brne	.-22     	; 0x1968 <__udivmodhi4_loop>
    197e:	80 95       	com	r24
    1980:	90 95       	com	r25
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	08 95       	ret

00001988 <strcmp>:
    1988:	fb 01       	movw	r30, r22
    198a:	dc 01       	movw	r26, r24
    198c:	8d 91       	ld	r24, X+
    198e:	01 90       	ld	r0, Z+
    1990:	80 19       	sub	r24, r0
    1992:	01 10       	cpse	r0, r1
    1994:	d9 f3       	breq	.-10     	; 0x198c <strcmp+0x4>
    1996:	99 0b       	sbc	r25, r25
    1998:	08 95       	ret

0000199a <strncmp>:
    199a:	fb 01       	movw	r30, r22
    199c:	dc 01       	movw	r26, r24
    199e:	41 50       	subi	r20, 0x01	; 1
    19a0:	50 40       	sbci	r21, 0x00	; 0
    19a2:	30 f0       	brcs	.+12     	; 0x19b0 <strncmp+0x16>
    19a4:	8d 91       	ld	r24, X+
    19a6:	01 90       	ld	r0, Z+
    19a8:	80 19       	sub	r24, r0
    19aa:	19 f4       	brne	.+6      	; 0x19b2 <strncmp+0x18>
    19ac:	00 20       	and	r0, r0
    19ae:	b9 f7       	brne	.-18     	; 0x199e <strncmp+0x4>
    19b0:	88 1b       	sub	r24, r24
    19b2:	99 0b       	sbc	r25, r25
    19b4:	08 95       	ret

000019b6 <fwrite>:
    19b6:	a0 e0       	ldi	r26, 0x00	; 0
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e1 ee       	ldi	r30, 0xE1	; 225
    19bc:	fc e0       	ldi	r31, 0x0C	; 12
    19be:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__prologue_saves__+0xc>
    19c2:	6b 01       	movw	r12, r22
    19c4:	4a 01       	movw	r8, r20
    19c6:	79 01       	movw	r14, r18
    19c8:	d9 01       	movw	r26, r18
    19ca:	13 96       	adiw	r26, 0x03	; 3
    19cc:	2c 91       	ld	r18, X
    19ce:	21 ff       	sbrs	r18, 1
    19d0:	1d c0       	rjmp	.+58     	; 0x1a0c <fwrite+0x56>
    19d2:	c0 e0       	ldi	r28, 0x00	; 0
    19d4:	d0 e0       	ldi	r29, 0x00	; 0
    19d6:	c8 15       	cp	r28, r8
    19d8:	d9 05       	cpc	r29, r9
    19da:	d9 f0       	breq	.+54     	; 0x1a12 <fwrite+0x5c>
    19dc:	8c 01       	movw	r16, r24
    19de:	5c 01       	movw	r10, r24
    19e0:	ac 0c       	add	r10, r12
    19e2:	bd 1c       	adc	r11, r13
    19e4:	c8 01       	movw	r24, r16
    19e6:	0a 15       	cp	r16, r10
    19e8:	1b 05       	cpc	r17, r11
    19ea:	71 f0       	breq	.+28     	; 0x1a08 <fwrite+0x52>
    19ec:	0f 5f       	subi	r16, 0xFF	; 255
    19ee:	1f 4f       	sbci	r17, 0xFF	; 255
    19f0:	d7 01       	movw	r26, r14
    19f2:	18 96       	adiw	r26, 0x08	; 8
    19f4:	ed 91       	ld	r30, X+
    19f6:	fc 91       	ld	r31, X
    19f8:	19 97       	sbiw	r26, 0x09	; 9
    19fa:	b7 01       	movw	r22, r14
    19fc:	dc 01       	movw	r26, r24
    19fe:	8c 91       	ld	r24, X
    1a00:	09 95       	icall
    1a02:	89 2b       	or	r24, r25
    1a04:	79 f3       	breq	.-34     	; 0x19e4 <fwrite+0x2e>
    1a06:	05 c0       	rjmp	.+10     	; 0x1a12 <fwrite+0x5c>
    1a08:	21 96       	adiw	r28, 0x01	; 1
    1a0a:	e5 cf       	rjmp	.-54     	; 0x19d6 <fwrite+0x20>
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	01 c0       	rjmp	.+2      	; 0x1a14 <fwrite+0x5e>
    1a12:	ce 01       	movw	r24, r28
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	ec e0       	ldi	r30, 0x0C	; 12
    1a1a:	0c 94 25 13 	jmp	0x264a	; 0x264a <__epilogue_restores__+0xc>

00001a1e <printf>:
    1a1e:	a0 e0       	ldi	r26, 0x00	; 0
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e5 e1       	ldi	r30, 0x15	; 21
    1a24:	fd e0       	ldi	r31, 0x0D	; 13
    1a26:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__prologue_saves__+0x20>
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	35 96       	adiw	r30, 0x05	; 5
    1a2e:	61 91       	ld	r22, Z+
    1a30:	71 91       	ld	r23, Z+
    1a32:	af 01       	movw	r20, r30
    1a34:	80 91 87 03 	lds	r24, 0x0387
    1a38:	90 91 88 03 	lds	r25, 0x0388
    1a3c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <vfprintf>
    1a40:	e2 e0       	ldi	r30, 0x02	; 2
    1a42:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__epilogue_restores__+0x20>

00001a46 <puts>:
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	e0 91 87 03 	lds	r30, 0x0387
    1a52:	f0 91 88 03 	lds	r31, 0x0388
    1a56:	23 81       	ldd	r18, Z+3	; 0x03
    1a58:	21 ff       	sbrs	r18, 1
    1a5a:	1b c0       	rjmp	.+54     	; 0x1a92 <puts+0x4c>
    1a5c:	ec 01       	movw	r28, r24
    1a5e:	00 e0       	ldi	r16, 0x00	; 0
    1a60:	10 e0       	ldi	r17, 0x00	; 0
    1a62:	89 91       	ld	r24, Y+
    1a64:	60 91 87 03 	lds	r22, 0x0387
    1a68:	70 91 88 03 	lds	r23, 0x0388
    1a6c:	db 01       	movw	r26, r22
    1a6e:	18 96       	adiw	r26, 0x08	; 8
    1a70:	ed 91       	ld	r30, X+
    1a72:	fc 91       	ld	r31, X
    1a74:	19 97       	sbiw	r26, 0x09	; 9
    1a76:	88 23       	and	r24, r24
    1a78:	31 f0       	breq	.+12     	; 0x1a86 <puts+0x40>
    1a7a:	09 95       	icall
    1a7c:	89 2b       	or	r24, r25
    1a7e:	89 f3       	breq	.-30     	; 0x1a62 <puts+0x1c>
    1a80:	0f ef       	ldi	r16, 0xFF	; 255
    1a82:	1f ef       	ldi	r17, 0xFF	; 255
    1a84:	ee cf       	rjmp	.-36     	; 0x1a62 <puts+0x1c>
    1a86:	8a e0       	ldi	r24, 0x0A	; 10
    1a88:	09 95       	icall
    1a8a:	89 2b       	or	r24, r25
    1a8c:	11 f4       	brne	.+4      	; 0x1a92 <puts+0x4c>
    1a8e:	c8 01       	movw	r24, r16
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <puts+0x50>
    1a92:	8f ef       	ldi	r24, 0xFF	; 255
    1a94:	9f ef       	ldi	r25, 0xFF	; 255
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	1f 91       	pop	r17
    1a9c:	0f 91       	pop	r16
    1a9e:	08 95       	ret

00001aa0 <sscanf>:
    1aa0:	ae e0       	ldi	r26, 0x0E	; 14
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e6 e5       	ldi	r30, 0x56	; 86
    1aa6:	fd e0       	ldi	r31, 0x0D	; 13
    1aa8:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__prologue_saves__+0x20>
    1aac:	85 e0       	ldi	r24, 0x05	; 5
    1aae:	8c 83       	std	Y+4, r24	; 0x04
    1ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab4:	9a 83       	std	Y+2, r25	; 0x02
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	ae 01       	movw	r20, r28
    1aba:	49 5e       	subi	r20, 0xE9	; 233
    1abc:	5f 4f       	sbci	r21, 0xFF	; 255
    1abe:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	01 96       	adiw	r24, 0x01	; 1
    1ac6:	0e 94 b9 10 	call	0x2172	; 0x2172 <vfscanf>
    1aca:	2e 96       	adiw	r28, 0x0e	; 14
    1acc:	e2 e0       	ldi	r30, 0x02	; 2
    1ace:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__epilogue_restores__+0x20>

00001ad2 <vfprintf>:
    1ad2:	ac e0       	ldi	r26, 0x0C	; 12
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	ef e6       	ldi	r30, 0x6F	; 111
    1ad8:	fd e0       	ldi	r31, 0x0D	; 13
    1ada:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__prologue_saves__>
    1ade:	7c 01       	movw	r14, r24
    1ae0:	6b 01       	movw	r12, r22
    1ae2:	8a 01       	movw	r16, r20
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	17 82       	std	Z+7, r1	; 0x07
    1ae8:	16 82       	std	Z+6, r1	; 0x06
    1aea:	83 81       	ldd	r24, Z+3	; 0x03
    1aec:	81 ff       	sbrs	r24, 1
    1aee:	bd c1       	rjmp	.+890    	; 0x1e6a <vfprintf+0x398>
    1af0:	ce 01       	movw	r24, r28
    1af2:	01 96       	adiw	r24, 0x01	; 1
    1af4:	4c 01       	movw	r8, r24
    1af6:	f7 01       	movw	r30, r14
    1af8:	93 81       	ldd	r25, Z+3	; 0x03
    1afa:	f6 01       	movw	r30, r12
    1afc:	93 fd       	sbrc	r25, 3
    1afe:	85 91       	lpm	r24, Z+
    1b00:	93 ff       	sbrs	r25, 3
    1b02:	81 91       	ld	r24, Z+
    1b04:	6f 01       	movw	r12, r30
    1b06:	88 23       	and	r24, r24
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <vfprintf+0x3a>
    1b0a:	ab c1       	rjmp	.+854    	; 0x1e62 <vfprintf+0x390>
    1b0c:	85 32       	cpi	r24, 0x25	; 37
    1b0e:	39 f4       	brne	.+14     	; 0x1b1e <vfprintf+0x4c>
    1b10:	93 fd       	sbrc	r25, 3
    1b12:	85 91       	lpm	r24, Z+
    1b14:	93 ff       	sbrs	r25, 3
    1b16:	81 91       	ld	r24, Z+
    1b18:	6f 01       	movw	r12, r30
    1b1a:	85 32       	cpi	r24, 0x25	; 37
    1b1c:	29 f4       	brne	.+10     	; 0x1b28 <vfprintf+0x56>
    1b1e:	b7 01       	movw	r22, r14
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	0e 94 57 12 	call	0x24ae	; 0x24ae <fputc>
    1b26:	e7 cf       	rjmp	.-50     	; 0x1af6 <vfprintf+0x24>
    1b28:	51 2c       	mov	r5, r1
    1b2a:	31 2c       	mov	r3, r1
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	20 32       	cpi	r18, 0x20	; 32
    1b30:	a0 f4       	brcc	.+40     	; 0x1b5a <vfprintf+0x88>
    1b32:	8b 32       	cpi	r24, 0x2B	; 43
    1b34:	69 f0       	breq	.+26     	; 0x1b50 <vfprintf+0x7e>
    1b36:	30 f4       	brcc	.+12     	; 0x1b44 <vfprintf+0x72>
    1b38:	80 32       	cpi	r24, 0x20	; 32
    1b3a:	59 f0       	breq	.+22     	; 0x1b52 <vfprintf+0x80>
    1b3c:	83 32       	cpi	r24, 0x23	; 35
    1b3e:	69 f4       	brne	.+26     	; 0x1b5a <vfprintf+0x88>
    1b40:	20 61       	ori	r18, 0x10	; 16
    1b42:	2c c0       	rjmp	.+88     	; 0x1b9c <vfprintf+0xca>
    1b44:	8d 32       	cpi	r24, 0x2D	; 45
    1b46:	39 f0       	breq	.+14     	; 0x1b56 <vfprintf+0x84>
    1b48:	80 33       	cpi	r24, 0x30	; 48
    1b4a:	39 f4       	brne	.+14     	; 0x1b5a <vfprintf+0x88>
    1b4c:	21 60       	ori	r18, 0x01	; 1
    1b4e:	26 c0       	rjmp	.+76     	; 0x1b9c <vfprintf+0xca>
    1b50:	22 60       	ori	r18, 0x02	; 2
    1b52:	24 60       	ori	r18, 0x04	; 4
    1b54:	23 c0       	rjmp	.+70     	; 0x1b9c <vfprintf+0xca>
    1b56:	28 60       	ori	r18, 0x08	; 8
    1b58:	21 c0       	rjmp	.+66     	; 0x1b9c <vfprintf+0xca>
    1b5a:	27 fd       	sbrc	r18, 7
    1b5c:	27 c0       	rjmp	.+78     	; 0x1bac <vfprintf+0xda>
    1b5e:	30 ed       	ldi	r19, 0xD0	; 208
    1b60:	38 0f       	add	r19, r24
    1b62:	3a 30       	cpi	r19, 0x0A	; 10
    1b64:	78 f4       	brcc	.+30     	; 0x1b84 <vfprintf+0xb2>
    1b66:	26 ff       	sbrs	r18, 6
    1b68:	06 c0       	rjmp	.+12     	; 0x1b76 <vfprintf+0xa4>
    1b6a:	fa e0       	ldi	r31, 0x0A	; 10
    1b6c:	5f 9e       	mul	r5, r31
    1b6e:	30 0d       	add	r19, r0
    1b70:	11 24       	eor	r1, r1
    1b72:	53 2e       	mov	r5, r19
    1b74:	13 c0       	rjmp	.+38     	; 0x1b9c <vfprintf+0xca>
    1b76:	8a e0       	ldi	r24, 0x0A	; 10
    1b78:	38 9e       	mul	r3, r24
    1b7a:	30 0d       	add	r19, r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	33 2e       	mov	r3, r19
    1b80:	20 62       	ori	r18, 0x20	; 32
    1b82:	0c c0       	rjmp	.+24     	; 0x1b9c <vfprintf+0xca>
    1b84:	8e 32       	cpi	r24, 0x2E	; 46
    1b86:	21 f4       	brne	.+8      	; 0x1b90 <vfprintf+0xbe>
    1b88:	26 fd       	sbrc	r18, 6
    1b8a:	6b c1       	rjmp	.+726    	; 0x1e62 <vfprintf+0x390>
    1b8c:	20 64       	ori	r18, 0x40	; 64
    1b8e:	06 c0       	rjmp	.+12     	; 0x1b9c <vfprintf+0xca>
    1b90:	8c 36       	cpi	r24, 0x6C	; 108
    1b92:	11 f4       	brne	.+4      	; 0x1b98 <vfprintf+0xc6>
    1b94:	20 68       	ori	r18, 0x80	; 128
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <vfprintf+0xca>
    1b98:	88 36       	cpi	r24, 0x68	; 104
    1b9a:	41 f4       	brne	.+16     	; 0x1bac <vfprintf+0xda>
    1b9c:	f6 01       	movw	r30, r12
    1b9e:	93 fd       	sbrc	r25, 3
    1ba0:	85 91       	lpm	r24, Z+
    1ba2:	93 ff       	sbrs	r25, 3
    1ba4:	81 91       	ld	r24, Z+
    1ba6:	6f 01       	movw	r12, r30
    1ba8:	81 11       	cpse	r24, r1
    1baa:	c1 cf       	rjmp	.-126    	; 0x1b2e <vfprintf+0x5c>
    1bac:	98 2f       	mov	r25, r24
    1bae:	9f 7d       	andi	r25, 0xDF	; 223
    1bb0:	95 54       	subi	r25, 0x45	; 69
    1bb2:	93 30       	cpi	r25, 0x03	; 3
    1bb4:	28 f4       	brcc	.+10     	; 0x1bc0 <vfprintf+0xee>
    1bb6:	0c 5f       	subi	r16, 0xFC	; 252
    1bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bba:	ff e3       	ldi	r31, 0x3F	; 63
    1bbc:	f9 83       	std	Y+1, r31	; 0x01
    1bbe:	0d c0       	rjmp	.+26     	; 0x1bda <vfprintf+0x108>
    1bc0:	83 36       	cpi	r24, 0x63	; 99
    1bc2:	31 f0       	breq	.+12     	; 0x1bd0 <vfprintf+0xfe>
    1bc4:	83 37       	cpi	r24, 0x73	; 115
    1bc6:	71 f0       	breq	.+28     	; 0x1be4 <vfprintf+0x112>
    1bc8:	83 35       	cpi	r24, 0x53	; 83
    1bca:	09 f0       	breq	.+2      	; 0x1bce <vfprintf+0xfc>
    1bcc:	5b c0       	rjmp	.+182    	; 0x1c84 <vfprintf+0x1b2>
    1bce:	22 c0       	rjmp	.+68     	; 0x1c14 <vfprintf+0x142>
    1bd0:	f8 01       	movw	r30, r16
    1bd2:	80 81       	ld	r24, Z
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	0e 5f       	subi	r16, 0xFE	; 254
    1bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bda:	44 24       	eor	r4, r4
    1bdc:	43 94       	inc	r4
    1bde:	51 2c       	mov	r5, r1
    1be0:	54 01       	movw	r10, r8
    1be2:	15 c0       	rjmp	.+42     	; 0x1c0e <vfprintf+0x13c>
    1be4:	38 01       	movw	r6, r16
    1be6:	f2 e0       	ldi	r31, 0x02	; 2
    1be8:	6f 0e       	add	r6, r31
    1bea:	71 1c       	adc	r7, r1
    1bec:	f8 01       	movw	r30, r16
    1bee:	a0 80       	ld	r10, Z
    1bf0:	b1 80       	ldd	r11, Z+1	; 0x01
    1bf2:	26 ff       	sbrs	r18, 6
    1bf4:	03 c0       	rjmp	.+6      	; 0x1bfc <vfprintf+0x12a>
    1bf6:	65 2d       	mov	r22, r5
    1bf8:	70 e0       	ldi	r23, 0x00	; 0
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <vfprintf+0x12e>
    1bfc:	6f ef       	ldi	r22, 0xFF	; 255
    1bfe:	7f ef       	ldi	r23, 0xFF	; 255
    1c00:	c5 01       	movw	r24, r10
    1c02:	2c 87       	std	Y+12, r18	; 0x0c
    1c04:	0e 94 0e 12 	call	0x241c	; 0x241c <strnlen>
    1c08:	2c 01       	movw	r4, r24
    1c0a:	83 01       	movw	r16, r6
    1c0c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c0e:	2f 77       	andi	r18, 0x7F	; 127
    1c10:	22 2e       	mov	r2, r18
    1c12:	17 c0       	rjmp	.+46     	; 0x1c42 <vfprintf+0x170>
    1c14:	38 01       	movw	r6, r16
    1c16:	f2 e0       	ldi	r31, 0x02	; 2
    1c18:	6f 0e       	add	r6, r31
    1c1a:	71 1c       	adc	r7, r1
    1c1c:	f8 01       	movw	r30, r16
    1c1e:	a0 80       	ld	r10, Z
    1c20:	b1 80       	ldd	r11, Z+1	; 0x01
    1c22:	26 ff       	sbrs	r18, 6
    1c24:	03 c0       	rjmp	.+6      	; 0x1c2c <vfprintf+0x15a>
    1c26:	65 2d       	mov	r22, r5
    1c28:	70 e0       	ldi	r23, 0x00	; 0
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <vfprintf+0x15e>
    1c2c:	6f ef       	ldi	r22, 0xFF	; 255
    1c2e:	7f ef       	ldi	r23, 0xFF	; 255
    1c30:	c5 01       	movw	r24, r10
    1c32:	2c 87       	std	Y+12, r18	; 0x0c
    1c34:	0e 94 03 12 	call	0x2406	; 0x2406 <strnlen_P>
    1c38:	2c 01       	movw	r4, r24
    1c3a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c3c:	20 68       	ori	r18, 0x80	; 128
    1c3e:	22 2e       	mov	r2, r18
    1c40:	83 01       	movw	r16, r6
    1c42:	23 fc       	sbrc	r2, 3
    1c44:	1b c0       	rjmp	.+54     	; 0x1c7c <vfprintf+0x1aa>
    1c46:	83 2d       	mov	r24, r3
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	48 16       	cp	r4, r24
    1c4c:	59 06       	cpc	r5, r25
    1c4e:	b0 f4       	brcc	.+44     	; 0x1c7c <vfprintf+0x1aa>
    1c50:	b7 01       	movw	r22, r14
    1c52:	80 e2       	ldi	r24, 0x20	; 32
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	0e 94 57 12 	call	0x24ae	; 0x24ae <fputc>
    1c5a:	3a 94       	dec	r3
    1c5c:	f4 cf       	rjmp	.-24     	; 0x1c46 <vfprintf+0x174>
    1c5e:	f5 01       	movw	r30, r10
    1c60:	27 fc       	sbrc	r2, 7
    1c62:	85 91       	lpm	r24, Z+
    1c64:	27 fe       	sbrs	r2, 7
    1c66:	81 91       	ld	r24, Z+
    1c68:	5f 01       	movw	r10, r30
    1c6a:	b7 01       	movw	r22, r14
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	0e 94 57 12 	call	0x24ae	; 0x24ae <fputc>
    1c72:	31 10       	cpse	r3, r1
    1c74:	3a 94       	dec	r3
    1c76:	f1 e0       	ldi	r31, 0x01	; 1
    1c78:	4f 1a       	sub	r4, r31
    1c7a:	51 08       	sbc	r5, r1
    1c7c:	41 14       	cp	r4, r1
    1c7e:	51 04       	cpc	r5, r1
    1c80:	71 f7       	brne	.-36     	; 0x1c5e <vfprintf+0x18c>
    1c82:	e5 c0       	rjmp	.+458    	; 0x1e4e <vfprintf+0x37c>
    1c84:	84 36       	cpi	r24, 0x64	; 100
    1c86:	11 f0       	breq	.+4      	; 0x1c8c <vfprintf+0x1ba>
    1c88:	89 36       	cpi	r24, 0x69	; 105
    1c8a:	39 f5       	brne	.+78     	; 0x1cda <vfprintf+0x208>
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	27 ff       	sbrs	r18, 7
    1c90:	07 c0       	rjmp	.+14     	; 0x1ca0 <vfprintf+0x1ce>
    1c92:	60 81       	ld	r22, Z
    1c94:	71 81       	ldd	r23, Z+1	; 0x01
    1c96:	82 81       	ldd	r24, Z+2	; 0x02
    1c98:	93 81       	ldd	r25, Z+3	; 0x03
    1c9a:	0c 5f       	subi	r16, 0xFC	; 252
    1c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9e:	08 c0       	rjmp	.+16     	; 0x1cb0 <vfprintf+0x1de>
    1ca0:	60 81       	ld	r22, Z
    1ca2:	71 81       	ldd	r23, Z+1	; 0x01
    1ca4:	88 27       	eor	r24, r24
    1ca6:	77 fd       	sbrc	r23, 7
    1ca8:	80 95       	com	r24
    1caa:	98 2f       	mov	r25, r24
    1cac:	0e 5f       	subi	r16, 0xFE	; 254
    1cae:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb0:	2f 76       	andi	r18, 0x6F	; 111
    1cb2:	b2 2e       	mov	r11, r18
    1cb4:	97 ff       	sbrs	r25, 7
    1cb6:	09 c0       	rjmp	.+18     	; 0x1cca <vfprintf+0x1f8>
    1cb8:	90 95       	com	r25
    1cba:	80 95       	com	r24
    1cbc:	70 95       	com	r23
    1cbe:	61 95       	neg	r22
    1cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc6:	20 68       	ori	r18, 0x80	; 128
    1cc8:	b2 2e       	mov	r11, r18
    1cca:	2a e0       	ldi	r18, 0x0A	; 10
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	a4 01       	movw	r20, r8
    1cd0:	0e 94 a2 12 	call	0x2544	; 0x2544 <__ultoa_invert>
    1cd4:	a8 2e       	mov	r10, r24
    1cd6:	a8 18       	sub	r10, r8
    1cd8:	44 c0       	rjmp	.+136    	; 0x1d62 <vfprintf+0x290>
    1cda:	85 37       	cpi	r24, 0x75	; 117
    1cdc:	29 f4       	brne	.+10     	; 0x1ce8 <vfprintf+0x216>
    1cde:	2f 7e       	andi	r18, 0xEF	; 239
    1ce0:	b2 2e       	mov	r11, r18
    1ce2:	2a e0       	ldi	r18, 0x0A	; 10
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	25 c0       	rjmp	.+74     	; 0x1d32 <vfprintf+0x260>
    1ce8:	f2 2f       	mov	r31, r18
    1cea:	f9 7f       	andi	r31, 0xF9	; 249
    1cec:	bf 2e       	mov	r11, r31
    1cee:	8f 36       	cpi	r24, 0x6F	; 111
    1cf0:	c1 f0       	breq	.+48     	; 0x1d22 <vfprintf+0x250>
    1cf2:	18 f4       	brcc	.+6      	; 0x1cfa <vfprintf+0x228>
    1cf4:	88 35       	cpi	r24, 0x58	; 88
    1cf6:	79 f0       	breq	.+30     	; 0x1d16 <vfprintf+0x244>
    1cf8:	b4 c0       	rjmp	.+360    	; 0x1e62 <vfprintf+0x390>
    1cfa:	80 37       	cpi	r24, 0x70	; 112
    1cfc:	19 f0       	breq	.+6      	; 0x1d04 <vfprintf+0x232>
    1cfe:	88 37       	cpi	r24, 0x78	; 120
    1d00:	21 f0       	breq	.+8      	; 0x1d0a <vfprintf+0x238>
    1d02:	af c0       	rjmp	.+350    	; 0x1e62 <vfprintf+0x390>
    1d04:	2f 2f       	mov	r18, r31
    1d06:	20 61       	ori	r18, 0x10	; 16
    1d08:	b2 2e       	mov	r11, r18
    1d0a:	b4 fe       	sbrs	r11, 4
    1d0c:	0d c0       	rjmp	.+26     	; 0x1d28 <vfprintf+0x256>
    1d0e:	8b 2d       	mov	r24, r11
    1d10:	84 60       	ori	r24, 0x04	; 4
    1d12:	b8 2e       	mov	r11, r24
    1d14:	09 c0       	rjmp	.+18     	; 0x1d28 <vfprintf+0x256>
    1d16:	24 ff       	sbrs	r18, 4
    1d18:	0a c0       	rjmp	.+20     	; 0x1d2e <vfprintf+0x25c>
    1d1a:	9f 2f       	mov	r25, r31
    1d1c:	96 60       	ori	r25, 0x06	; 6
    1d1e:	b9 2e       	mov	r11, r25
    1d20:	06 c0       	rjmp	.+12     	; 0x1d2e <vfprintf+0x25c>
    1d22:	28 e0       	ldi	r18, 0x08	; 8
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	05 c0       	rjmp	.+10     	; 0x1d32 <vfprintf+0x260>
    1d28:	20 e1       	ldi	r18, 0x10	; 16
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <vfprintf+0x260>
    1d2e:	20 e1       	ldi	r18, 0x10	; 16
    1d30:	32 e0       	ldi	r19, 0x02	; 2
    1d32:	f8 01       	movw	r30, r16
    1d34:	b7 fe       	sbrs	r11, 7
    1d36:	07 c0       	rjmp	.+14     	; 0x1d46 <vfprintf+0x274>
    1d38:	60 81       	ld	r22, Z
    1d3a:	71 81       	ldd	r23, Z+1	; 0x01
    1d3c:	82 81       	ldd	r24, Z+2	; 0x02
    1d3e:	93 81       	ldd	r25, Z+3	; 0x03
    1d40:	0c 5f       	subi	r16, 0xFC	; 252
    1d42:	1f 4f       	sbci	r17, 0xFF	; 255
    1d44:	06 c0       	rjmp	.+12     	; 0x1d52 <vfprintf+0x280>
    1d46:	60 81       	ld	r22, Z
    1d48:	71 81       	ldd	r23, Z+1	; 0x01
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 5f       	subi	r16, 0xFE	; 254
    1d50:	1f 4f       	sbci	r17, 0xFF	; 255
    1d52:	a4 01       	movw	r20, r8
    1d54:	0e 94 a2 12 	call	0x2544	; 0x2544 <__ultoa_invert>
    1d58:	a8 2e       	mov	r10, r24
    1d5a:	a8 18       	sub	r10, r8
    1d5c:	fb 2d       	mov	r31, r11
    1d5e:	ff 77       	andi	r31, 0x7F	; 127
    1d60:	bf 2e       	mov	r11, r31
    1d62:	b6 fe       	sbrs	r11, 6
    1d64:	0b c0       	rjmp	.+22     	; 0x1d7c <vfprintf+0x2aa>
    1d66:	2b 2d       	mov	r18, r11
    1d68:	2e 7f       	andi	r18, 0xFE	; 254
    1d6a:	a5 14       	cp	r10, r5
    1d6c:	50 f4       	brcc	.+20     	; 0x1d82 <vfprintf+0x2b0>
    1d6e:	b4 fe       	sbrs	r11, 4
    1d70:	0a c0       	rjmp	.+20     	; 0x1d86 <vfprintf+0x2b4>
    1d72:	b2 fc       	sbrc	r11, 2
    1d74:	08 c0       	rjmp	.+16     	; 0x1d86 <vfprintf+0x2b4>
    1d76:	2b 2d       	mov	r18, r11
    1d78:	2e 7e       	andi	r18, 0xEE	; 238
    1d7a:	05 c0       	rjmp	.+10     	; 0x1d86 <vfprintf+0x2b4>
    1d7c:	7a 2c       	mov	r7, r10
    1d7e:	2b 2d       	mov	r18, r11
    1d80:	03 c0       	rjmp	.+6      	; 0x1d88 <vfprintf+0x2b6>
    1d82:	7a 2c       	mov	r7, r10
    1d84:	01 c0       	rjmp	.+2      	; 0x1d88 <vfprintf+0x2b6>
    1d86:	75 2c       	mov	r7, r5
    1d88:	24 ff       	sbrs	r18, 4
    1d8a:	0d c0       	rjmp	.+26     	; 0x1da6 <vfprintf+0x2d4>
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	ea 0d       	add	r30, r10
    1d90:	f1 1d       	adc	r31, r1
    1d92:	80 81       	ld	r24, Z
    1d94:	80 33       	cpi	r24, 0x30	; 48
    1d96:	11 f4       	brne	.+4      	; 0x1d9c <vfprintf+0x2ca>
    1d98:	29 7e       	andi	r18, 0xE9	; 233
    1d9a:	09 c0       	rjmp	.+18     	; 0x1dae <vfprintf+0x2dc>
    1d9c:	22 ff       	sbrs	r18, 2
    1d9e:	06 c0       	rjmp	.+12     	; 0x1dac <vfprintf+0x2da>
    1da0:	73 94       	inc	r7
    1da2:	73 94       	inc	r7
    1da4:	04 c0       	rjmp	.+8      	; 0x1dae <vfprintf+0x2dc>
    1da6:	82 2f       	mov	r24, r18
    1da8:	86 78       	andi	r24, 0x86	; 134
    1daa:	09 f0       	breq	.+2      	; 0x1dae <vfprintf+0x2dc>
    1dac:	73 94       	inc	r7
    1dae:	23 fd       	sbrc	r18, 3
    1db0:	13 c0       	rjmp	.+38     	; 0x1dd8 <vfprintf+0x306>
    1db2:	20 ff       	sbrs	r18, 0
    1db4:	06 c0       	rjmp	.+12     	; 0x1dc2 <vfprintf+0x2f0>
    1db6:	5a 2c       	mov	r5, r10
    1db8:	73 14       	cp	r7, r3
    1dba:	18 f4       	brcc	.+6      	; 0x1dc2 <vfprintf+0x2f0>
    1dbc:	53 0c       	add	r5, r3
    1dbe:	57 18       	sub	r5, r7
    1dc0:	73 2c       	mov	r7, r3
    1dc2:	73 14       	cp	r7, r3
    1dc4:	68 f4       	brcc	.+26     	; 0x1de0 <vfprintf+0x30e>
    1dc6:	b7 01       	movw	r22, r14
    1dc8:	80 e2       	ldi	r24, 0x20	; 32
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	2c 87       	std	Y+12, r18	; 0x0c
    1dce:	0e 94 57 12 	call	0x24ae	; 0x24ae <fputc>
    1dd2:	73 94       	inc	r7
    1dd4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dd6:	f5 cf       	rjmp	.-22     	; 0x1dc2 <vfprintf+0x2f0>
    1dd8:	73 14       	cp	r7, r3
    1dda:	10 f4       	brcc	.+4      	; 0x1de0 <vfprintf+0x30e>
    1ddc:	37 18       	sub	r3, r7
    1dde:	01 c0       	rjmp	.+2      	; 0x1de2 <vfprintf+0x310>
    1de0:	31 2c       	mov	r3, r1
    1de2:	24 ff       	sbrs	r18, 4
    1de4:	12 c0       	rjmp	.+36     	; 0x1e0a <vfprintf+0x338>
    1de6:	b7 01       	movw	r22, r14
    1de8:	80 e3       	ldi	r24, 0x30	; 48
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	2c 87       	std	Y+12, r18	; 0x0c
    1dee:	0e 94 57 12 	call	0x24ae	; 0x24ae <fputc>
    1df2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1df4:	22 ff       	sbrs	r18, 2
    1df6:	17 c0       	rjmp	.+46     	; 0x1e26 <vfprintf+0x354>
    1df8:	21 ff       	sbrs	r18, 1
    1dfa:	03 c0       	rjmp	.+6      	; 0x1e02 <vfprintf+0x330>
    1dfc:	88 e5       	ldi	r24, 0x58	; 88
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <vfprintf+0x334>
    1e02:	88 e7       	ldi	r24, 0x78	; 120
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	b7 01       	movw	r22, r14
    1e08:	0c c0       	rjmp	.+24     	; 0x1e22 <vfprintf+0x350>
    1e0a:	82 2f       	mov	r24, r18
    1e0c:	86 78       	andi	r24, 0x86	; 134
    1e0e:	59 f0       	breq	.+22     	; 0x1e26 <vfprintf+0x354>
    1e10:	21 fd       	sbrc	r18, 1
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <vfprintf+0x346>
    1e14:	80 e2       	ldi	r24, 0x20	; 32
    1e16:	01 c0       	rjmp	.+2      	; 0x1e1a <vfprintf+0x348>
    1e18:	8b e2       	ldi	r24, 0x2B	; 43
    1e1a:	27 fd       	sbrc	r18, 7
    1e1c:	8d e2       	ldi	r24, 0x2D	; 45
    1e1e:	b7 01       	movw	r22, r14
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	0e 94 57 12 	call	0x24ae	; 0x24ae <fputc>
    1e26:	a5 14       	cp	r10, r5
    1e28:	38 f4       	brcc	.+14     	; 0x1e38 <vfprintf+0x366>
    1e2a:	b7 01       	movw	r22, r14
    1e2c:	80 e3       	ldi	r24, 0x30	; 48
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	0e 94 57 12 	call	0x24ae	; 0x24ae <fputc>
    1e34:	5a 94       	dec	r5
    1e36:	f7 cf       	rjmp	.-18     	; 0x1e26 <vfprintf+0x354>
    1e38:	aa 94       	dec	r10
    1e3a:	f4 01       	movw	r30, r8
    1e3c:	ea 0d       	add	r30, r10
    1e3e:	f1 1d       	adc	r31, r1
    1e40:	80 81       	ld	r24, Z
    1e42:	b7 01       	movw	r22, r14
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	0e 94 57 12 	call	0x24ae	; 0x24ae <fputc>
    1e4a:	a1 10       	cpse	r10, r1
    1e4c:	f5 cf       	rjmp	.-22     	; 0x1e38 <vfprintf+0x366>
    1e4e:	33 20       	and	r3, r3
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <vfprintf+0x382>
    1e52:	51 ce       	rjmp	.-862    	; 0x1af6 <vfprintf+0x24>
    1e54:	b7 01       	movw	r22, r14
    1e56:	80 e2       	ldi	r24, 0x20	; 32
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	0e 94 57 12 	call	0x24ae	; 0x24ae <fputc>
    1e5e:	3a 94       	dec	r3
    1e60:	f6 cf       	rjmp	.-20     	; 0x1e4e <vfprintf+0x37c>
    1e62:	f7 01       	movw	r30, r14
    1e64:	86 81       	ldd	r24, Z+6	; 0x06
    1e66:	97 81       	ldd	r25, Z+7	; 0x07
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <vfprintf+0x39c>
    1e6a:	8f ef       	ldi	r24, 0xFF	; 255
    1e6c:	9f ef       	ldi	r25, 0xFF	; 255
    1e6e:	2c 96       	adiw	r28, 0x0c	; 12
    1e70:	e2 e1       	ldi	r30, 0x12	; 18
    1e72:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__epilogue_restores__>

00001e76 <putval>:
    1e76:	20 fd       	sbrc	r18, 0
    1e78:	09 c0       	rjmp	.+18     	; 0x1e8c <putval+0x16>
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	23 fd       	sbrc	r18, 3
    1e7e:	05 c0       	rjmp	.+10     	; 0x1e8a <putval+0x14>
    1e80:	22 ff       	sbrs	r18, 2
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <putval+0x12>
    1e84:	73 83       	std	Z+3, r23	; 0x03
    1e86:	62 83       	std	Z+2, r22	; 0x02
    1e88:	51 83       	std	Z+1, r21	; 0x01
    1e8a:	40 83       	st	Z, r20
    1e8c:	08 95       	ret

00001e8e <mulacc>:
    1e8e:	44 fd       	sbrc	r20, 4
    1e90:	10 c0       	rjmp	.+32     	; 0x1eb2 <mulacc+0x24>
    1e92:	46 fd       	sbrc	r20, 6
    1e94:	10 c0       	rjmp	.+32     	; 0x1eb6 <mulacc+0x28>
    1e96:	db 01       	movw	r26, r22
    1e98:	fc 01       	movw	r30, r24
    1e9a:	aa 0f       	add	r26, r26
    1e9c:	bb 1f       	adc	r27, r27
    1e9e:	ee 1f       	adc	r30, r30
    1ea0:	ff 1f       	adc	r31, r31
    1ea2:	10 94       	com	r1
    1ea4:	d1 f7       	brne	.-12     	; 0x1e9a <mulacc+0xc>
    1ea6:	6a 0f       	add	r22, r26
    1ea8:	7b 1f       	adc	r23, r27
    1eaa:	8e 1f       	adc	r24, r30
    1eac:	9f 1f       	adc	r25, r31
    1eae:	31 e0       	ldi	r19, 0x01	; 1
    1eb0:	03 c0       	rjmp	.+6      	; 0x1eb8 <mulacc+0x2a>
    1eb2:	33 e0       	ldi	r19, 0x03	; 3
    1eb4:	01 c0       	rjmp	.+2      	; 0x1eb8 <mulacc+0x2a>
    1eb6:	34 e0       	ldi	r19, 0x04	; 4
    1eb8:	66 0f       	add	r22, r22
    1eba:	77 1f       	adc	r23, r23
    1ebc:	88 1f       	adc	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	31 50       	subi	r19, 0x01	; 1
    1ec2:	d1 f7       	brne	.-12     	; 0x1eb8 <mulacc+0x2a>
    1ec4:	62 0f       	add	r22, r18
    1ec6:	71 1d       	adc	r23, r1
    1ec8:	81 1d       	adc	r24, r1
    1eca:	91 1d       	adc	r25, r1
    1ecc:	08 95       	ret

00001ece <skip_spaces>:
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	8c 01       	movw	r16, r24
    1ed8:	c8 01       	movw	r24, r16
    1eda:	0e 94 19 12 	call	0x2432	; 0x2432 <fgetc>
    1ede:	ec 01       	movw	r28, r24
    1ee0:	97 fd       	sbrc	r25, 7
    1ee2:	08 c0       	rjmp	.+16     	; 0x1ef4 <skip_spaces+0x26>
    1ee4:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <isspace>
    1ee8:	89 2b       	or	r24, r25
    1eea:	b1 f7       	brne	.-20     	; 0x1ed8 <skip_spaces+0xa>
    1eec:	b8 01       	movw	r22, r16
    1eee:	ce 01       	movw	r24, r28
    1ef0:	0e 94 89 12 	call	0x2512	; 0x2512 <ungetc>
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	df 91       	pop	r29
    1ef8:	cf 91       	pop	r28
    1efa:	1f 91       	pop	r17
    1efc:	0f 91       	pop	r16
    1efe:	08 95       	ret

00001f00 <conv_int>:
    1f00:	8f 92       	push	r8
    1f02:	9f 92       	push	r9
    1f04:	af 92       	push	r10
    1f06:	cf 92       	push	r12
    1f08:	df 92       	push	r13
    1f0a:	ef 92       	push	r14
    1f0c:	ff 92       	push	r15
    1f0e:	0f 93       	push	r16
    1f10:	1f 93       	push	r17
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
    1f16:	ec 01       	movw	r28, r24
    1f18:	a6 2e       	mov	r10, r22
    1f1a:	4a 01       	movw	r8, r20
    1f1c:	02 2f       	mov	r16, r18
    1f1e:	0e 94 19 12 	call	0x2432	; 0x2432 <fgetc>
    1f22:	ac 01       	movw	r20, r24
    1f24:	55 27       	eor	r21, r21
    1f26:	4b 32       	cpi	r20, 0x2B	; 43
    1f28:	51 05       	cpc	r21, r1
    1f2a:	21 f0       	breq	.+8      	; 0x1f34 <conv_int+0x34>
    1f2c:	4d 32       	cpi	r20, 0x2D	; 45
    1f2e:	51 05       	cpc	r21, r1
    1f30:	51 f4       	brne	.+20     	; 0x1f46 <conv_int+0x46>
    1f32:	00 68       	ori	r16, 0x80	; 128
    1f34:	aa 94       	dec	r10
    1f36:	11 f4       	brne	.+4      	; 0x1f3c <conv_int+0x3c>
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	67 c0       	rjmp	.+206    	; 0x200a <conv_int+0x10a>
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	0e 94 19 12 	call	0x2432	; 0x2432 <fgetc>
    1f42:	97 fd       	sbrc	r25, 7
    1f44:	f9 cf       	rjmp	.-14     	; 0x1f38 <conv_int+0x38>
    1f46:	10 2f       	mov	r17, r16
    1f48:	1d 7f       	andi	r17, 0xFD	; 253
    1f4a:	30 2f       	mov	r19, r16
    1f4c:	30 73       	andi	r19, 0x30	; 48
    1f4e:	01 f5       	brne	.+64     	; 0x1f90 <conv_int+0x90>
    1f50:	80 33       	cpi	r24, 0x30	; 48
    1f52:	f1 f4       	brne	.+60     	; 0x1f90 <conv_int+0x90>
    1f54:	ff 24       	eor	r15, r15
    1f56:	fa 94       	dec	r15
    1f58:	fa 0c       	add	r15, r10
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <conv_int+0x5e>
    1f5c:	42 c0       	rjmp	.+132    	; 0x1fe2 <conv_int+0xe2>
    1f5e:	ce 01       	movw	r24, r28
    1f60:	0e 94 19 12 	call	0x2432	; 0x2432 <fgetc>
    1f64:	97 fd       	sbrc	r25, 7
    1f66:	3d c0       	rjmp	.+122    	; 0x1fe2 <conv_int+0xe2>
    1f68:	38 2f       	mov	r19, r24
    1f6a:	3f 7d       	andi	r19, 0xDF	; 223
    1f6c:	38 35       	cpi	r19, 0x58	; 88
    1f6e:	51 f4       	brne	.+20     	; 0x1f84 <conv_int+0x84>
    1f70:	12 64       	ori	r17, 0x42	; 66
    1f72:	aa 94       	dec	r10
    1f74:	aa 94       	dec	r10
    1f76:	a9 f1       	breq	.+106    	; 0x1fe2 <conv_int+0xe2>
    1f78:	ce 01       	movw	r24, r28
    1f7a:	0e 94 19 12 	call	0x2432	; 0x2432 <fgetc>
    1f7e:	97 ff       	sbrs	r25, 7
    1f80:	07 c0       	rjmp	.+14     	; 0x1f90 <conv_int+0x90>
    1f82:	2f c0       	rjmp	.+94     	; 0x1fe2 <conv_int+0xe2>
    1f84:	06 ff       	sbrs	r16, 6
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <conv_int+0x8c>
    1f88:	12 60       	ori	r17, 0x02	; 2
    1f8a:	01 c0       	rjmp	.+2      	; 0x1f8e <conv_int+0x8e>
    1f8c:	12 61       	ori	r17, 0x12	; 18
    1f8e:	af 2c       	mov	r10, r15
    1f90:	c1 2c       	mov	r12, r1
    1f92:	d1 2c       	mov	r13, r1
    1f94:	76 01       	movw	r14, r12
    1f96:	20 ed       	ldi	r18, 0xD0	; 208
    1f98:	28 0f       	add	r18, r24
    1f9a:	28 30       	cpi	r18, 0x08	; 8
    1f9c:	80 f0       	brcs	.+32     	; 0x1fbe <conv_int+0xbe>
    1f9e:	14 ff       	sbrs	r17, 4
    1fa0:	04 c0       	rjmp	.+8      	; 0x1faa <conv_int+0xaa>
    1fa2:	be 01       	movw	r22, r28
    1fa4:	0e 94 89 12 	call	0x2512	; 0x2512 <ungetc>
    1fa8:	19 c0       	rjmp	.+50     	; 0x1fdc <conv_int+0xdc>
    1faa:	2a 30       	cpi	r18, 0x0A	; 10
    1fac:	40 f0       	brcs	.+16     	; 0x1fbe <conv_int+0xbe>
    1fae:	16 ff       	sbrs	r17, 6
    1fb0:	f8 cf       	rjmp	.-16     	; 0x1fa2 <conv_int+0xa2>
    1fb2:	2f 7d       	andi	r18, 0xDF	; 223
    1fb4:	3f ee       	ldi	r19, 0xEF	; 239
    1fb6:	32 0f       	add	r19, r18
    1fb8:	36 30       	cpi	r19, 0x06	; 6
    1fba:	98 f7       	brcc	.-26     	; 0x1fa2 <conv_int+0xa2>
    1fbc:	27 50       	subi	r18, 0x07	; 7
    1fbe:	41 2f       	mov	r20, r17
    1fc0:	c7 01       	movw	r24, r14
    1fc2:	b6 01       	movw	r22, r12
    1fc4:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <mulacc>
    1fc8:	6b 01       	movw	r12, r22
    1fca:	7c 01       	movw	r14, r24
    1fcc:	12 60       	ori	r17, 0x02	; 2
    1fce:	aa 94       	dec	r10
    1fd0:	59 f0       	breq	.+22     	; 0x1fe8 <conv_int+0xe8>
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	0e 94 19 12 	call	0x2432	; 0x2432 <fgetc>
    1fd8:	97 ff       	sbrs	r25, 7
    1fda:	dd cf       	rjmp	.-70     	; 0x1f96 <conv_int+0x96>
    1fdc:	11 fd       	sbrc	r17, 1
    1fde:	04 c0       	rjmp	.+8      	; 0x1fe8 <conv_int+0xe8>
    1fe0:	ab cf       	rjmp	.-170    	; 0x1f38 <conv_int+0x38>
    1fe2:	c1 2c       	mov	r12, r1
    1fe4:	d1 2c       	mov	r13, r1
    1fe6:	76 01       	movw	r14, r12
    1fe8:	17 ff       	sbrs	r17, 7
    1fea:	08 c0       	rjmp	.+16     	; 0x1ffc <conv_int+0xfc>
    1fec:	f0 94       	com	r15
    1fee:	e0 94       	com	r14
    1ff0:	d0 94       	com	r13
    1ff2:	c0 94       	com	r12
    1ff4:	c1 1c       	adc	r12, r1
    1ff6:	d1 1c       	adc	r13, r1
    1ff8:	e1 1c       	adc	r14, r1
    1ffa:	f1 1c       	adc	r15, r1
    1ffc:	21 2f       	mov	r18, r17
    1ffe:	b7 01       	movw	r22, r14
    2000:	a6 01       	movw	r20, r12
    2002:	c4 01       	movw	r24, r8
    2004:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <putval>
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	df 91       	pop	r29
    200c:	cf 91       	pop	r28
    200e:	1f 91       	pop	r17
    2010:	0f 91       	pop	r16
    2012:	ff 90       	pop	r15
    2014:	ef 90       	pop	r14
    2016:	df 90       	pop	r13
    2018:	cf 90       	pop	r12
    201a:	af 90       	pop	r10
    201c:	9f 90       	pop	r9
    201e:	8f 90       	pop	r8
    2020:	08 95       	ret

00002022 <conv_brk>:
    2022:	a1 e2       	ldi	r26, 0x21	; 33
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	e7 e1       	ldi	r30, 0x17	; 23
    2028:	f0 e1       	ldi	r31, 0x10	; 16
    202a:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__prologue_saves__+0xa>
    202e:	5c 01       	movw	r10, r24
    2030:	7a 01       	movw	r14, r20
    2032:	8e 01       	movw	r16, r28
    2034:	0f 5f       	subi	r16, 0xFF	; 255
    2036:	1f 4f       	sbci	r17, 0xFF	; 255
    2038:	68 01       	movw	r12, r16
    203a:	80 e2       	ldi	r24, 0x20	; 32
    203c:	d8 01       	movw	r26, r16
    203e:	1d 92       	st	X+, r1
    2040:	8a 95       	dec	r24
    2042:	e9 f7       	brne	.-6      	; 0x203e <conv_brk+0x1c>
    2044:	f5 01       	movw	r30, r10
    2046:	73 80       	ldd	r7, Z+3	; 0x03
    2048:	40 e0       	ldi	r20, 0x00	; 0
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	81 2c       	mov	r8, r1
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	91 2c       	mov	r9, r1
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	f9 01       	movw	r30, r18
    2058:	73 fc       	sbrc	r7, 3
    205a:	a5 91       	lpm	r26, Z+
    205c:	73 fe       	sbrs	r7, 3
    205e:	a1 91       	ld	r26, Z+
    2060:	8f 01       	movw	r16, r30
    2062:	7a 2f       	mov	r23, r26
    2064:	9f 01       	movw	r18, r30
    2066:	a1 11       	cpse	r26, r1
    2068:	03 c0       	rjmp	.+6      	; 0x2070 <conv_brk+0x4e>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	7d c0       	rjmp	.+250    	; 0x216a <conv_brk+0x148>
    2070:	ae 35       	cpi	r26, 0x5E	; 94
    2072:	19 f4       	brne	.+6      	; 0x207a <conv_brk+0x58>
    2074:	41 15       	cp	r20, r1
    2076:	51 05       	cpc	r21, r1
    2078:	59 f1       	breq	.+86     	; 0x20d0 <conv_brk+0xae>
    207a:	e9 2d       	mov	r30, r9
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	e4 17       	cp	r30, r20
    2080:	f5 07       	cpc	r31, r21
    2082:	3c f4       	brge	.+14     	; 0x2092 <conv_brk+0x70>
    2084:	ad 35       	cpi	r26, 0x5D	; 93
    2086:	69 f1       	breq	.+90     	; 0x20e2 <conv_brk+0xc0>
    2088:	ad 32       	cpi	r26, 0x2D	; 45
    208a:	19 f4       	brne	.+6      	; 0x2092 <conv_brk+0x70>
    208c:	bb 23       	and	r27, r27
    208e:	19 f1       	breq	.+70     	; 0x20d6 <conv_brk+0xb4>
    2090:	03 c0       	rjmp	.+6      	; 0x2098 <conv_brk+0x76>
    2092:	b1 11       	cpse	r27, r1
    2094:	01 c0       	rjmp	.+2      	; 0x2098 <conv_brk+0x76>
    2096:	8a 2e       	mov	r8, r26
    2098:	e7 2f       	mov	r30, r23
    209a:	e6 95       	lsr	r30
    209c:	e6 95       	lsr	r30
    209e:	e6 95       	lsr	r30
    20a0:	86 01       	movw	r16, r12
    20a2:	0e 0f       	add	r16, r30
    20a4:	11 1d       	adc	r17, r1
    20a6:	f8 01       	movw	r30, r16
    20a8:	a7 2f       	mov	r26, r23
    20aa:	a7 70       	andi	r26, 0x07	; 7
    20ac:	8c 01       	movw	r16, r24
    20ae:	02 c0       	rjmp	.+4      	; 0x20b4 <conv_brk+0x92>
    20b0:	00 0f       	add	r16, r16
    20b2:	11 1f       	adc	r17, r17
    20b4:	aa 95       	dec	r26
    20b6:	e2 f7       	brpl	.-8      	; 0x20b0 <conv_brk+0x8e>
    20b8:	d8 01       	movw	r26, r16
    20ba:	b0 81       	ld	r27, Z
    20bc:	ba 2b       	or	r27, r26
    20be:	b0 83       	st	Z, r27
    20c0:	78 15       	cp	r23, r8
    20c2:	59 f0       	breq	.+22     	; 0x20da <conv_brk+0xb8>
    20c4:	78 15       	cp	r23, r8
    20c6:	10 f4       	brcc	.+4      	; 0x20cc <conv_brk+0xaa>
    20c8:	7f 5f       	subi	r23, 0xFF	; 255
    20ca:	e6 cf       	rjmp	.-52     	; 0x2098 <conv_brk+0x76>
    20cc:	71 50       	subi	r23, 0x01	; 1
    20ce:	e4 cf       	rjmp	.-56     	; 0x2098 <conv_brk+0x76>
    20d0:	99 24       	eor	r9, r9
    20d2:	93 94       	inc	r9
    20d4:	03 c0       	rjmp	.+6      	; 0x20dc <conv_brk+0xba>
    20d6:	b1 e0       	ldi	r27, 0x01	; 1
    20d8:	01 c0       	rjmp	.+2      	; 0x20dc <conv_brk+0xba>
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	4f 5f       	subi	r20, 0xFF	; 255
    20de:	5f 4f       	sbci	r21, 0xFF	; 255
    20e0:	ba cf       	rjmp	.-140    	; 0x2056 <conv_brk+0x34>
    20e2:	bb 23       	and	r27, r27
    20e4:	19 f0       	breq	.+6      	; 0x20ec <conv_brk+0xca>
    20e6:	8e 81       	ldd	r24, Y+6	; 0x06
    20e8:	80 62       	ori	r24, 0x20	; 32
    20ea:	8e 83       	std	Y+6, r24	; 0x06
    20ec:	91 10       	cpse	r9, r1
    20ee:	03 c0       	rjmp	.+6      	; 0x20f6 <conv_brk+0xd4>
    20f0:	99 24       	eor	r9, r9
    20f2:	93 94       	inc	r9
    20f4:	15 c0       	rjmp	.+42     	; 0x2120 <conv_brk+0xfe>
    20f6:	f6 01       	movw	r30, r12
    20f8:	ce 01       	movw	r24, r28
    20fa:	81 96       	adiw	r24, 0x21	; 33
    20fc:	20 81       	ld	r18, Z
    20fe:	20 95       	com	r18
    2100:	21 93       	st	Z+, r18
    2102:	e8 17       	cp	r30, r24
    2104:	f9 07       	cpc	r31, r25
    2106:	d1 f7       	brne	.-12     	; 0x20fc <conv_brk+0xda>
    2108:	f3 cf       	rjmp	.-26     	; 0x20f0 <conv_brk+0xce>
    210a:	e1 14       	cp	r14, r1
    210c:	f1 04       	cpc	r15, r1
    210e:	29 f0       	breq	.+10     	; 0x211a <conv_brk+0xf8>
    2110:	d7 01       	movw	r26, r14
    2112:	8c 93       	st	X, r24
    2114:	f7 01       	movw	r30, r14
    2116:	31 96       	adiw	r30, 0x01	; 1
    2118:	7f 01       	movw	r14, r30
    211a:	61 50       	subi	r22, 0x01	; 1
    211c:	01 f1       	breq	.+64     	; 0x215e <conv_brk+0x13c>
    211e:	91 2c       	mov	r9, r1
    2120:	c5 01       	movw	r24, r10
    2122:	69 a3       	std	Y+33, r22	; 0x21
    2124:	0e 94 19 12 	call	0x2432	; 0x2432 <fgetc>
    2128:	69 a1       	ldd	r22, Y+33	; 0x21
    212a:	97 fd       	sbrc	r25, 7
    212c:	16 c0       	rjmp	.+44     	; 0x215a <conv_brk+0x138>
    212e:	28 2f       	mov	r18, r24
    2130:	26 95       	lsr	r18
    2132:	26 95       	lsr	r18
    2134:	26 95       	lsr	r18
    2136:	f6 01       	movw	r30, r12
    2138:	e2 0f       	add	r30, r18
    213a:	f1 1d       	adc	r31, r1
    213c:	20 81       	ld	r18, Z
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	ac 01       	movw	r20, r24
    2142:	47 70       	andi	r20, 0x07	; 7
    2144:	55 27       	eor	r21, r21
    2146:	02 c0       	rjmp	.+4      	; 0x214c <conv_brk+0x12a>
    2148:	35 95       	asr	r19
    214a:	27 95       	ror	r18
    214c:	4a 95       	dec	r20
    214e:	e2 f7       	brpl	.-8      	; 0x2148 <conv_brk+0x126>
    2150:	20 fd       	sbrc	r18, 0
    2152:	db cf       	rjmp	.-74     	; 0x210a <conv_brk+0xe8>
    2154:	b5 01       	movw	r22, r10
    2156:	0e 94 89 12 	call	0x2512	; 0x2512 <ungetc>
    215a:	91 10       	cpse	r9, r1
    215c:	86 cf       	rjmp	.-244    	; 0x206a <conv_brk+0x48>
    215e:	e1 14       	cp	r14, r1
    2160:	f1 04       	cpc	r15, r1
    2162:	11 f0       	breq	.+4      	; 0x2168 <conv_brk+0x146>
    2164:	d7 01       	movw	r26, r14
    2166:	1c 92       	st	X, r1
    2168:	c8 01       	movw	r24, r16
    216a:	a1 96       	adiw	r28, 0x21	; 33
    216c:	ed e0       	ldi	r30, 0x0D	; 13
    216e:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__epilogue_restores__+0xa>

00002172 <vfscanf>:
    2172:	4f 92       	push	r4
    2174:	5f 92       	push	r5
    2176:	7f 92       	push	r7
    2178:	8f 92       	push	r8
    217a:	9f 92       	push	r9
    217c:	af 92       	push	r10
    217e:	bf 92       	push	r11
    2180:	cf 92       	push	r12
    2182:	df 92       	push	r13
    2184:	ef 92       	push	r14
    2186:	ff 92       	push	r15
    2188:	0f 93       	push	r16
    218a:	1f 93       	push	r17
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	1f 92       	push	r1
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	8c 01       	movw	r16, r24
    2198:	2b 01       	movw	r4, r22
    219a:	7a 01       	movw	r14, r20
    219c:	fc 01       	movw	r30, r24
    219e:	17 82       	std	Z+7, r1	; 0x07
    21a0:	16 82       	std	Z+6, r1	; 0x06
    21a2:	a1 2c       	mov	r10, r1
    21a4:	f8 01       	movw	r30, r16
    21a6:	d3 80       	ldd	r13, Z+3	; 0x03
    21a8:	f2 01       	movw	r30, r4
    21aa:	d3 fc       	sbrc	r13, 3
    21ac:	85 91       	lpm	r24, Z+
    21ae:	d3 fe       	sbrs	r13, 3
    21b0:	81 91       	ld	r24, Z+
    21b2:	38 2f       	mov	r19, r24
    21b4:	2f 01       	movw	r4, r30
    21b6:	88 23       	and	r24, r24
    21b8:	09 f4       	brne	.+2      	; 0x21bc <vfscanf+0x4a>
    21ba:	fc c0       	rjmp	.+504    	; 0x23b4 <vfscanf+0x242>
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	39 83       	std	Y+1, r19	; 0x01
    21c0:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <isspace>
    21c4:	39 81       	ldd	r19, Y+1	; 0x01
    21c6:	89 2b       	or	r24, r25
    21c8:	21 f0       	breq	.+8      	; 0x21d2 <vfscanf+0x60>
    21ca:	c8 01       	movw	r24, r16
    21cc:	0e 94 67 0f 	call	0x1ece	; 0x1ece <skip_spaces>
    21d0:	e9 cf       	rjmp	.-46     	; 0x21a4 <vfscanf+0x32>
    21d2:	35 32       	cpi	r19, 0x25	; 37
    21d4:	41 f4       	brne	.+16     	; 0x21e6 <vfscanf+0x74>
    21d6:	f2 01       	movw	r30, r4
    21d8:	d3 fc       	sbrc	r13, 3
    21da:	35 91       	lpm	r19, Z+
    21dc:	d3 fe       	sbrs	r13, 3
    21de:	31 91       	ld	r19, Z+
    21e0:	2f 01       	movw	r4, r30
    21e2:	35 32       	cpi	r19, 0x25	; 37
    21e4:	69 f4       	brne	.+26     	; 0x2200 <vfscanf+0x8e>
    21e6:	c8 01       	movw	r24, r16
    21e8:	39 83       	std	Y+1, r19	; 0x01
    21ea:	0e 94 19 12 	call	0x2432	; 0x2432 <fgetc>
    21ee:	39 81       	ldd	r19, Y+1	; 0x01
    21f0:	97 fd       	sbrc	r25, 7
    21f2:	de c0       	rjmp	.+444    	; 0x23b0 <vfscanf+0x23e>
    21f4:	38 17       	cp	r19, r24
    21f6:	b1 f2       	breq	.-84     	; 0x21a4 <vfscanf+0x32>
    21f8:	b8 01       	movw	r22, r16
    21fa:	0e 94 89 12 	call	0x2512	; 0x2512 <ungetc>
    21fe:	da c0       	rjmp	.+436    	; 0x23b4 <vfscanf+0x242>
    2200:	3a 32       	cpi	r19, 0x2A	; 42
    2202:	41 f4       	brne	.+16     	; 0x2214 <vfscanf+0xa2>
    2204:	d3 fc       	sbrc	r13, 3
    2206:	35 91       	lpm	r19, Z+
    2208:	d3 fe       	sbrs	r13, 3
    220a:	31 91       	ld	r19, Z+
    220c:	2f 01       	movw	r4, r30
    220e:	bb 24       	eor	r11, r11
    2210:	b3 94       	inc	r11
    2212:	01 c0       	rjmp	.+2      	; 0x2216 <vfscanf+0xa4>
    2214:	b1 2c       	mov	r11, r1
    2216:	71 2c       	mov	r7, r1
    2218:	20 ed       	ldi	r18, 0xD0	; 208
    221a:	23 0f       	add	r18, r19
    221c:	2a 30       	cpi	r18, 0x0A	; 10
    221e:	90 f4       	brcc	.+36     	; 0x2244 <vfscanf+0xd2>
    2220:	fb 2d       	mov	r31, r11
    2222:	f2 60       	ori	r31, 0x02	; 2
    2224:	bf 2e       	mov	r11, r31
    2226:	67 2d       	mov	r22, r7
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	40 e2       	ldi	r20, 0x20	; 32
    2230:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <mulacc>
    2234:	76 2e       	mov	r7, r22
    2236:	f2 01       	movw	r30, r4
    2238:	d3 fc       	sbrc	r13, 3
    223a:	35 91       	lpm	r19, Z+
    223c:	d3 fe       	sbrs	r13, 3
    223e:	31 91       	ld	r19, Z+
    2240:	2f 01       	movw	r4, r30
    2242:	ea cf       	rjmp	.-44     	; 0x2218 <vfscanf+0xa6>
    2244:	b1 fe       	sbrs	r11, 1
    2246:	03 c0       	rjmp	.+6      	; 0x224e <vfscanf+0xdc>
    2248:	71 10       	cpse	r7, r1
    224a:	03 c0       	rjmp	.+6      	; 0x2252 <vfscanf+0xe0>
    224c:	b3 c0       	rjmp	.+358    	; 0x23b4 <vfscanf+0x242>
    224e:	77 24       	eor	r7, r7
    2250:	7a 94       	dec	r7
    2252:	38 36       	cpi	r19, 0x68	; 104
    2254:	19 f0       	breq	.+6      	; 0x225c <vfscanf+0xea>
    2256:	3c 36       	cpi	r19, 0x6C	; 108
    2258:	61 f0       	breq	.+24     	; 0x2272 <vfscanf+0x100>
    225a:	14 c0       	rjmp	.+40     	; 0x2284 <vfscanf+0x112>
    225c:	f2 01       	movw	r30, r4
    225e:	d3 fc       	sbrc	r13, 3
    2260:	35 91       	lpm	r19, Z+
    2262:	d3 fe       	sbrs	r13, 3
    2264:	31 91       	ld	r19, Z+
    2266:	2f 01       	movw	r4, r30
    2268:	38 36       	cpi	r19, 0x68	; 104
    226a:	61 f4       	brne	.+24     	; 0x2284 <vfscanf+0x112>
    226c:	fb 2d       	mov	r31, r11
    226e:	f8 60       	ori	r31, 0x08	; 8
    2270:	bf 2e       	mov	r11, r31
    2272:	8b 2d       	mov	r24, r11
    2274:	84 60       	ori	r24, 0x04	; 4
    2276:	b8 2e       	mov	r11, r24
    2278:	f2 01       	movw	r30, r4
    227a:	d3 fc       	sbrc	r13, 3
    227c:	35 91       	lpm	r19, Z+
    227e:	d3 fe       	sbrs	r13, 3
    2280:	31 91       	ld	r19, Z+
    2282:	2f 01       	movw	r4, r30
    2284:	33 23       	and	r19, r19
    2286:	09 f4       	brne	.+2      	; 0x228a <vfscanf+0x118>
    2288:	95 c0       	rjmp	.+298    	; 0x23b4 <vfscanf+0x242>
    228a:	63 2f       	mov	r22, r19
    228c:	70 e0       	ldi	r23, 0x00	; 0
    228e:	83 e0       	ldi	r24, 0x03	; 3
    2290:	94 e0       	ldi	r25, 0x04	; 4
    2292:	39 83       	std	Y+1, r19	; 0x01
    2294:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <strchr_P>
    2298:	39 81       	ldd	r19, Y+1	; 0x01
    229a:	89 2b       	or	r24, r25
    229c:	09 f4       	brne	.+2      	; 0x22a0 <vfscanf+0x12e>
    229e:	8a c0       	rjmp	.+276    	; 0x23b4 <vfscanf+0x242>
    22a0:	b0 fc       	sbrc	r11, 0
    22a2:	07 c0       	rjmp	.+14     	; 0x22b2 <vfscanf+0x140>
    22a4:	f7 01       	movw	r30, r14
    22a6:	c0 80       	ld	r12, Z
    22a8:	d1 80       	ldd	r13, Z+1	; 0x01
    22aa:	c7 01       	movw	r24, r14
    22ac:	02 96       	adiw	r24, 0x02	; 2
    22ae:	7c 01       	movw	r14, r24
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <vfscanf+0x144>
    22b2:	c1 2c       	mov	r12, r1
    22b4:	d1 2c       	mov	r13, r1
    22b6:	3e 36       	cpi	r19, 0x6E	; 110
    22b8:	51 f4       	brne	.+20     	; 0x22ce <vfscanf+0x15c>
    22ba:	f8 01       	movw	r30, r16
    22bc:	46 81       	ldd	r20, Z+6	; 0x06
    22be:	57 81       	ldd	r21, Z+7	; 0x07
    22c0:	60 e0       	ldi	r22, 0x00	; 0
    22c2:	70 e0       	ldi	r23, 0x00	; 0
    22c4:	2b 2d       	mov	r18, r11
    22c6:	c6 01       	movw	r24, r12
    22c8:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <putval>
    22cc:	6b cf       	rjmp	.-298    	; 0x21a4 <vfscanf+0x32>
    22ce:	33 36       	cpi	r19, 0x63	; 99
    22d0:	a1 f4       	brne	.+40     	; 0x22fa <vfscanf+0x188>
    22d2:	b1 fc       	sbrc	r11, 1
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <vfscanf+0x168>
    22d6:	77 24       	eor	r7, r7
    22d8:	73 94       	inc	r7
    22da:	c8 01       	movw	r24, r16
    22dc:	0e 94 19 12 	call	0x2432	; 0x2432 <fgetc>
    22e0:	97 fd       	sbrc	r25, 7
    22e2:	66 c0       	rjmp	.+204    	; 0x23b0 <vfscanf+0x23e>
    22e4:	c1 14       	cp	r12, r1
    22e6:	d1 04       	cpc	r13, r1
    22e8:	29 f0       	breq	.+10     	; 0x22f4 <vfscanf+0x182>
    22ea:	f6 01       	movw	r30, r12
    22ec:	80 83       	st	Z, r24
    22ee:	c6 01       	movw	r24, r12
    22f0:	01 96       	adiw	r24, 0x01	; 1
    22f2:	6c 01       	movw	r12, r24
    22f4:	7a 94       	dec	r7
    22f6:	89 f7       	brne	.-30     	; 0x22da <vfscanf+0x168>
    22f8:	57 c0       	rjmp	.+174    	; 0x23a8 <vfscanf+0x236>
    22fa:	3b 35       	cpi	r19, 0x5B	; 91
    22fc:	59 f4       	brne	.+22     	; 0x2314 <vfscanf+0x1a2>
    22fe:	92 01       	movw	r18, r4
    2300:	a6 01       	movw	r20, r12
    2302:	67 2d       	mov	r22, r7
    2304:	c8 01       	movw	r24, r16
    2306:	0e 94 11 10 	call	0x2022	; 0x2022 <conv_brk>
    230a:	2c 01       	movw	r4, r24
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	09 f0       	breq	.+2      	; 0x2312 <vfscanf+0x1a0>
    2310:	4b c0       	rjmp	.+150    	; 0x23a8 <vfscanf+0x236>
    2312:	45 c0       	rjmp	.+138    	; 0x239e <vfscanf+0x22c>
    2314:	c8 01       	movw	r24, r16
    2316:	39 83       	std	Y+1, r19	; 0x01
    2318:	0e 94 67 0f 	call	0x1ece	; 0x1ece <skip_spaces>
    231c:	39 81       	ldd	r19, Y+1	; 0x01
    231e:	97 fd       	sbrc	r25, 7
    2320:	47 c0       	rjmp	.+142    	; 0x23b0 <vfscanf+0x23e>
    2322:	3f 36       	cpi	r19, 0x6F	; 111
    2324:	69 f1       	breq	.+90     	; 0x2380 <vfscanf+0x20e>
    2326:	28 f4       	brcc	.+10     	; 0x2332 <vfscanf+0x1c0>
    2328:	34 36       	cpi	r19, 0x64	; 100
    232a:	31 f1       	breq	.+76     	; 0x2378 <vfscanf+0x206>
    232c:	39 36       	cpi	r19, 0x69	; 105
    232e:	79 f1       	breq	.+94     	; 0x238e <vfscanf+0x21c>
    2330:	2b c0       	rjmp	.+86     	; 0x2388 <vfscanf+0x216>
    2332:	33 37       	cpi	r19, 0x73	; 115
    2334:	69 f0       	breq	.+26     	; 0x2350 <vfscanf+0x1de>
    2336:	35 37       	cpi	r19, 0x75	; 117
    2338:	f9 f0       	breq	.+62     	; 0x2378 <vfscanf+0x206>
    233a:	26 c0       	rjmp	.+76     	; 0x2388 <vfscanf+0x216>
    233c:	c1 14       	cp	r12, r1
    233e:	d1 04       	cpc	r13, r1
    2340:	29 f0       	breq	.+10     	; 0x234c <vfscanf+0x1da>
    2342:	f6 01       	movw	r30, r12
    2344:	80 82       	st	Z, r8
    2346:	c6 01       	movw	r24, r12
    2348:	01 96       	adiw	r24, 0x01	; 1
    234a:	6c 01       	movw	r12, r24
    234c:	7a 94       	dec	r7
    234e:	71 f0       	breq	.+28     	; 0x236c <vfscanf+0x1fa>
    2350:	c8 01       	movw	r24, r16
    2352:	0e 94 19 12 	call	0x2432	; 0x2432 <fgetc>
    2356:	4c 01       	movw	r8, r24
    2358:	97 fd       	sbrc	r25, 7
    235a:	08 c0       	rjmp	.+16     	; 0x236c <vfscanf+0x1fa>
    235c:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <isspace>
    2360:	89 2b       	or	r24, r25
    2362:	61 f3       	breq	.-40     	; 0x233c <vfscanf+0x1ca>
    2364:	b8 01       	movw	r22, r16
    2366:	c4 01       	movw	r24, r8
    2368:	0e 94 89 12 	call	0x2512	; 0x2512 <ungetc>
    236c:	c1 14       	cp	r12, r1
    236e:	d1 04       	cpc	r13, r1
    2370:	d9 f0       	breq	.+54     	; 0x23a8 <vfscanf+0x236>
    2372:	f6 01       	movw	r30, r12
    2374:	10 82       	st	Z, r1
    2376:	18 c0       	rjmp	.+48     	; 0x23a8 <vfscanf+0x236>
    2378:	fb 2d       	mov	r31, r11
    237a:	f0 62       	ori	r31, 0x20	; 32
    237c:	bf 2e       	mov	r11, r31
    237e:	07 c0       	rjmp	.+14     	; 0x238e <vfscanf+0x21c>
    2380:	8b 2d       	mov	r24, r11
    2382:	80 61       	ori	r24, 0x10	; 16
    2384:	b8 2e       	mov	r11, r24
    2386:	03 c0       	rjmp	.+6      	; 0x238e <vfscanf+0x21c>
    2388:	9b 2d       	mov	r25, r11
    238a:	90 64       	ori	r25, 0x40	; 64
    238c:	b9 2e       	mov	r11, r25
    238e:	2b 2d       	mov	r18, r11
    2390:	a6 01       	movw	r20, r12
    2392:	67 2d       	mov	r22, r7
    2394:	c8 01       	movw	r24, r16
    2396:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <conv_int>
    239a:	81 11       	cpse	r24, r1
    239c:	05 c0       	rjmp	.+10     	; 0x23a8 <vfscanf+0x236>
    239e:	f8 01       	movw	r30, r16
    23a0:	83 81       	ldd	r24, Z+3	; 0x03
    23a2:	80 73       	andi	r24, 0x30	; 48
    23a4:	29 f4       	brne	.+10     	; 0x23b0 <vfscanf+0x23e>
    23a6:	06 c0       	rjmp	.+12     	; 0x23b4 <vfscanf+0x242>
    23a8:	b0 fc       	sbrc	r11, 0
    23aa:	fc ce       	rjmp	.-520    	; 0x21a4 <vfscanf+0x32>
    23ac:	a3 94       	inc	r10
    23ae:	fa ce       	rjmp	.-524    	; 0x21a4 <vfscanf+0x32>
    23b0:	aa 20       	and	r10, r10
    23b2:	19 f0       	breq	.+6      	; 0x23ba <vfscanf+0x248>
    23b4:	8a 2d       	mov	r24, r10
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <vfscanf+0x24c>
    23ba:	8f ef       	ldi	r24, 0xFF	; 255
    23bc:	9f ef       	ldi	r25, 0xFF	; 255
    23be:	0f 90       	pop	r0
    23c0:	df 91       	pop	r29
    23c2:	cf 91       	pop	r28
    23c4:	1f 91       	pop	r17
    23c6:	0f 91       	pop	r16
    23c8:	ff 90       	pop	r15
    23ca:	ef 90       	pop	r14
    23cc:	df 90       	pop	r13
    23ce:	cf 90       	pop	r12
    23d0:	bf 90       	pop	r11
    23d2:	af 90       	pop	r10
    23d4:	9f 90       	pop	r9
    23d6:	8f 90       	pop	r8
    23d8:	7f 90       	pop	r7
    23da:	5f 90       	pop	r5
    23dc:	4f 90       	pop	r4
    23de:	08 95       	ret

000023e0 <isspace>:
    23e0:	91 11       	cpse	r25, r1
    23e2:	0e c1       	rjmp	.+540    	; 0x2600 <__ctype_isfalse>
    23e4:	80 32       	cpi	r24, 0x20	; 32
    23e6:	19 f0       	breq	.+6      	; 0x23ee <isspace+0xe>
    23e8:	89 50       	subi	r24, 0x09	; 9
    23ea:	85 50       	subi	r24, 0x05	; 5
    23ec:	d0 f7       	brcc	.-12     	; 0x23e2 <isspace+0x2>
    23ee:	08 95       	ret

000023f0 <strchr_P>:
    23f0:	fc 01       	movw	r30, r24
    23f2:	05 90       	lpm	r0, Z+
    23f4:	06 16       	cp	r0, r22
    23f6:	21 f0       	breq	.+8      	; 0x2400 <strchr_P+0x10>
    23f8:	00 20       	and	r0, r0
    23fa:	d9 f7       	brne	.-10     	; 0x23f2 <strchr_P+0x2>
    23fc:	c0 01       	movw	r24, r0
    23fe:	08 95       	ret
    2400:	31 97       	sbiw	r30, 0x01	; 1
    2402:	cf 01       	movw	r24, r30
    2404:	08 95       	ret

00002406 <strnlen_P>:
    2406:	fc 01       	movw	r30, r24
    2408:	05 90       	lpm	r0, Z+
    240a:	61 50       	subi	r22, 0x01	; 1
    240c:	70 40       	sbci	r23, 0x00	; 0
    240e:	01 10       	cpse	r0, r1
    2410:	d8 f7       	brcc	.-10     	; 0x2408 <strnlen_P+0x2>
    2412:	80 95       	com	r24
    2414:	90 95       	com	r25
    2416:	8e 0f       	add	r24, r30
    2418:	9f 1f       	adc	r25, r31
    241a:	08 95       	ret

0000241c <strnlen>:
    241c:	fc 01       	movw	r30, r24
    241e:	61 50       	subi	r22, 0x01	; 1
    2420:	70 40       	sbci	r23, 0x00	; 0
    2422:	01 90       	ld	r0, Z+
    2424:	01 10       	cpse	r0, r1
    2426:	d8 f7       	brcc	.-10     	; 0x241e <strnlen+0x2>
    2428:	80 95       	com	r24
    242a:	90 95       	com	r25
    242c:	8e 0f       	add	r24, r30
    242e:	9f 1f       	adc	r25, r31
    2430:	08 95       	ret

00002432 <fgetc>:
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	ec 01       	movw	r28, r24
    2438:	2b 81       	ldd	r18, Y+3	; 0x03
    243a:	20 ff       	sbrs	r18, 0
    243c:	33 c0       	rjmp	.+102    	; 0x24a4 <fgetc+0x72>
    243e:	26 ff       	sbrs	r18, 6
    2440:	0a c0       	rjmp	.+20     	; 0x2456 <fgetc+0x24>
    2442:	2f 7b       	andi	r18, 0xBF	; 191
    2444:	2b 83       	std	Y+3, r18	; 0x03
    2446:	8e 81       	ldd	r24, Y+6	; 0x06
    2448:	9f 81       	ldd	r25, Y+7	; 0x07
    244a:	01 96       	adiw	r24, 0x01	; 1
    244c:	9f 83       	std	Y+7, r25	; 0x07
    244e:	8e 83       	std	Y+6, r24	; 0x06
    2450:	8a 81       	ldd	r24, Y+2	; 0x02
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	29 c0       	rjmp	.+82     	; 0x24a8 <fgetc+0x76>
    2456:	22 ff       	sbrs	r18, 2
    2458:	0f c0       	rjmp	.+30     	; 0x2478 <fgetc+0x46>
    245a:	e8 81       	ld	r30, Y
    245c:	f9 81       	ldd	r31, Y+1	; 0x01
    245e:	80 81       	ld	r24, Z
    2460:	99 27       	eor	r25, r25
    2462:	87 fd       	sbrc	r24, 7
    2464:	90 95       	com	r25
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	19 f4       	brne	.+6      	; 0x2470 <fgetc+0x3e>
    246a:	20 62       	ori	r18, 0x20	; 32
    246c:	2b 83       	std	Y+3, r18	; 0x03
    246e:	1a c0       	rjmp	.+52     	; 0x24a4 <fgetc+0x72>
    2470:	31 96       	adiw	r30, 0x01	; 1
    2472:	f9 83       	std	Y+1, r31	; 0x01
    2474:	e8 83       	st	Y, r30
    2476:	0e c0       	rjmp	.+28     	; 0x2494 <fgetc+0x62>
    2478:	ea 85       	ldd	r30, Y+10	; 0x0a
    247a:	fb 85       	ldd	r31, Y+11	; 0x0b
    247c:	09 95       	icall
    247e:	97 ff       	sbrs	r25, 7
    2480:	09 c0       	rjmp	.+18     	; 0x2494 <fgetc+0x62>
    2482:	2b 81       	ldd	r18, Y+3	; 0x03
    2484:	01 96       	adiw	r24, 0x01	; 1
    2486:	11 f4       	brne	.+4      	; 0x248c <fgetc+0x5a>
    2488:	80 e1       	ldi	r24, 0x10	; 16
    248a:	01 c0       	rjmp	.+2      	; 0x248e <fgetc+0x5c>
    248c:	80 e2       	ldi	r24, 0x20	; 32
    248e:	82 2b       	or	r24, r18
    2490:	8b 83       	std	Y+3, r24	; 0x03
    2492:	08 c0       	rjmp	.+16     	; 0x24a4 <fgetc+0x72>
    2494:	2e 81       	ldd	r18, Y+6	; 0x06
    2496:	3f 81       	ldd	r19, Y+7	; 0x07
    2498:	2f 5f       	subi	r18, 0xFF	; 255
    249a:	3f 4f       	sbci	r19, 0xFF	; 255
    249c:	3f 83       	std	Y+7, r19	; 0x07
    249e:	2e 83       	std	Y+6, r18	; 0x06
    24a0:	99 27       	eor	r25, r25
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <fgetc+0x76>
    24a4:	8f ef       	ldi	r24, 0xFF	; 255
    24a6:	9f ef       	ldi	r25, 0xFF	; 255
    24a8:	df 91       	pop	r29
    24aa:	cf 91       	pop	r28
    24ac:	08 95       	ret

000024ae <fputc>:
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	18 2f       	mov	r17, r24
    24b8:	09 2f       	mov	r16, r25
    24ba:	eb 01       	movw	r28, r22
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	81 fd       	sbrc	r24, 1
    24c0:	03 c0       	rjmp	.+6      	; 0x24c8 <fputc+0x1a>
    24c2:	8f ef       	ldi	r24, 0xFF	; 255
    24c4:	9f ef       	ldi	r25, 0xFF	; 255
    24c6:	20 c0       	rjmp	.+64     	; 0x2508 <fputc+0x5a>
    24c8:	82 ff       	sbrs	r24, 2
    24ca:	10 c0       	rjmp	.+32     	; 0x24ec <fputc+0x3e>
    24cc:	4e 81       	ldd	r20, Y+6	; 0x06
    24ce:	5f 81       	ldd	r21, Y+7	; 0x07
    24d0:	2c 81       	ldd	r18, Y+4	; 0x04
    24d2:	3d 81       	ldd	r19, Y+5	; 0x05
    24d4:	42 17       	cp	r20, r18
    24d6:	53 07       	cpc	r21, r19
    24d8:	7c f4       	brge	.+30     	; 0x24f8 <fputc+0x4a>
    24da:	e8 81       	ld	r30, Y
    24dc:	f9 81       	ldd	r31, Y+1	; 0x01
    24de:	9f 01       	movw	r18, r30
    24e0:	2f 5f       	subi	r18, 0xFF	; 255
    24e2:	3f 4f       	sbci	r19, 0xFF	; 255
    24e4:	39 83       	std	Y+1, r19	; 0x01
    24e6:	28 83       	st	Y, r18
    24e8:	10 83       	st	Z, r17
    24ea:	06 c0       	rjmp	.+12     	; 0x24f8 <fputc+0x4a>
    24ec:	e8 85       	ldd	r30, Y+8	; 0x08
    24ee:	f9 85       	ldd	r31, Y+9	; 0x09
    24f0:	81 2f       	mov	r24, r17
    24f2:	09 95       	icall
    24f4:	89 2b       	or	r24, r25
    24f6:	29 f7       	brne	.-54     	; 0x24c2 <fputc+0x14>
    24f8:	2e 81       	ldd	r18, Y+6	; 0x06
    24fa:	3f 81       	ldd	r19, Y+7	; 0x07
    24fc:	2f 5f       	subi	r18, 0xFF	; 255
    24fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2500:	3f 83       	std	Y+7, r19	; 0x07
    2502:	2e 83       	std	Y+6, r18	; 0x06
    2504:	81 2f       	mov	r24, r17
    2506:	90 2f       	mov	r25, r16
    2508:	df 91       	pop	r29
    250a:	cf 91       	pop	r28
    250c:	1f 91       	pop	r17
    250e:	0f 91       	pop	r16
    2510:	08 95       	ret

00002512 <ungetc>:
    2512:	fb 01       	movw	r30, r22
    2514:	23 81       	ldd	r18, Z+3	; 0x03
    2516:	20 ff       	sbrs	r18, 0
    2518:	12 c0       	rjmp	.+36     	; 0x253e <ungetc+0x2c>
    251a:	26 fd       	sbrc	r18, 6
    251c:	10 c0       	rjmp	.+32     	; 0x253e <ungetc+0x2c>
    251e:	8f 3f       	cpi	r24, 0xFF	; 255
    2520:	3f ef       	ldi	r19, 0xFF	; 255
    2522:	93 07       	cpc	r25, r19
    2524:	61 f0       	breq	.+24     	; 0x253e <ungetc+0x2c>
    2526:	82 83       	std	Z+2, r24	; 0x02
    2528:	2f 7d       	andi	r18, 0xDF	; 223
    252a:	20 64       	ori	r18, 0x40	; 64
    252c:	23 83       	std	Z+3, r18	; 0x03
    252e:	26 81       	ldd	r18, Z+6	; 0x06
    2530:	37 81       	ldd	r19, Z+7	; 0x07
    2532:	21 50       	subi	r18, 0x01	; 1
    2534:	31 09       	sbc	r19, r1
    2536:	37 83       	std	Z+7, r19	; 0x07
    2538:	26 83       	std	Z+6, r18	; 0x06
    253a:	99 27       	eor	r25, r25
    253c:	08 95       	ret
    253e:	8f ef       	ldi	r24, 0xFF	; 255
    2540:	9f ef       	ldi	r25, 0xFF	; 255
    2542:	08 95       	ret

00002544 <__ultoa_invert>:
    2544:	fa 01       	movw	r30, r20
    2546:	aa 27       	eor	r26, r26
    2548:	28 30       	cpi	r18, 0x08	; 8
    254a:	51 f1       	breq	.+84     	; 0x25a0 <__ultoa_invert+0x5c>
    254c:	20 31       	cpi	r18, 0x10	; 16
    254e:	81 f1       	breq	.+96     	; 0x25b0 <__ultoa_invert+0x6c>
    2550:	e8 94       	clt
    2552:	6f 93       	push	r22
    2554:	6e 7f       	andi	r22, 0xFE	; 254
    2556:	6e 5f       	subi	r22, 0xFE	; 254
    2558:	7f 4f       	sbci	r23, 0xFF	; 255
    255a:	8f 4f       	sbci	r24, 0xFF	; 255
    255c:	9f 4f       	sbci	r25, 0xFF	; 255
    255e:	af 4f       	sbci	r26, 0xFF	; 255
    2560:	b1 e0       	ldi	r27, 0x01	; 1
    2562:	3e d0       	rcall	.+124    	; 0x25e0 <__ultoa_invert+0x9c>
    2564:	b4 e0       	ldi	r27, 0x04	; 4
    2566:	3c d0       	rcall	.+120    	; 0x25e0 <__ultoa_invert+0x9c>
    2568:	67 0f       	add	r22, r23
    256a:	78 1f       	adc	r23, r24
    256c:	89 1f       	adc	r24, r25
    256e:	9a 1f       	adc	r25, r26
    2570:	a1 1d       	adc	r26, r1
    2572:	68 0f       	add	r22, r24
    2574:	79 1f       	adc	r23, r25
    2576:	8a 1f       	adc	r24, r26
    2578:	91 1d       	adc	r25, r1
    257a:	a1 1d       	adc	r26, r1
    257c:	6a 0f       	add	r22, r26
    257e:	71 1d       	adc	r23, r1
    2580:	81 1d       	adc	r24, r1
    2582:	91 1d       	adc	r25, r1
    2584:	a1 1d       	adc	r26, r1
    2586:	20 d0       	rcall	.+64     	; 0x25c8 <__ultoa_invert+0x84>
    2588:	09 f4       	brne	.+2      	; 0x258c <__ultoa_invert+0x48>
    258a:	68 94       	set
    258c:	3f 91       	pop	r19
    258e:	2a e0       	ldi	r18, 0x0A	; 10
    2590:	26 9f       	mul	r18, r22
    2592:	11 24       	eor	r1, r1
    2594:	30 19       	sub	r19, r0
    2596:	30 5d       	subi	r19, 0xD0	; 208
    2598:	31 93       	st	Z+, r19
    259a:	de f6       	brtc	.-74     	; 0x2552 <__ultoa_invert+0xe>
    259c:	cf 01       	movw	r24, r30
    259e:	08 95       	ret
    25a0:	46 2f       	mov	r20, r22
    25a2:	47 70       	andi	r20, 0x07	; 7
    25a4:	40 5d       	subi	r20, 0xD0	; 208
    25a6:	41 93       	st	Z+, r20
    25a8:	b3 e0       	ldi	r27, 0x03	; 3
    25aa:	0f d0       	rcall	.+30     	; 0x25ca <__ultoa_invert+0x86>
    25ac:	c9 f7       	brne	.-14     	; 0x25a0 <__ultoa_invert+0x5c>
    25ae:	f6 cf       	rjmp	.-20     	; 0x259c <__ultoa_invert+0x58>
    25b0:	46 2f       	mov	r20, r22
    25b2:	4f 70       	andi	r20, 0x0F	; 15
    25b4:	40 5d       	subi	r20, 0xD0	; 208
    25b6:	4a 33       	cpi	r20, 0x3A	; 58
    25b8:	18 f0       	brcs	.+6      	; 0x25c0 <__ultoa_invert+0x7c>
    25ba:	49 5d       	subi	r20, 0xD9	; 217
    25bc:	31 fd       	sbrc	r19, 1
    25be:	40 52       	subi	r20, 0x20	; 32
    25c0:	41 93       	st	Z+, r20
    25c2:	02 d0       	rcall	.+4      	; 0x25c8 <__ultoa_invert+0x84>
    25c4:	a9 f7       	brne	.-22     	; 0x25b0 <__ultoa_invert+0x6c>
    25c6:	ea cf       	rjmp	.-44     	; 0x259c <__ultoa_invert+0x58>
    25c8:	b4 e0       	ldi	r27, 0x04	; 4
    25ca:	a6 95       	lsr	r26
    25cc:	97 95       	ror	r25
    25ce:	87 95       	ror	r24
    25d0:	77 95       	ror	r23
    25d2:	67 95       	ror	r22
    25d4:	ba 95       	dec	r27
    25d6:	c9 f7       	brne	.-14     	; 0x25ca <__ultoa_invert+0x86>
    25d8:	00 97       	sbiw	r24, 0x00	; 0
    25da:	61 05       	cpc	r22, r1
    25dc:	71 05       	cpc	r23, r1
    25de:	08 95       	ret
    25e0:	9b 01       	movw	r18, r22
    25e2:	ac 01       	movw	r20, r24
    25e4:	0a 2e       	mov	r0, r26
    25e6:	06 94       	lsr	r0
    25e8:	57 95       	ror	r21
    25ea:	47 95       	ror	r20
    25ec:	37 95       	ror	r19
    25ee:	27 95       	ror	r18
    25f0:	ba 95       	dec	r27
    25f2:	c9 f7       	brne	.-14     	; 0x25e6 <__ultoa_invert+0xa2>
    25f4:	62 0f       	add	r22, r18
    25f6:	73 1f       	adc	r23, r19
    25f8:	84 1f       	adc	r24, r20
    25fa:	95 1f       	adc	r25, r21
    25fc:	a0 1d       	adc	r26, r0
    25fe:	08 95       	ret

00002600 <__ctype_isfalse>:
    2600:	99 27       	eor	r25, r25
    2602:	88 27       	eor	r24, r24

00002604 <__ctype_istrue>:
    2604:	08 95       	ret

00002606 <__prologue_saves__>:
    2606:	2f 92       	push	r2
    2608:	3f 92       	push	r3
    260a:	4f 92       	push	r4
    260c:	5f 92       	push	r5
    260e:	6f 92       	push	r6
    2610:	7f 92       	push	r7
    2612:	8f 92       	push	r8
    2614:	9f 92       	push	r9
    2616:	af 92       	push	r10
    2618:	bf 92       	push	r11
    261a:	cf 92       	push	r12
    261c:	df 92       	push	r13
    261e:	ef 92       	push	r14
    2620:	ff 92       	push	r15
    2622:	0f 93       	push	r16
    2624:	1f 93       	push	r17
    2626:	cf 93       	push	r28
    2628:	df 93       	push	r29
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	ca 1b       	sub	r28, r26
    2630:	db 0b       	sbc	r29, r27
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	cd bf       	out	0x3d, r28	; 61
    263c:	09 94       	ijmp

0000263e <__epilogue_restores__>:
    263e:	2a 88       	ldd	r2, Y+18	; 0x12
    2640:	39 88       	ldd	r3, Y+17	; 0x11
    2642:	48 88       	ldd	r4, Y+16	; 0x10
    2644:	5f 84       	ldd	r5, Y+15	; 0x0f
    2646:	6e 84       	ldd	r6, Y+14	; 0x0e
    2648:	7d 84       	ldd	r7, Y+13	; 0x0d
    264a:	8c 84       	ldd	r8, Y+12	; 0x0c
    264c:	9b 84       	ldd	r9, Y+11	; 0x0b
    264e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2650:	b9 84       	ldd	r11, Y+9	; 0x09
    2652:	c8 84       	ldd	r12, Y+8	; 0x08
    2654:	df 80       	ldd	r13, Y+7	; 0x07
    2656:	ee 80       	ldd	r14, Y+6	; 0x06
    2658:	fd 80       	ldd	r15, Y+5	; 0x05
    265a:	0c 81       	ldd	r16, Y+4	; 0x04
    265c:	1b 81       	ldd	r17, Y+3	; 0x03
    265e:	aa 81       	ldd	r26, Y+2	; 0x02
    2660:	b9 81       	ldd	r27, Y+1	; 0x01
    2662:	ce 0f       	add	r28, r30
    2664:	d1 1d       	adc	r29, r1
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
    2670:	ed 01       	movw	r28, r26
    2672:	08 95       	ret

00002674 <_exit>:
    2674:	f8 94       	cli

00002676 <__stop_program>:
    2676:	ff cf       	rjmp	.-2      	; 0x2676 <__stop_program>


hello_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b4  00800100  0000219c  00002230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000219c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  008002b4  008002b4  000023e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000023e4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000250  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003824  00000000  00000000  00002690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dee  00000000  00000000  00005eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d84  00000000  00000000  00006ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000056c  00000000  00000000  00007a28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008d2  00000000  00000000  00007f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000017c0  00000000  00000000  00008866  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002c8  00000000  00000000  0000a026  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__ctors_end>
       4:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__vector_1>
       8:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
       c:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__vector_3>
      10:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      14:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      18:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      1c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      20:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      24:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      28:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      2c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      30:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      34:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      38:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      3c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      40:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      44:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      48:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      4c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      50:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__vector_20>
      54:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      58:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      5c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      60:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      64:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      68:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      6c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>

00000070 <Menu_4_1>:
      70:	07 01 d3 01 d3 01 58 01 d3 01 a0 04 00 00 70 72     ......X.......pr
      80:	65 73 73 20 44 20 66 6f 72 20 44 45 4d 4f 00        ess D for DEMO.

0000008f <Menu_3_1>:
      8f:	07 01 d3 01 d3 01 78 01 d3 01 a0 04 ab 04 70 72     ......x.......pr
      9f:	65 73 73 20 71 20 66 6f 72 20 64 65 62 75 67 20     ess q for debug 
      af:	69 6e 66 6f 00                                      info.

000000b4 <Menu_2_3>:
      b4:	07 03 d3 01 cc 00 9c 01 d3 01 a0 04 00 00 54 75     ..............Tu
      c4:	6e 69 6e 67 20 4b 64 00                             ning Kd.

000000cc <Menu_2_2>:
      cc:	07 02 b4 00 e4 00 9c 01 d3 01 a0 04 00 00 54 75     ..............Tu
      dc:	6e 69 6e 67 20 4b 69 00                             ning Ki.

000000e4 <Menu_2_1>:
      e4:	07 01 cc 00 d3 01 9c 01 d3 01 a0 04 00 00 54 75     ..............Tu
      f4:	6e 69 6e 67 20 4b 70 00                             ning Kp.

000000fc <Menu_1_3>:
      fc:	07 03 d3 01 14 01 b9 01 d3 01 a0 04 00 00 41 75     ..............Au
     10c:	74 6f 20 50 6c 61 79 00                             to Play.

00000114 <Menu_1_2>:
     114:	07 02 fc 00 37 01 b9 01 d3 01 a0 04 00 00 50 6c     ....7.........Pl
     124:	61 79 20 77 69 74 68 20 53 6d 61 72 74 50 68 6f     ay with SmartPho
     134:	6e 65 00                                            ne.

00000137 <Menu_1_1>:
     137:	07 01 14 01 d3 01 b9 01 d3 01 a0 04 00 00 50 6c     ..............Pl
     147:	61 79 20 77 69 74 68 20 4a 6f 79 73 74 69 63 6b     ay with Joystick
	...

00000158 <Menu_4>:
     158:	14 05 d3 01 78 01 d3 01 70 00 a0 04 00 00 44 75     ....x...p.....Du
     168:	61 6c 20 42 75 66 66 65 72 20 44 65 6d 6f 21 00     al Buffer Demo!.

00000178 <Menu_3>:
     178:	0f 04 58 01 9c 01 d3 01 8f 00 a0 04 00 00 4f 6e     ..X...........On
     188:	20 74 68 65 20 46 6c 79 20 44 65 62 75 67 67 69      the Fly Debuggi
     198:	6e 67 21 00                                         ng!.

0000019c <Menu_2>:
     19c:	0a 03 78 01 b9 01 d3 01 e4 00 a0 04 00 00 4f 6e     ..x...........On
     1ac:	6c 69 6e 65 20 54 75 6e 69 6e 67 21 00              line Tuning!.

000001b9 <Menu_1>:
     1b9:	05 02 9c 01 d3 01 d3 01 37 01 a0 04 00 00 4c 65     ........7.....Le
     1c9:	74 27 73 20 50 6c 61 79 21 00                       t's Play!.

000001d3 <NULL_MENU>:
	...

000001e1 <font>:
     1e1:	00 00 00 00 00 00 00 5e 00 00 00 0e 00 0e 00 28     .......^.......(
     1f1:	7c 28 7c 28 08 54 7c 54 20 26 10 08 64 00 28 54     |(|(.T|T &..d.(T
     201:	28 40 00 00 00 0e 00 00 00 3c 42 00 00 00 42 3c     (@.......<B...B<
     211:	00 00 00 54 38 54 00 10 10 7c 10 10 00 80 60 20     ...T8T...|....` 
     221:	00 10 10 10 10 00 00 60 60 00 00 20 10 08 04 00     .......``.. ....
     231:	00 3c 42 3c 00 00 44 7e 40 00 44 62 52 4c 00 22     .<B<..D~@.DbRL."
     241:	4a 4a 36 00 18 14 7e 10 00 2e 4a 4a 32 00 3c 4a     JJ6...~...JJ2.<J
     251:	4a 30 00 02 62 1a 06 00 34 4a 4a 34 00 0c 52 52     J0..b...4JJ4..RR
     261:	3c 00 00 6c 6c 00 00 80 6c 2c 00 00 00 10 28 44     <..ll...l,....(D
     271:	00 28 28 28 28 00 00 44 28 10 00 00 04 52 0c 00     .((((..D(....R..
     281:	3c 42 5a 1c 00 7c 12 12 7c 00 7e 4a 4a 34 00 3c     <BZ..|..|.~JJ4.<
     291:	42 42 24 00 7e 42 42 3c 00 7e 4a 4a 42 00 7e 0a     BB$.~BB<.~JJB.~.
     2a1:	0a 02 00 3c 42 52 74 00 7e 08 08 7e 00 00 42 7e     ...<BRt.~..~..B~
     2b1:	42 00 20 40 40 3e 00 7e 18 24 42 00 7e 40 40 40     B. @@>.~.$B.~@@@
     2c1:	00 7e 0c 0c 7e 00 7e 0c 30 7e 00 3c 42 42 3c 00     .~..~.~.0~.<BB<.
     2d1:	7e 12 12 0c 00 3c 62 42 bc 00 7e 12 32 4c 00 24     ~....<bB..~.2L.$
     2e1:	4a 52 24 00 00 02 7e 02 00 3e 40 40 3e 00 1e 60     JR$...~..>@@>..`
     2f1:	60 1e 00 7e 30 30 7e 00 66 18 18 66 00 00 0e 70     `..~00~.f..f...p
     301:	0e 00 62 52 4a 46 00 00 7e 42 42 00 04 08 10 20     ..bRJF..~BB.... 
     311:	00 00 42 42 7e 00 00 04 02 04 00 40 40 40 40 00     ..BB~......@@@@.
     321:	00 02 04 00 00 30 48 28 78 00 7e 48 48 30 00 30     .....0H(x.~HH0.0
     331:	48 48 00 00 30 48 48 7e 00 30 68 58 10 00 10 7c     HH..0HH~.0hX...|
     341:	12 04 00 50 a8 a8 98 00 7e 08 08 70 00 00 48 7a     ...P....~..p..Hz
     351:	40 00 00 40 80 7a 00 7e 10 28 40 00 00 42 7e 40     @..@.z.~.(@..B~@
     361:	00 78 10 18 70 00 78 08 08 70 00 30 48 48 30 00     .x..p.x..p.0HH0.
     371:	f8 48 48 30 00 30 48 48 f8 00 78 08 08 10 00 50     .HH0.0HH..x....P
     381:	58 68 28 00 08 3e 48 40 00 38 40 40 78 00 00 38     Xh(..>H@.8@@x..8
     391:	40 38 00 78 60 60 78 00 48 30 30 48 00 18 a0 40     @8.x``x.H00H...@
     3a1:	38 00 48 68 58 48 00 00 08 3c 42 00 00 00 7e 00     8.HhXH...<B...~.
     3b1:	00 00 42 3c 08 00 04 02 04 02 00                    ..B<.......

000003bc <__c.2299>:
     3bc:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

000003c8 <__ctors_end>:
     3c8:	11 24       	eor	r1, r1
     3ca:	1f be       	out	0x3f, r1	; 63
     3cc:	cf ef       	ldi	r28, 0xFF	; 255
     3ce:	d4 e0       	ldi	r29, 0x04	; 4
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	cd bf       	out	0x3d, r28	; 61

000003d4 <__do_copy_data>:
     3d4:	12 e0       	ldi	r17, 0x02	; 2
     3d6:	a0 e0       	ldi	r26, 0x00	; 0
     3d8:	b1 e0       	ldi	r27, 0x01	; 1
     3da:	ec e9       	ldi	r30, 0x9C	; 156
     3dc:	f1 e2       	ldi	r31, 0x21	; 33
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <__do_copy_data+0x10>
     3e0:	05 90       	lpm	r0, Z+
     3e2:	0d 92       	st	X+, r0
     3e4:	a4 3b       	cpi	r26, 0xB4	; 180
     3e6:	b1 07       	cpc	r27, r17
     3e8:	d9 f7       	brne	.-10     	; 0x3e0 <__do_copy_data+0xc>

000003ea <__do_clear_bss>:
     3ea:	22 e0       	ldi	r18, 0x02	; 2
     3ec:	a4 eb       	ldi	r26, 0xB4	; 180
     3ee:	b2 e0       	ldi	r27, 0x02	; 2
     3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <.do_clear_bss_start>

000003f2 <.do_clear_bss_loop>:
     3f2:	1d 92       	st	X+, r1

000003f4 <.do_clear_bss_start>:
     3f4:	a3 3e       	cpi	r26, 0xE3	; 227
     3f6:	b2 07       	cpc	r27, r18
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <.do_clear_bss_loop>
     3fa:	0e 94 ce 04 	call	0x99c	; 0x99c <main>
     3fe:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <_exit>

00000402 <__bad_interrupt>:
     402:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000406 <adc_read>:
uint8_t adc_read(int channel)
{
	uint8_t data=0;
	int i=0;
	
	volatile uint8_t *p_write= (uint8_t *) (ADC_ADDR_START+channel);
     406:	fc 01       	movw	r30, r24
     408:	fc 5e       	subi	r31, 0xEC	; 236
	volatile uint8_t *p_read= (uint8_t*) (ADC_ADDR_START);
	*p_write=channel;		//select Channel of ADC
     40a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     40c:	26 ea       	ldi	r18, 0xA6	; 166
     40e:	2a 95       	dec	r18
     410:	f1 f7       	brne	.-4      	; 0x40e <adc_read+0x8>
     412:	00 c0       	rjmp	.+0      	; 0x414 <adc_read+0xe>
	_delay_us(500);
	
	data=*p_read;		//read data from ADC
     414:	80 91 00 14 	lds	r24, 0x1400
	i=data;
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	36 ea       	ldi	r19, 0xA6	; 166
     41c:	3a 95       	dec	r19
     41e:	f1 f7       	brne	.-4      	; 0x41c <adc_read+0x16>
     420:	00 c0       	rjmp	.+0      	; 0x422 <adc_read+0x1c>
	_delay_us(500);
	data=*p_read;		//read data from ADC
     422:	20 91 00 14 	lds	r18, 0x1400
	i+=data;
     426:	82 0f       	add	r24, r18
     428:	91 1d       	adc	r25, r1
     42a:	26 ea       	ldi	r18, 0xA6	; 166
     42c:	2a 95       	dec	r18
     42e:	f1 f7       	brne	.-4      	; 0x42c <adc_read+0x26>
     430:	00 c0       	rjmp	.+0      	; 0x432 <adc_read+0x2c>
	_delay_us(500);
	data=*p_read;		//read data from ADC
     432:	20 91 00 14 	lds	r18, 0x1400
     436:	36 ea       	ldi	r19, 0xA6	; 166
     438:	3a 95       	dec	r19
     43a:	f1 f7       	brne	.-4      	; 0x438 <adc_read+0x32>
     43c:	00 c0       	rjmp	.+0      	; 0x43e <adc_read+0x38>
	i+=data;
     43e:	82 0f       	add	r24, r18
     440:	91 1d       	adc	r25, r1
	_delay_us(500);

	data=(uint8_t) (i/3);		//Average 3 samples
     442:	63 e0       	ldi	r22, 0x03	; 3
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	0e 94 1f 0a 	call	0x143e	; 0x143e <__divmodhi4>
     44a:	86 2f       	mov	r24, r22
	return data;
	
}
     44c:	08 95       	ret

0000044e <adc_calibrate>:
	
	
	volatile uint8_t *p_read= (uint8_t *) (ADC_ADDR_START);
	
	
	data=*p_read;		//read data from ADC
     44e:	80 91 00 14 	lds	r24, 0x1400
     452:	8a e0       	ldi	r24, 0x0A	; 10
     454:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t adc_calibrate(int channel)
{
	uint8_t data=0;
	uint16_t i=0;
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	30 e0       	ldi	r19, 0x00	; 0
	
	
	data=*p_read;		//read data from ADC
	int j;
	for(j = 0; j< 10; j++){
		data=*p_read;
     45a:	e0 e0       	ldi	r30, 0x00	; 0
     45c:	f4 e1       	ldi	r31, 0x14	; 20
     45e:	40 81       	ld	r20, Z
		i+=data;
     460:	24 0f       	add	r18, r20
     462:	31 1d       	adc	r19, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     464:	a7 ea       	ldi	r26, 0xA7	; 167
     466:	b1 e6       	ldi	r27, 0x61	; 97
     468:	11 97       	sbiw	r26, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <adc_calibrate+0x1a>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <adc_calibrate+0x20>
     46e:	00 00       	nop
     470:	01 97       	sbiw	r24, 0x01	; 1
	volatile uint8_t *p_read= (uint8_t *) (ADC_ADDR_START);
	
	
	data=*p_read;		//read data from ADC
	int j;
	for(j = 0; j< 10; j++){
     472:	00 97       	sbiw	r24, 0x00	; 0
     474:	a1 f7       	brne	.-24     	; 0x45e <adc_calibrate+0x10>
		data=*p_read;
		i+=data;
		_delay_ms(100);	
	}
	data=(uint8_t) (i/10);			//Average 10 samples
     476:	ad ec       	ldi	r26, 0xCD	; 205
     478:	bc ec       	ldi	r27, 0xCC	; 204
     47a:	0e 94 33 0a 	call	0x1466	; 0x1466 <__umulhisi3>
     47e:	96 95       	lsr	r25
     480:	87 95       	ror	r24
     482:	96 95       	lsr	r25
     484:	87 95       	ror	r24
     486:	96 95       	lsr	r25
     488:	87 95       	ror	r24
	return data;
	
}
     48a:	08 95       	ret

0000048c <adc_init>:

static uint8_t x_mean=0,y_mean=0;

void adc_init(void)
{
	MCUCR |= (1<<SRE);		//Enable XMEM interface
     48c:	85 b7       	in	r24, 0x35	; 53
     48e:	80 68       	ori	r24, 0x80	; 128
     490:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);		//Mask out higher 4 bits of address
     492:	80 b7       	in	r24, 0x30	; 48
     494:	80 62       	ori	r24, 0x20	; 32
     496:	80 bf       	out	0x30, r24	; 48
	x_mean=adc_calibrate(X_CH);
     498:	86 e0       	ldi	r24, 0x06	; 6
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 27 02 	call	0x44e	; 0x44e <adc_calibrate>
     4a0:	80 93 b5 02 	sts	0x02B5, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a4:	80 e1       	ldi	r24, 0x10	; 16
     4a6:	8a 95       	dec	r24
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <adc_init+0x1a>
     4aa:	00 c0       	rjmp	.+0      	; 0x4ac <adc_init+0x20>
	_delay_us(50);
	y_mean=adc_calibrate(Y_CH);
     4ac:	84 e0       	ldi	r24, 0x04	; 4
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0e 94 27 02 	call	0x44e	; 0x44e <adc_calibrate>
     4b4:	80 93 b4 02 	sts	0x02B4, r24
     4b8:	80 e1       	ldi	r24, 0x10	; 16
     4ba:	8a 95       	dec	r24
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <adc_init+0x2e>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <adc_init+0x34>
     4c0:	08 95       	ret

000004c2 <adc_get_position>:
	*y_val=(signed int) ((*y_val-y_mean)*100/128);
}

//struct adc_pos {int16_t x; int16_t y;};
	
struct adc_pos adc_get_position(void){
     4c2:	cf 93       	push	r28
	struct adc_pos pos;


	pos.x = adc_read(X_CH);
     4c4:	86 e0       	ldi	r24, 0x06	; 6
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 03 02 	call	0x406	; 0x406 <adc_read>
     4cc:	c8 2f       	mov	r28, r24
	pos.y = adc_read(Y_CH);//-y_mean;
     4ce:	84 e0       	ldi	r24, 0x04	; 4
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 03 02 	call	0x406	; 0x406 <adc_read>
	//
	return pos;
     4d6:	6c 2f       	mov	r22, r28
     4d8:	78 2f       	mov	r23, r24
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <spi_config>:

		//SPI FUNCTIONS

void spi_config(void)
{
	DDRB |= (1<<SS) | (1<<MOSI) | (1<<SCK);		//set MOSI, SS and SCK as output
     4e0:	87 b3       	in	r24, 0x17	; 23
     4e2:	80 6b       	ori	r24, 0xB0	; 176
     4e4:	87 bb       	out	0x17, r24	; 23
	PORTB|=(1<<SS);								//set SS high to disable slave
     4e6:	c4 9a       	sbi	0x18, 4	; 24
	SPCR |= (1<<SPE) | (1<<MSTR);				//enable spi in master mode,non-interrupt,MSB first,Leading Edge=Rising,sample at leading edge,fosc/4 is SCK
     4e8:	8d b1       	in	r24, 0x0d	; 13
     4ea:	80 65       	ori	r24, 0x50	; 80
     4ec:	8d b9       	out	0x0d, r24	; 13
     4ee:	08 95       	ret

000004f0 <spi_chipselect>:
}


void spi_chipselect(uint8_t signal)
{
	if(signal==1)
     4f0:	81 30       	cpi	r24, 0x01	; 1
     4f2:	11 f4       	brne	.+4      	; 0x4f8 <spi_chipselect+0x8>
	{
		PORTB &= ~(1<<SS);					//set SS=0 and enable slave, define enable 1 in main prog!!!
     4f4:	c4 98       	cbi	0x18, 4	; 24
     4f6:	08 95       	ret
	}
	else
	{
		PORTB |=(1<<SS);					//set SS=1 and disable slave, define disable 0 in main prog!!!
     4f8:	c4 9a       	sbi	0x18, 4	; 24
     4fa:	08 95       	ret

000004fc <spi_tx_rx>:

unsigned char spi_tx_rx(unsigned char data)
{
	char rx_data;

	SPDR=data;							//sent data on SPI
     4fc:	8f b9       	out	0x0f, r24	; 15

	while(!(SPSR & (1<<SPIF)));			//wait until flag is not equal to 1
     4fe:	77 9b       	sbis	0x0e, 7	; 14
     500:	fe cf       	rjmp	.-4      	; 0x4fe <spi_tx_rx+0x2>

	rx_data=SPDR;						//receive data from spi
     502:	8f b1       	in	r24, 0x0f	; 15
	return rx_data;
}
     504:	08 95       	ret

00000506 <can_reset>:
		

void can_reset(void)
{
	//ENABLE SLAVE AND SEND TRANSMIT CODE
	spi_chipselect(ENABLE);
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	spi_tx_rx(RESET);
     50c:	80 ec       	ldi	r24, 0xC0	; 192
     50e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	spi_chipselect(DISABLE);
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
     518:	08 95       	ret

0000051a <can_rx_if_clear>:


void can_rx_if_clear(void)
{
	
	spi_chipselect(ENABLE);
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	
	spi_tx_rx(BIT_MODIFY_CMD);			
     520:	85 e0       	ldi	r24, 0x05	; 5
     522:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	spi_tx_rx(INT_FLAG_ADDR);
     526:	8c e2       	ldi	r24, 0x2C	; 44
     528:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	spi_tx_rx(RX_MASK);			
     52c:	8f ef       	ldi	r24, 0xFF	; 255
     52e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	spi_tx_rx(0x00);				//send 0x00 to clear flags
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	
	spi_chipselect(DISABLE);
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
     53e:	08 95       	ret

00000540 <can_transmit>:
}


void can_transmit(uint8_t buff_num,uint8_t msg_id,uint8_t length, char *data)		//ask that can we for address use 8_t!!!!!
{
     540:	ef 92       	push	r14
     542:	ff 92       	push	r15
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	c8 2f       	mov	r28, r24
     54e:	d6 2f       	mov	r29, r22
     550:	04 2f       	mov	r16, r20
     552:	e2 2e       	mov	r14, r18
     554:	13 2f       	mov	r17, r19

	unsigned char temp=0;
	//always maximum priority is used, standard frames no remote request

	spi_chipselect(ENABLE);		//enable slave (mcp)
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>


			//check for pending transmissions

	
	spi_tx_rx((unsigned char)READ_CMD);
     55c:	83 e0       	ldi	r24, 0x03	; 3
     55e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>

	spi_tx_rx((unsigned char)0x30+(buff_num*0x10));		//send address of Transmit Control Register (add 10 to base address to point to other buffers)
     562:	8c 2f       	mov	r24, r28
     564:	82 95       	swap	r24
     566:	80 7f       	andi	r24, 0xF0	; 240
     568:	0f 2e       	mov	r0, r31
     56a:	f0 e3       	ldi	r31, 0x30	; 48
     56c:	ff 2e       	mov	r15, r31
     56e:	f0 2d       	mov	r31, r0
     570:	f8 0e       	add	r15, r24
     572:	8f 2d       	mov	r24, r15
     574:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>

	temp=spi_tx_rx((unsigned char)0);			//send zero and get status of buffer (Transmit Control Register) in temp
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
		temp=spi_tx_rx((unsigned char)0);			//send zero and get status of buffer (Transmit Control Register) in temp
		
		spi_chipselect(DISABLE);
	}
*/
	spi_chipselect(DISABLE);
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>

			//preparing TX buffer to start transmission
	
		//priority
		
	spi_chipselect(ENABLE);
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>

	spi_tx_rx((unsigned char)WRITE_CMD);		//send write command when flag is cleared
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>

	spi_tx_rx((unsigned char)0x30+(buff_num*0x10));		//send address of Transmit Control Register (add 10 to base address to point to other registers)
     590:	8f 2d       	mov	r24, r15
     592:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>

	spi_tx_rx((unsigned char)0x03);			//send message priority as highest (first 2 bits in control register)!!!!
     596:	83 e0       	ldi	r24, 0x03	; 3
     598:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>

	spi_chipselect(DISABLE);
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	
	//higher byte of ID
	
	spi_chipselect(ENABLE);
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>

	spi_tx_rx(WRITE_CMD);
     5a8:	82 e0       	ldi	r24, 0x02	; 2
     5aa:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	
	spi_tx_rx(0x31+(buff_num*0x10));		//send address of Transmit Buffer Std. Identifier HIGH Register (add 10 to base address to point to other registers)
     5ae:	c2 95       	swap	r28
     5b0:	c0 7f       	andi	r28, 0xF0	; 240
     5b2:	81 e3       	ldi	r24, 0x31	; 49
     5b4:	8c 0f       	add	r24, r28
     5b6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>

	spi_tx_rx((unsigned char)msg_id>>3);			//shift out lower 3 bits!!!!
     5ba:	8d 2f       	mov	r24, r29
     5bc:	86 95       	lsr	r24
     5be:	86 95       	lsr	r24
     5c0:	86 95       	lsr	r24
     5c2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>

	spi_chipselect(DISABLE);
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	
		//lower byte of ID
	
	spi_chipselect(ENABLE);
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	
	spi_tx_rx(WRITE_CMD);
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	
	spi_tx_rx((unsigned char)0x32+(buff_num*0x10));		//send address of Transmit Buffer Std. Identifier LOW Register (add 10 to base address to point to other registers)
     5d8:	82 e3       	ldi	r24, 0x32	; 50
     5da:	8c 0f       	add	r24, r28
     5dc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>

	spi_tx_rx((unsigned char)msg_id<<5);			//shift lower 5 bits to higher position!!!!
     5e0:	8d 2f       	mov	r24, r29
     5e2:	82 95       	swap	r24
     5e4:	88 0f       	add	r24, r24
     5e6:	80 7e       	andi	r24, 0xE0	; 224
     5e8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	
	spi_chipselect(DISABLE);
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	
		//length of data
	
	spi_chipselect(ENABLE);
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	
	spi_tx_rx(WRITE_CMD);
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>

	spi_tx_rx((unsigned char)0x35+(buff_num*0x10));		//send address of Transmit Buffer Data Length Register, RTR is always 0!!!
     5fe:	85 e3       	ldi	r24, 0x35	; 53
     600:	8c 0f       	add	r24, r28
     602:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>

	spi_tx_rx((unsigned char)(length & 0x0F));			//only lower 4 bits of length are used, RTR=0
     606:	80 2f       	mov	r24, r16
     608:	8f 70       	andi	r24, 0x0F	; 15
     60a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	
	spi_chipselect(DISABLE);
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>


			//NOW DATA IS SENT
	spi_chipselect(ENABLE);
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	spi_tx_rx(WRITE_CMD);
     61a:	82 e0       	ldi	r24, 0x02	; 2
     61c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	spi_tx_rx((unsigned char)((0x36+(buff_num*0x10))));
     620:	86 e3       	ldi	r24, 0x36	; 54
     622:	8c 0f       	add	r24, r28
     624:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>

	unsigned char loop_var;
	
	 for(loop_var=0;loop_var<length;loop_var++)
     628:	00 23       	and	r16, r16
     62a:	49 f0       	breq	.+18     	; 0x63e <can_transmit+0xfe>
     62c:	ce 2d       	mov	r28, r14
     62e:	d1 2f       	mov	r29, r17
     630:	10 e0       	ldi	r17, 0x00	; 0
	 {
		 //spi_tx_rx((unsigned char)((0x36+(buff_num*0x10))+loop_var));		//transmit buffer data registers addresses

		 spi_tx_rx(data[loop_var]);				//data to be sent!!!!
     632:	89 91       	ld	r24, Y+
     634:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	spi_tx_rx(WRITE_CMD);
	spi_tx_rx((unsigned char)((0x36+(buff_num*0x10))));

	unsigned char loop_var;
	
	 for(loop_var=0;loop_var<length;loop_var++)
     638:	1f 5f       	subi	r17, 0xFF	; 255
     63a:	10 13       	cpse	r17, r16
     63c:	fa cf       	rjmp	.-12     	; 0x632 <can_transmit+0xf2>

		 spi_tx_rx(data[loop_var]);				//data to be sent!!!!

	 }

	spi_chipselect(DISABLE);
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	
		//set TXREQ to initiate transmission
	
	spi_chipselect(ENABLE);
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	spi_tx_rx(WRITE_CMD);
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	

			//TX initiation part


	spi_tx_rx((unsigned char)0x30+(buff_num*0x10));		//send address of Transmit Control Register (add 10 to base address to point to other registers)
     650:	8f 2d       	mov	r24, r15
     652:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>

	spi_tx_rx((unsigned char)0x08);			//set TXREQ to start transmission, it is 4th bit!!!!
     656:	88 e0       	ldi	r24, 0x08	; 8
     658:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>

	spi_chipselect(DISABLE);				//disable slave
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	
	//clear flag!!! YULONG THE GREAT
	
	can_rx_if_clear();
     662:	0e 94 8d 02 	call	0x51a	; 0x51a <can_rx_if_clear>

}
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	08 95       	ret

00000674 <can_write_reg>:
	spi_chipselect(DISABLE);

}

void can_write_reg(uint8_t addr, char data)
{
     674:	cf 93       	push	r28
     676:	c6 2f       	mov	r28, r22
    spi_tx_rx((unsigned char) addr);
     678:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
    spi_tx_rx((unsigned char)data);
     67c:	8c 2f       	mov	r24, r28
     67e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
}
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <can_receive>:

void can_receive(uint8_t *id,uint8_t *length, char *data)
{
     686:	8f 92       	push	r8
     688:	9f 92       	push	r9
     68a:	af 92       	push	r10
     68c:	bf 92       	push	r11
     68e:	cf 92       	push	r12
     690:	df 92       	push	r13
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	2e 97       	sbiw	r28, 0x0e	; 14
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	6c 01       	movw	r12, r24
     6b0:	5b 01       	movw	r10, r22
     6b2:	84 2e       	mov	r8, r20
     6b4:	95 2e       	mov	r9, r21
    unsigned char temp_data[14]={0};
     6b6:	8e 01       	movw	r16, r28
     6b8:	0f 5f       	subi	r16, 0xFF	; 255
     6ba:	1f 4f       	sbci	r17, 0xFF	; 255
     6bc:	8e e0       	ldi	r24, 0x0E	; 14
     6be:	f8 01       	movw	r30, r16
     6c0:	11 92       	st	Z+, r1
     6c2:	8a 95       	dec	r24
     6c4:	e9 f7       	brne	.-6      	; 0x6c0 <can_receive+0x3a>
    uint8_t buff_id=0,loop_var=0;
  

            //ID of RX buffer which received message

	spi_chipselect(ENABLE);
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	
	spi_tx_rx((unsigned char)RX_STATUS_CMD);      //send RX Status Command
     6cc:	80 eb       	ldi	r24, 0xB0	; 176
     6ce:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>

    buff_id=spi_tx_rx(0);			//to exclude first byte because of suspected error 
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	buff_id=spi_tx_rx(0);			//to ensure we get correct byte because data is repeating and previous can be corrupted
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
     6de:	f8 2e       	mov	r15, r24
	
	spi_chipselect(DISABLE);
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
    buff_id=(buff_id>>6);               //get value of buffer id into higher two bytes
	
	
    //message reception
	
	spi_chipselect(ENABLE);
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
    spi_tx_rx(READ_CMD);
     6ec:	83 e0       	ldi	r24, 0x03	; 3
     6ee:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
    buff_id=spi_tx_rx(0);			//to exclude first byte because of suspected error 
	buff_id=spi_tx_rx(0);			//to ensure we get correct byte because data is repeating and previous can be corrupted
	
	spi_chipselect(DISABLE);
	
    buff_id=(buff_id>>6);               //get value of buffer id into higher two bytes
     6f2:	8f 2d       	mov	r24, r15
     6f4:	82 95       	swap	r24
     6f6:	86 95       	lsr	r24
     6f8:	86 95       	lsr	r24
     6fa:	83 70       	andi	r24, 0x03	; 3
    //message reception
	
	spi_chipselect(ENABLE);
    spi_tx_rx(READ_CMD);

    spi_tx_rx((unsigned char) 0x60 + (buff_id-1));      //id can have value of  or 2, so subtract 1 in order to make it 0 or 1
     6fc:	81 5a       	subi	r24, 0xA1	; 161
     6fe:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
     702:	7e 01       	movw	r14, r28
     704:	ff e0       	ldi	r31, 0x0F	; 15
     706:	ef 0e       	add	r14, r31
     708:	f1 1c       	adc	r15, r1


     for(loop_var=0;loop_var<14;loop_var++)
     {
         temp_data[loop_var]=spi_tx_rx(0);          //receive whole data
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
     710:	f8 01       	movw	r30, r16
     712:	81 93       	st	Z+, r24
     714:	8f 01       	movw	r16, r30
    spi_tx_rx(READ_CMD);

    spi_tx_rx((unsigned char) 0x60 + (buff_id-1));      //id can have value of  or 2, so subtract 1 in order to make it 0 or 1


     for(loop_var=0;loop_var<14;loop_var++)
     716:	ee 15       	cp	r30, r14
     718:	ff 05       	cpc	r31, r15
     71a:	b9 f7       	brne	.-18     	; 0x70a <can_receive+0x84>
     {
         temp_data[loop_var]=spi_tx_rx(0);          //receive whole data
     }
	 
     id[0]=temp_data[1]<<3;
     71c:	8a 81       	ldd	r24, Y+2	; 0x02
     71e:	88 0f       	add	r24, r24
     720:	88 0f       	add	r24, r24
     722:	88 0f       	add	r24, r24
     724:	f6 01       	movw	r30, r12
     726:	80 83       	st	Z, r24
     id[1]=temp_data[2]>>5;
     728:	8b 81       	ldd	r24, Y+3	; 0x03
     72a:	82 95       	swap	r24
     72c:	86 95       	lsr	r24
     72e:	87 70       	andi	r24, 0x07	; 7
     730:	81 83       	std	Z+1, r24	; 0x01

     length[0]=temp_data[5];        //5th byte is length
     732:	8e 81       	ldd	r24, Y+6	; 0x06
     734:	f5 01       	movw	r30, r10
     736:	80 83       	st	Z, r24
     738:	fe 01       	movw	r30, r28
     73a:	37 96       	adiw	r30, 0x07	; 7
     73c:	a8 2d       	mov	r26, r8
     73e:	b9 2d       	mov	r27, r9

     for(loop_var=6;loop_var<14;loop_var++)
     {
         data[loop_var-6]=temp_data[loop_var];              //data starts from  6th bye!!!
     740:	81 91       	ld	r24, Z+
     742:	8d 93       	st	X+, r24
     id[0]=temp_data[1]<<3;
     id[1]=temp_data[2]>>5;

     length[0]=temp_data[5];        //5th byte is length

     for(loop_var=6;loop_var<14;loop_var++)
     744:	ee 16       	cp	r14, r30
     746:	ff 06       	cpc	r15, r31
     748:	d9 f7       	brne	.-10     	; 0x740 <can_receive+0xba>
	 spi_tx_rx(INT_FLAG_ADDR);
	 
	 spi_tx_rx(0x00);
	 
	 spi_chipselect(DISABLE);*/
	can_rx_if_clear();
     74a:	0e 94 8d 02 	call	0x51a	; 0x51a <can_rx_if_clear>
	//can_reset();
}
     74e:	2e 96       	adiw	r28, 0x0e	; 14
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	de bf       	out	0x3e, r29	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd bf       	out	0x3d, r28	; 61
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	ff 90       	pop	r15
     764:	ef 90       	pop	r14
     766:	df 90       	pop	r13
     768:	cf 90       	pop	r12
     76a:	bf 90       	pop	r11
     76c:	af 90       	pop	r10
     76e:	9f 90       	pop	r9
     770:	8f 90       	pop	r8
     772:	08 95       	ret

00000774 <can_read_status>:


char can_read_status(void)
{
	char data=0;
	spi_chipselect(ENABLE);
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	spi_tx_rx(READ_CMD);
     77a:	83 e0       	ldi	r24, 0x03	; 3
     77c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	spi_tx_rx(0xFE);		//address of data register
     780:	8e ef       	ldi	r24, 0xFE	; 254
     782:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	data=spi_tx_rx(0);		//upper 3 bits are mode of operation, bit 1 till 3 are for interrupt 
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	return data;			//for mode, shift by 5, for interrupt, and with 0b00001110 and shift by 1
     78c:	08 95       	ret

0000078e <can_config>:
	can_rx_if_clear();

}

void can_config(int mode)
{
     78e:	cf 93       	push	r28
     790:	c8 2f       	mov	r28, r24
	can_reset();		//reset mcp
     792:	0e 94 83 02 	call	0x506	; 0x506 <can_reset>

	spi_chipselect(ENABLE);		//enable slave
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>

	spi_tx_rx(WRITE_CMD);
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>

            //Send address of CAN CONTROL registerxFF because 0xXFH is mentioned
			//0b10000000 to enter config mode
			//be aware of potential delay while setting config_mode
			
    can_write_reg(0xFF,0x80);			//check config mode is achieved or not
     7a2:	60 e8       	ldi	r22, 0x80	; 128
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
     7a6:	0e 94 3a 03 	call	0x674	; 0x674 <can_write_reg>
	
	spi_chipselect(DISABLE);
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	
	if(can_read_status()>>5 !=0x04)
     7b0:	0e 94 ba 03 	call	0x774	; 0x774 <can_read_status>
     7b4:	82 95       	swap	r24
     7b6:	86 95       	lsr	r24
     7b8:	87 70       	andi	r24, 0x07	; 7
     7ba:	84 30       	cpi	r24, 0x04	; 4
     7bc:	49 f0       	breq	.+18     	; 0x7d0 <can_config+0x42>
	{
		printf("\n\rERROR UNABLE TO ENTER CONFIG MODE\n\r");
     7be:	20 e2       	ldi	r18, 0x20	; 32
     7c0:	31 e0       	ldi	r19, 0x01	; 1
     7c2:	3f 93       	push	r19
     7c4:	2f 93       	push	r18
     7c6:	0e 94 a1 0a 	call	0x1542	; 0x1542 <printf>
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	08 c0       	rjmp	.+16     	; 0x7e0 <can_config+0x52>
	}	
	
	else 
	{
		printf("\n\r CONFIG MODE ACHIEVED\n\r");
     7d0:	26 e4       	ldi	r18, 0x46	; 70
     7d2:	31 e0       	ldi	r19, 0x01	; 1
     7d4:	3f 93       	push	r19
     7d6:	2f 93       	push	r18
     7d8:	0e 94 a1 0a 	call	0x1542	; 0x1542 <printf>
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	88 e1       	ldi	r24, 0x18	; 24
     7e2:	94 e0       	ldi	r25, 0x04	; 4
     7e4:	01 97       	sbiw	r24, 0x01	; 1
     7e6:	f1 f7       	brne	.-4      	; 0x7e4 <can_config+0x56>
     7e8:	00 c0       	rjmp	.+0      	; 0x7ea <can_config+0x5c>
     7ea:	00 00       	nop

        //send 0x00 to enable all messages
		_delay_us(1000); // TODO remove this test
		

	spi_chipselect(ENABLE);		//enable slave
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	spi_tx_rx(WRITE_CMD);
     7f2:	82 e0       	ldi	r24, 0x02	; 2
     7f4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
    can_write_reg(0x20,0x00);
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	80 e2       	ldi	r24, 0x20	; 32
     7fc:	0e 94 3a 03 	call	0x674	; 0x674 <can_write_reg>
	spi_chipselect(DISABLE);
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
     806:	88 e1       	ldi	r24, 0x18	; 24
     808:	94 e0       	ldi	r25, 0x04	; 4
     80a:	01 97       	sbiw	r24, 0x01	; 1
     80c:	f1 f7       	brne	.-4      	; 0x80a <can_config+0x7c>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <can_config+0x82>
     810:	00 00       	nop

	_delay_us(1000); // TODO remove this test

	spi_chipselect(ENABLE);		//enable slave
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	spi_tx_rx(WRITE_CMD);
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	can_write_reg(0x24,0x00);
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	84 e2       	ldi	r24, 0x24	; 36
     822:	0e 94 3a 03 	call	0x674	; 0x674 <can_write_reg>
	spi_chipselect(DISABLE);
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
     82c:	88 e1       	ldi	r24, 0x18	; 24
     82e:	94 e0       	ldi	r25, 0x04	; 4
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <can_config+0xa2>
     834:	00 c0       	rjmp	.+0      	; 0x836 <can_config+0xa8>
     836:	00 00       	nop
	
	_delay_us(1000); // TODO remove this test
	
	spi_chipselect(ENABLE);		//enable slave
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	spi_tx_rx(WRITE_CMD);
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	can_write_reg(0x21,0x00);
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	81 e2       	ldi	r24, 0x21	; 33
     848:	0e 94 3a 03 	call	0x674	; 0x674 <can_write_reg>
	spi_chipselect(DISABLE);
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
     852:	88 e1       	ldi	r24, 0x18	; 24
     854:	94 e0       	ldi	r25, 0x04	; 4
     856:	01 97       	sbiw	r24, 0x01	; 1
     858:	f1 f7       	brne	.-4      	; 0x856 <can_config+0xc8>
     85a:	00 c0       	rjmp	.+0      	; 0x85c <can_config+0xce>
     85c:	00 00       	nop
	
	_delay_us(1000); // TODO remove this test
	
	spi_chipselect(ENABLE);		//enable slave
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	spi_tx_rx(WRITE_CMD);
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	can_write_reg(0x25,0x00);
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	85 e2       	ldi	r24, 0x25	; 37
     86e:	0e 94 3a 03 	call	0x674	; 0x674 <can_write_reg>
	spi_chipselect(DISABLE);
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
     878:	88 e1       	ldi	r24, 0x18	; 24
     87a:	94 e0       	ldi	r25, 0x04	; 4
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	f1 f7       	brne	.-4      	; 0x87c <can_config+0xee>
     880:	00 c0       	rjmp	.+0      	; 0x882 <can_config+0xf4>
     882:	00 00       	nop
	//Enable interrupts for reception

	//address of CAN Interrupt register

	//enable RX0 and RX1 interrupt only!!!!
    spi_chipselect(ENABLE);		//enable slave
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
    spi_tx_rx(WRITE_CMD);
     88a:	82 e0       	ldi	r24, 0x02	; 2
     88c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
	can_write_reg(0x2B,0x03);
     890:	63 e0       	ldi	r22, 0x03	; 3
     892:	8b e2       	ldi	r24, 0x2B	; 43
     894:	0e 94 3a 03 	call	0x674	; 0x674 <can_write_reg>
	spi_chipselect(DISABLE);
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
     89e:	88 e1       	ldi	r24, 0x18	; 24
     8a0:	94 e0       	ldi	r25, 0x04	; 4
     8a2:	01 97       	sbiw	r24, 0x01	; 1
     8a4:	f1 f7       	brne	.-4      	; 0x8a2 <can_config+0x114>
     8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <can_config+0x11a>
     8a8:	00 00       	nop
}
return 0;
}
*/

 spi_chipselect(ENABLE);		//enable slave
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
 spi_tx_rx(WRITE_CMD);
     8b0:	82 e0       	ldi	r24, 0x02	; 2
     8b2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
 can_write_reg(CNF1,BRP_value);
     8b6:	63 e0       	ldi	r22, 0x03	; 3
     8b8:	8a e2       	ldi	r24, 0x2A	; 42
     8ba:	0e 94 3a 03 	call	0x674	; 0x674 <can_write_reg>
 spi_chipselect(DISABLE);
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
     8c4:	88 e1       	ldi	r24, 0x18	; 24
     8c6:	94 e0       	ldi	r25, 0x04	; 4
     8c8:	01 97       	sbiw	r24, 0x01	; 1
     8ca:	f1 f7       	brne	.-4      	; 0x8c8 <can_config+0x13a>
     8cc:	00 c0       	rjmp	.+0      	; 0x8ce <can_config+0x140>
     8ce:	00 00       	nop
 
 	_delay_us(1000); // TODO remove this test
 
 spi_chipselect(ENABLE);		//enable slave
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
 spi_tx_rx(WRITE_CMD);
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
 can_write_reg(CNF2,PH1_PRP_value);
     8dc:	61 ed       	ldi	r22, 0xD1	; 209
     8de:	89 e2       	ldi	r24, 0x29	; 41
     8e0:	0e 94 3a 03 	call	0x674	; 0x674 <can_write_reg>
 spi_chipselect(DISABLE);
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
     8ea:	88 e1       	ldi	r24, 0x18	; 24
     8ec:	94 e0       	ldi	r25, 0x04	; 4
     8ee:	01 97       	sbiw	r24, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <can_config+0x160>
     8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <can_config+0x166>
     8f4:	00 00       	nop
 
 	_delay_us(1000); // TODO remove this test
  
 spi_chipselect(ENABLE);		//enable slave
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
 spi_tx_rx(WRITE_CMD);
     8fc:	82 e0       	ldi	r24, 0x02	; 2
     8fe:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
 can_write_reg(CNF3,PH2_value);
     902:	61 e4       	ldi	r22, 0x41	; 65
     904:	88 e2       	ldi	r24, 0x28	; 40
     906:	0e 94 3a 03 	call	0x674	; 0x674 <can_write_reg>
 spi_chipselect(DISABLE);
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
     910:	88 e1       	ldi	r24, 0x18	; 24
     912:	94 e0       	ldi	r25, 0x04	; 4
     914:	01 97       	sbiw	r24, 0x01	; 1
     916:	f1 f7       	brne	.-4      	; 0x914 <can_config+0x186>
     918:	00 c0       	rjmp	.+0      	; 0x91a <can_config+0x18c>
     91a:	00 00       	nop

	//goto normal mode
			//Send address of CAN CONTROL registerxFF because 0xXFH is mentioned

			//mode, to shift bytes  to higher nibble enter normal mode
	spi_chipselect(ENABLE);		//enable slave
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>
	spi_tx_rx(WRITE_CMD);			
     922:	82 e0       	ldi	r24, 0x02	; 2
     924:	0e 94 7e 02 	call	0x4fc	; 0x4fc <spi_tx_rx>
    can_write_reg(0xFF,(mode<<5));			//mode should be sent as 0,1 and 2 from main since it is left shifted here by 5
     928:	6c 2f       	mov	r22, r28
     92a:	62 95       	swap	r22
     92c:	66 0f       	add	r22, r22
     92e:	60 7e       	andi	r22, 0xE0	; 224
     930:	8f ef       	ldi	r24, 0xFF	; 255
     932:	0e 94 3a 03 	call	0x674	; 0x674 <can_write_reg>
	spi_chipselect(DISABLE);
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	0e 94 78 02 	call	0x4f0	; 0x4f0 <spi_chipselect>

}
     93c:	cf 91       	pop	r28
     93e:	08 95       	ret

00000940 <generic_SelectCallback>:
static void genric_draw_fun(uint8_t x, uint8_t y, const char *str){
	oled_goto_xy(x,y);
	oled_putstr_P(str);
}

void generic_SelectCallback(uint8_t x, uint8_t y, const char* str){
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	ea 01       	movw	r28, r20
	oled_goto_xy(x,y);
     946:	0e 94 0e 09 	call	0x121c	; 0x121c <oled_goto_xy>
	oled_putstr_P_inverse(str);
     94a:	ce 01       	movw	r24, r28
     94c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <oled_putstr_P_inverse>
}
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	08 95       	ret

00000956 <enable_debug_mode_display>:
/************************************************************************/
/* enable_debug_mode_display                                            */
/************************************************************************/
int flag_enable_debug_mode_display = 1;
void enable_debug_mode_display(void){
	oled_goto_xy(6,0);
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	86 e0       	ldi	r24, 0x06	; 6
     95a:	0e 94 0e 09 	call	0x121c	; 0x121c <oled_goto_xy>
	puts("Into Debug mode");
     95e:	80 e6       	ldi	r24, 0x60	; 96
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0e 94 b5 0a 	call	0x156a	; 0x156a <puts>
	flag_enable_debug_mode_display = 1;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	90 93 1d 01 	sts	0x011D, r25
     96e:	80 93 1c 01 	sts	0x011C, r24
     972:	08 95       	ret

00000974 <genric_draw_fun>:





static void genric_draw_fun(uint8_t x, uint8_t y, const char *str){
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	ea 01       	movw	r28, r20
	oled_goto_xy(x,y);
     97a:	0e 94 0e 09 	call	0x121c	; 0x121c <oled_goto_xy>
	oled_putstr_P(str);
     97e:	ce 01       	movw	r24, r28
     980:	0e 94 61 09 	call	0x12c2	; 0x12c2 <oled_putstr_P>
}
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	08 95       	ret

0000098a <plunger>:
/************************************************************************/
/*			PLUNGER FUCNTION TO ACTIVATE SOLENOID                      */
/************************************************************************/
void plunger(void)
{
	cli();
     98a:	f8 94       	cli
	PORTB &= ~(1<<PB0);			// clear PORTB_0 pin 1 when switch is pressed, will be used for plunger
     98c:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 ef       	ldi	r25, 0xF0	; 240
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	f1 f7       	brne	.-4      	; 0x992 <plunger+0x8>
						
	_delay_ms(50);             //can be changed!!!
	PORTB |= (1<<PB0);			// Set PORTB_0
     996:	c0 9a       	sbi	0x18, 0	; 24
	sei();
     998:	78 94       	sei
     99a:	08 95       	ret

0000099c <main>:
char rx_buff[20];
int rx_count=0;


int main(void)
{	/* Set up the default menu text write callback, and navigate to an absolute menu item entry. */
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	a0 97       	sbiw	r28, 0x20	; 32
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	de bf       	out	0x3e, r29	; 62
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	cd bf       	out	0x3d, r28	; 61
		stdout = &oled_stdout;
     9b0:	8e e0       	ldi	r24, 0x0E	; 14
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	90 93 e0 02 	sts	0x02E0, r25
     9b8:	80 93 df 02 	sts	0x02DF, r24
		usart_init(MYUBRR);
     9bc:	8f e1       	ldi	r24, 0x1F	; 31
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 04 0a 	call	0x1408	; 0x1408 <usart_init>

		fprintf(&usart_stdout,"Usart says hello!\n");
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	31 e0       	ldi	r19, 0x01	; 1
     9c8:	42 e1       	ldi	r20, 0x12	; 18
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	84 e8       	ldi	r24, 0x84	; 132
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	0e 94 6d 0a 	call	0x14da	; 0x14da <fwrite>
		oled_init();
     9d8:	0e 94 db 08 	call	0x11b6	; 0x11b6 <oled_init>
		oled_clear();
     9dc:	0e 94 72 09 	call	0x12e4	; 0x12e4 <oled_clear>
		oled_putstr_inverse("hello world!!\n");
     9e0:	87 e9       	ldi	r24, 0x97	; 151
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <oled_putstr_inverse>
		adc_init();
     9e8:	0e 94 46 02 	call	0x48c	; 0x48c <adc_init>
	
	
		//INTERRUPT CONFIGURATION and Plunger Configuration (INT2 is for CAN and INT 0 is for solenoid)

		DDRB= (1<<PB0);							//Make PB0 as output for plunger
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	87 bb       	out	0x17, r24	; 23
		PORTB = (1<<PB0);
     9f0:	88 bb       	out	0x18, r24	; 24
		
		sei();									//Enable Global Interrupts
     9f2:	78 94       	sei
		GICR |= (1<<INT0) | (1<<INT2);			//Enable INT_2, falling edge (ISC2 is zero)
     9f4:	8b b7       	in	r24, 0x3b	; 59
     9f6:	80 66       	ori	r24, 0x60	; 96
     9f8:	8b bf       	out	0x3b, r24	; 59
		MCUCR |= (1<<ISC01);					//Falling edge interrupt for Plunger
     9fa:	85 b7       	in	r24, 0x35	; 53
     9fc:	82 60       	ori	r24, 0x02	; 2
     9fe:	85 bf       	out	0x35, r24	; 53
	//	uart_config();
	//	fdevopen(&uart_transmit, (void *) 0);		//UART write function
	//
		//SPI and CAN functions

		spi_config();
     a00:	0e 94 70 02 	call	0x4e0	; 0x4e0 <spi_config>

		can_reset();
     a04:	0e 94 83 02 	call	0x506	; 0x506 <can_reset>

		can_config(NORMAL);		//configure in loop back mode
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 c7 03 	call	0x78e	; 0x78e <can_config>
		//
	Menu_SetGenericWriteCallback(genric_draw_fun);
     a10:	8a eb       	ldi	r24, 0xBA	; 186
     a12:	94 e0       	ldi	r25, 0x04	; 4
     a14:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <Menu_SetGenericWriteCallback>
	Menu_SetGenericClear(oled_clear);
     a18:	82 e7       	ldi	r24, 0x72	; 114
     a1a:	99 e0       	ldi	r25, 0x09	; 9
     a1c:	0e 94 11 08 	call	0x1022	; 0x1022 <Menu_SetGenericClear>
	oled_clear();
     a20:	0e 94 72 09 	call	0x12e4	; 0x12e4 <oled_clear>
	Menu_Navigate(&Menu_1);
     a24:	89 eb       	ldi	r24, 0xB9	; 185
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	0e 94 90 08 	call	0x1120	; 0x1120 <Menu_Navigate>
	Menu_DrawBase();
     a2c:	0e 94 28 08 	call	0x1050	; 0x1050 <Menu_DrawBase>
	Menu_Navigate(&Menu_1);
     a30:	89 eb       	ldi	r24, 0xB9	; 185
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	0e 94 90 08 	call	0x1120	; 0x1120 <Menu_Navigate>
	tx_data[3] = 8;//KP
     a38:	88 e0       	ldi	r24, 0x08	; 8
     a3a:	8c 87       	std	Y+12, r24	; 0x0c
	tx_data[4] = 5;//KI
     a3c:	85 e0       	ldi	r24, 0x05	; 5
     a3e:	8d 87       	std	Y+13, r24	; 0x0d
	tx_data[5] = 5;//KD
     a40:	8e 87       	std	Y+14, r24	; 0x0e
     a42:	5e 01       	movw	r10, r28
     a44:	23 e1       	ldi	r18, 0x13	; 19
     a46:	a2 0e       	add	r10, r18
     a48:	b1 1c       	adc	r11, r1
     a4a:	8e 01       	movw	r16, r28
     a4c:	08 5f       	subi	r16, 0xF8	; 248
     a4e:	1f 4f       	sbci	r17, 0xFF	; 255
     a50:	8a 2c       	mov	r8, r10
     a52:	9b 2c       	mov	r9, r11
				if (flag_enable_debug_mode_display)
				{
					int print_temp[7];
					oled_goto_xy(5,1);
					print_temp[0] = (0x80 & tx_data[1] )? (tx_data[1] + 0xff00):tx_data[1];
					printf("data Tran: %d, x:%3d, y:%3d, tranx: %d, %d, %d, %d, %d"\
     a54:	0f 2e       	mov	r0, r31
     a56:	f6 ea       	ldi	r31, 0xA6	; 166
     a58:	cf 2e       	mov	r12, r31
     a5a:	f1 e0       	ldi	r31, 0x01	; 1
     a5c:	df 2e       	mov	r13, r31
     a5e:	f0 2d       	mov	r31, r0
						print_temp[i] = (0x80 & rx_data[i] )? (rx_data[i] + 0xff00):rx_data[i];
					}
					int16_t encoder_val = (uint8_t)rx_data[5]*0x100 + (uint8_t)rx_data[6];
					int16_t set_val =  (uint8_t)rx_data[3]*0x100 + (uint8_t)rx_data[4];
					//int a = (0x80 & rx_data[2] )? (rx_data[2] + 0xff00):rx_data[2];
					printf("Receive Data: %3i, %3i, SP: %5d, ENC: %5d\n",print_temp[0],print_temp[1],set_val,encoder_val);
     a60:	0f 2e       	mov	r0, r31
     a62:	fd ed       	ldi	r31, 0xDD	; 221
     a64:	ef 2e       	mov	r14, r31
     a66:	f1 e0       	ldi	r31, 0x01	; 1
     a68:	ff 2e       	mov	r15, r31
     a6a:	f0 2d       	mov	r31, r0
	tx_data[4] = 5;//KI
	tx_data[5] = 5;//KD
	while (1)
    {
		
			switch (button_val)
     a6c:	80 91 c0 02 	lds	r24, 0x02C0
     a70:	83 30       	cpi	r24, 0x03	; 3
     a72:	79 f1       	breq	.+94     	; 0xad2 <main+0x136>
     a74:	28 f4       	brcc	.+10     	; 0xa80 <main+0xe4>
     a76:	81 30       	cpi	r24, 0x01	; 1
     a78:	51 f0       	breq	.+20     	; 0xa8e <main+0xf2>
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	c9 f0       	breq	.+50     	; 0xab0 <main+0x114>
     a7e:	57 c0       	rjmp	.+174    	; 0xb2e <main+0x192>
     a80:	84 30       	cpi	r24, 0x04	; 4
     a82:	09 f4       	brne	.+2      	; 0xa86 <main+0xea>
     a84:	37 c0       	rjmp	.+110    	; 0xaf4 <main+0x158>
     a86:	85 30       	cpi	r24, 0x05	; 5
     a88:	09 f4       	brne	.+2      	; 0xa8c <main+0xf0>
     a8a:	47 c0       	rjmp	.+142    	; 0xb1a <main+0x17e>
     a8c:	50 c0       	rjmp	.+160    	; 0xb2e <main+0x192>
}
/************************************************************************/
/*  display managing flags    and routine                                */
/************************************************************************/
inline static void Menu_Dsp_flag_clr(void){
	flag_enable_debug_mode_display = 0;
     a8e:	10 92 1d 01 	sts	0x011D, r1
     a92:	10 92 1c 01 	sts	0x011C, r1
	flag_enable_online_tuning = 0;
     a96:	10 92 bf 02 	sts	0x02BF, r1
     a9a:	10 92 be 02 	sts	0x02BE, r1
		
			switch (button_val)
			{
				case BUTTON_UP:
					Menu_Dsp_flag_clr();
					Menu_Navigate(MENU_PREVIOUS);
     a9e:	0e 94 0c 08 	call	0x1018	; 0x1018 <Menu_GetCurrentMenu>
     aa2:	04 96       	adiw	r24, 0x04	; 4
     aa4:	fc 01       	movw	r30, r24
     aa6:	85 91       	lpm	r24, Z+
     aa8:	94 91       	lpm	r25, Z
     aaa:	0e 94 90 08 	call	0x1120	; 0x1120 <Menu_Navigate>
					break;
     aae:	3f c0       	rjmp	.+126    	; 0xb2e <main+0x192>
}
/************************************************************************/
/*  display managing flags    and routine                                */
/************************************************************************/
inline static void Menu_Dsp_flag_clr(void){
	flag_enable_debug_mode_display = 0;
     ab0:	10 92 1d 01 	sts	0x011D, r1
     ab4:	10 92 1c 01 	sts	0x011C, r1
	flag_enable_online_tuning = 0;
     ab8:	10 92 bf 02 	sts	0x02BF, r1
     abc:	10 92 be 02 	sts	0x02BE, r1
					Menu_Dsp_flag_clr();
					Menu_Navigate(MENU_PREVIOUS);
					break;
				case BUTTON_DOWN:
					Menu_Dsp_flag_clr();
					Menu_Navigate(MENU_NEXT);
     ac0:	0e 94 0c 08 	call	0x1018	; 0x1018 <Menu_GetCurrentMenu>
     ac4:	02 96       	adiw	r24, 0x02	; 2
     ac6:	fc 01       	movw	r30, r24
     ac8:	85 91       	lpm	r24, Z+
     aca:	94 91       	lpm	r25, Z
     acc:	0e 94 90 08 	call	0x1120	; 0x1120 <Menu_Navigate>
					break;
     ad0:	2e c0       	rjmp	.+92     	; 0xb2e <main+0x192>
}
/************************************************************************/
/*  display managing flags    and routine                                */
/************************************************************************/
inline static void Menu_Dsp_flag_clr(void){
	flag_enable_debug_mode_display = 0;
     ad2:	10 92 1d 01 	sts	0x011D, r1
     ad6:	10 92 1c 01 	sts	0x011C, r1
	flag_enable_online_tuning = 0;
     ada:	10 92 bf 02 	sts	0x02BF, r1
     ade:	10 92 be 02 	sts	0x02BE, r1
					Menu_Dsp_flag_clr();
					Menu_Navigate(MENU_NEXT);
					break;
				case BUTTON_LEFT:
					Menu_Dsp_flag_clr();
					Menu_Navigate(MENU_PARENT);
     ae2:	0e 94 0c 08 	call	0x1018	; 0x1018 <Menu_GetCurrentMenu>
     ae6:	06 96       	adiw	r24, 0x06	; 6
     ae8:	fc 01       	movw	r30, r24
     aea:	85 91       	lpm	r24, Z+
     aec:	94 91       	lpm	r25, Z
     aee:	0e 94 90 08 	call	0x1120	; 0x1120 <Menu_Navigate>
					break;
     af2:	1d c0       	rjmp	.+58     	; 0xb2e <main+0x192>
				case BUTTON_RIGHT:
					// level changes update display pls clr
					oled_clear();
     af4:	0e 94 72 09 	call	0x12e4	; 0x12e4 <oled_clear>
}
/************************************************************************/
/*  display managing flags    and routine                                */
/************************************************************************/
inline static void Menu_Dsp_flag_clr(void){
	flag_enable_debug_mode_display = 0;
     af8:	10 92 1d 01 	sts	0x011D, r1
     afc:	10 92 1c 01 	sts	0x011C, r1
	flag_enable_online_tuning = 0;
     b00:	10 92 bf 02 	sts	0x02BF, r1
     b04:	10 92 be 02 	sts	0x02BE, r1
					break;
				case BUTTON_RIGHT:
					// level changes update display pls clr
					oled_clear();
					Menu_Dsp_flag_clr();
					Menu_Navigate(MENU_CHILD);
     b08:	0e 94 0c 08 	call	0x1018	; 0x1018 <Menu_GetCurrentMenu>
     b0c:	08 96       	adiw	r24, 0x08	; 8
     b0e:	fc 01       	movw	r30, r24
     b10:	85 91       	lpm	r24, Z+
     b12:	94 91       	lpm	r25, Z
     b14:	0e 94 90 08 	call	0x1120	; 0x1120 <Menu_Navigate>
					break;
     b18:	0a c0       	rjmp	.+20     	; 0xb2e <main+0x192>
}
/************************************************************************/
/*  display managing flags    and routine                                */
/************************************************************************/
inline static void Menu_Dsp_flag_clr(void){
	flag_enable_debug_mode_display = 0;
     b1a:	10 92 1d 01 	sts	0x011D, r1
     b1e:	10 92 1c 01 	sts	0x011C, r1
	flag_enable_online_tuning = 0;
     b22:	10 92 bf 02 	sts	0x02BF, r1
     b26:	10 92 be 02 	sts	0x02BE, r1
					Menu_Dsp_flag_clr();
					Menu_Navigate(MENU_CHILD);
					break;
				case BUTTON_ENTER:
					Menu_Dsp_flag_clr();
					Menu_EnterCurrentItem();
     b2a:	0e 94 16 08 	call	0x102c	; 0x102c <Menu_EnterCurrentItem>
					break;
				default:
					break;
			}
			button_val = BUTTON_NONE;
     b2e:	10 92 c0 02 	sts	0x02C0, r1
		
			//while (1)
			{
			adc_pos_t pos = adc_get_position();
     b32:	0e 94 61 02 	call	0x4c2	; 0x4c2 <adc_get_position>
     b36:	76 2e       	mov	r7, r22
     b38:	67 2e       	mov	r6, r23
     b3a:	58 2e       	mov	r5, r24
     b3c:	8f ef       	ldi	r24, 0xFF	; 255
     b3e:	9f ed       	ldi	r25, 0xDF	; 223
     b40:	21 e0       	ldi	r18, 0x01	; 1
     b42:	81 50       	subi	r24, 0x01	; 1
     b44:	90 40       	sbci	r25, 0x00	; 0
     b46:	20 40       	sbci	r18, 0x00	; 0
     b48:	e1 f7       	brne	.-8      	; 0xb42 <main+0x1a6>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <main+0x1b0>
     b4c:	00 00       	nop
			_delay_ms(125);
			/************************************************************************ /
			/ *       arrange  the frame to send to can                              * /
			/ ************************************************************************/
			tx_data[0] = pos.x*0xff00;
     b4e:	19 86       	std	Y+9, r1	; 0x09
			tx_data[1] = pos.x;//(int8_t)((pos.x & 0x8000)? (((pos.x)|0x7f)+ 0x80):(pos.x));
     b50:	7a 86       	std	Y+10, r7	; 0x0a
			tx_data[2] = 255-pos.y;
     b52:	86 2d       	mov	r24, r6
     b54:	80 95       	com	r24
     b56:	8b 87       	std	Y+11, r24	; 0x0b
			tx_data[6] = 0;
			tx_data[7] = 0;*/
			
			//int x = (0x80 & pos.x )? (pos.x + 0xff00):pos.x;
			//int y = (0x80 & pos.y )? (pos.y + 0xff00):pos.y;
			can_transmit(0,0x05,8,tx_data);			//BUFFER 0, ID 0x05, 8 data bytes and data=stored string
     b58:	9e 01       	movw	r18, r28
     b5a:	27 5f       	subi	r18, 0xF7	; 247
     b5c:	3f 4f       	sbci	r19, 0xFF	; 255
     b5e:	48 e0       	ldi	r20, 0x08	; 8
     b60:	65 e0       	ldi	r22, 0x05	; 5
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	0e 94 a0 02 	call	0x540	; 0x540 <can_transmit>
					, tx_data[0],pos.x,pos.y,tx_data[3],tx_data[4],tx_data[5],tx_data[6],tx_data[7]);		//0 is pattern, 1 is x and 2 is y
			*/

			
			//CAN RECEIVE FLAG PART
			if(can_rx_flag)
     b68:	80 91 bc 02 	lds	r24, 0x02BC
     b6c:	90 91 bd 02 	lds	r25, 0x02BD
     b70:	89 2b       	or	r24, r25
     b72:	69 f0       	breq	.+26     	; 0xb8e <main+0x1f2>
					encoder upper byte from node 2
					encoder lower byte from node 2
																						* /
				/ ************************************************************************/

				can_rx_flag=0;
     b74:	10 92 bd 02 	sts	0x02BD, r1
     b78:	10 92 bc 02 	sts	0x02BC, r1
				can_receive(rx_id,rx_length,rx_data);
     b7c:	ae 01       	movw	r20, r28
     b7e:	4f 5f       	subi	r20, 0xFF	; 255
     b80:	5f 4f       	sbci	r21, 0xFF	; 255
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	ce 01       	movw	r24, r28
     b88:	41 96       	adiw	r24, 0x11	; 17
     b8a:	0e 94 43 03 	call	0x686	; 0x686 <can_receive>
				*/

			}
			
			// enable debug mode displaying
				if (flag_enable_debug_mode_display)
     b8e:	20 91 1c 01 	lds	r18, 0x011C
     b92:	30 91 1d 01 	lds	r19, 0x011D
     b96:	23 2b       	or	r18, r19
     b98:	09 f4       	brne	.+2      	; 0xb9c <main+0x200>
     b9a:	63 c0       	rjmp	.+198    	; 0xc62 <main+0x2c6>
				{
					int print_temp[7];
					oled_goto_xy(5,1);
     b9c:	61 e0       	ldi	r22, 0x01	; 1
     b9e:	85 e0       	ldi	r24, 0x05	; 5
     ba0:	0e 94 0e 09 	call	0x121c	; 0x121c <oled_goto_xy>
					print_temp[0] = (0x80 & tx_data[1] )? (tx_data[1] + 0xff00):tx_data[1];
     ba4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ba6:	88 23       	and	r24, r24
     ba8:	1c f4       	brge	.+6      	; 0xbb0 <main+0x214>
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	9a 95       	dec	r25
     bae:	01 c0       	rjmp	.+2      	; 0xbb2 <main+0x216>
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	9c 8b       	std	Y+20, r25	; 0x14
     bb4:	8b 8b       	std	Y+19, r24	; 0x13
					printf("data Tran: %d, x:%3d, y:%3d, tranx: %d, %d, %d, %d, %d"\
     bb6:	88 89       	ldd	r24, Y+16	; 0x10
     bb8:	1f 92       	push	r1
     bba:	8f 93       	push	r24
     bbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     bbe:	1f 92       	push	r1
     bc0:	8f 93       	push	r24
     bc2:	8e 85       	ldd	r24, Y+14	; 0x0e
     bc4:	1f 92       	push	r1
     bc6:	8f 93       	push	r24
     bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bca:	1f 92       	push	r1
     bcc:	8f 93       	push	r24
     bce:	8c 85       	ldd	r24, Y+12	; 0x0c
     bd0:	1f 92       	push	r1
     bd2:	8f 93       	push	r24
     bd4:	5f 92       	push	r5
     bd6:	6f 92       	push	r6
     bd8:	1f 92       	push	r1
     bda:	7f 92       	push	r7
     bdc:	89 85       	ldd	r24, Y+9	; 0x09
     bde:	1f 92       	push	r1
     be0:	8f 93       	push	r24
     be2:	df 92       	push	r13
     be4:	cf 92       	push	r12
     be6:	0e 94 a1 0a 	call	0x1542	; 0x1542 <printf>
					, tx_data[0],pos.x,pos.y,tx_data[3],tx_data[4],tx_data[5],tx_data[6],tx_data[7]);		//0 is pattern, 1 is x and 2 is y
					oled_goto_xy(5,4);
     bea:	64 e0       	ldi	r22, 0x04	; 4
     bec:	85 e0       	ldi	r24, 0x05	; 5
     bee:	0e 94 0e 09 	call	0x121c	; 0x121c <oled_goto_xy>
     bf2:	fe 01       	movw	r30, r28
     bf4:	31 96       	adiw	r30, 0x01	; 1
     bf6:	a8 2d       	mov	r26, r8
     bf8:	b9 2d       	mov	r27, r9
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	cd bf       	out	0x3d, r28	; 61
					
					int i;
					for (i = 0; i< 7; i++)
					{
						print_temp[i] = (0x80 & rx_data[i] )? (rx_data[i] + 0xff00):rx_data[i];
     c04:	81 91       	ld	r24, Z+
     c06:	88 23       	and	r24, r24
     c08:	1c f4       	brge	.+6      	; 0xc10 <main+0x274>
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	9a 95       	dec	r25
     c0e:	01 c0       	rjmp	.+2      	; 0xc12 <main+0x276>
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	8d 93       	st	X+, r24
     c14:	9d 93       	st	X+, r25
					printf("data Tran: %d, x:%3d, y:%3d, tranx: %d, %d, %d, %d, %d"\
					, tx_data[0],pos.x,pos.y,tx_data[3],tx_data[4],tx_data[5],tx_data[6],tx_data[7]);		//0 is pattern, 1 is x and 2 is y
					oled_goto_xy(5,4);
					
					int i;
					for (i = 0; i< 7; i++)
     c16:	e0 17       	cp	r30, r16
     c18:	f1 07       	cpc	r31, r17
     c1a:	a1 f7       	brne	.-24     	; 0xc04 <main+0x268>
					{
						print_temp[i] = (0x80 & rx_data[i] )? (rx_data[i] + 0xff00):rx_data[i];
					}
					int16_t encoder_val = (uint8_t)rx_data[5]*0x100 + (uint8_t)rx_data[6];
     c1c:	8e 81       	ldd	r24, Y+6	; 0x06
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	98 2f       	mov	r25, r24
     c22:	88 27       	eor	r24, r24
     c24:	2f 81       	ldd	r18, Y+7	; 0x07
     c26:	82 0f       	add	r24, r18
     c28:	91 1d       	adc	r25, r1
					int16_t set_val =  (uint8_t)rx_data[3]*0x100 + (uint8_t)rx_data[4];
					//int a = (0x80 & rx_data[2] )? (rx_data[2] + 0xff00):rx_data[2];
					printf("Receive Data: %3i, %3i, SP: %5d, ENC: %5d\n",print_temp[0],print_temp[1],set_val,encoder_val);
     c2a:	9f 93       	push	r25
     c2c:	8f 93       	push	r24
					for (i = 0; i< 7; i++)
					{
						print_temp[i] = (0x80 & rx_data[i] )? (rx_data[i] + 0xff00):rx_data[i];
					}
					int16_t encoder_val = (uint8_t)rx_data[5]*0x100 + (uint8_t)rx_data[6];
					int16_t set_val =  (uint8_t)rx_data[3]*0x100 + (uint8_t)rx_data[4];
     c2e:	8c 81       	ldd	r24, Y+4	; 0x04
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	98 2f       	mov	r25, r24
     c34:	88 27       	eor	r24, r24
     c36:	2d 81       	ldd	r18, Y+5	; 0x05
     c38:	82 0f       	add	r24, r18
     c3a:	91 1d       	adc	r25, r1
					//int a = (0x80 & rx_data[2] )? (rx_data[2] + 0xff00):rx_data[2];
					printf("Receive Data: %3i, %3i, SP: %5d, ENC: %5d\n",print_temp[0],print_temp[1],set_val,encoder_val);
     c3c:	9f 93       	push	r25
     c3e:	8f 93       	push	r24
     c40:	8e 89       	ldd	r24, Y+22	; 0x16
     c42:	8f 93       	push	r24
     c44:	8d 89       	ldd	r24, Y+21	; 0x15
     c46:	8f 93       	push	r24
     c48:	8c 89       	ldd	r24, Y+20	; 0x14
     c4a:	8f 93       	push	r24
     c4c:	8b 89       	ldd	r24, Y+19	; 0x13
     c4e:	8f 93       	push	r24
     c50:	ff 92       	push	r15
     c52:	ef 92       	push	r14
     c54:	0e 94 a1 0a 	call	0x1542	; 0x1542 <printf>
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61



				//PLUNGER FLAG PART

				if(flag_plunger)
     c62:	80 91 ba 02 	lds	r24, 0x02BA
     c66:	90 91 bb 02 	lds	r25, 0x02BB
     c6a:	89 2b       	or	r24, r25
     c6c:	31 f0       	breq	.+12     	; 0xc7a <main+0x2de>
				{
					flag_plunger=0;     //clear flag
     c6e:	10 92 bb 02 	sts	0x02BB, r1
     c72:	10 92 ba 02 	sts	0x02BA, r1
					plunger();             //call plunger functions
     c76:	0e 94 c5 04 	call	0x98a	; 0x98a <plunger>
				}
			
				// Terminal command parsing
				if(is_main_not_fetch_the_buffer){
     c7a:	80 91 b8 02 	lds	r24, 0x02B8
     c7e:	90 91 b9 02 	lds	r25, 0x02B9
     c82:	89 2b       	or	r24, r25
     c84:	09 f4       	brne	.+2      	; 0xc88 <main+0x2ec>
     c86:	f2 ce       	rjmp	.-540    	; 0xa6c <main+0xd0>
					
					oled_goto_xy(0,0);
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	0e 94 0e 09 	call	0x121c	; 0x121c <oled_goto_xy>
					printf("%s",rx_buff);
     c90:	89 ec       	ldi	r24, 0xC9	; 201
     c92:	92 e0       	ldi	r25, 0x02	; 2
     c94:	9f 93       	push	r25
     c96:	8f 93       	push	r24
     c98:	88 e0       	ldi	r24, 0x08	; 8
     c9a:	92 e0       	ldi	r25, 0x02	; 2
     c9c:	9f 93       	push	r25
     c9e:	8f 93       	push	r24
     ca0:	0e 94 a1 0a 	call	0x1542	; 0x1542 <printf>
					is_main_not_fetch_the_buffer = 0;
     ca4:	10 92 b9 02 	sts	0x02B9, r1
     ca8:	10 92 b8 02 	sts	0x02B8, r1
					// menu navigation cmd
					if (!strcmp("e\n",rx_buff))
     cac:	69 ec       	ldi	r22, 0xC9	; 201
     cae:	72 e0       	ldi	r23, 0x02	; 2
     cb0:	8b e0       	ldi	r24, 0x0B	; 11
     cb2:	92 e0       	ldi	r25, 0x02	; 2
     cb4:	0e 94 56 0a 	call	0x14ac	; 0x14ac <strcmp>
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	89 2b       	or	r24, r25
     cc2:	21 f4       	brne	.+8      	; 0xccc <main+0x330>
					{
						button_val = BUTTON_UP;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	80 93 c0 02 	sts	0x02C0, r24
     cca:	87 c0       	rjmp	.+270    	; 0xdda <main+0x43e>
					} else if (!strcmp("d\n",rx_buff))
     ccc:	69 ec       	ldi	r22, 0xC9	; 201
     cce:	72 e0       	ldi	r23, 0x02	; 2
     cd0:	84 ea       	ldi	r24, 0xA4	; 164
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	0e 94 56 0a 	call	0x14ac	; 0x14ac <strcmp>
     cd8:	89 2b       	or	r24, r25
     cda:	21 f4       	brne	.+8      	; 0xce4 <main+0x348>
					{
						button_val = BUTTON_DOWN;
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	80 93 c0 02 	sts	0x02C0, r24
     ce2:	7b c0       	rjmp	.+246    	; 0xdda <main+0x43e>
					} else if (!strcmp("s\n",rx_buff))
     ce4:	69 ec       	ldi	r22, 0xC9	; 201
     ce6:	72 e0       	ldi	r23, 0x02	; 2
     ce8:	8e e0       	ldi	r24, 0x0E	; 14
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	0e 94 56 0a 	call	0x14ac	; 0x14ac <strcmp>
     cf0:	89 2b       	or	r24, r25
     cf2:	21 f4       	brne	.+8      	; 0xcfc <main+0x360>
					{
						button_val = BUTTON_LEFT;
     cf4:	83 e0       	ldi	r24, 0x03	; 3
     cf6:	80 93 c0 02 	sts	0x02C0, r24
     cfa:	6f c0       	rjmp	.+222    	; 0xdda <main+0x43e>
					} else if (!strcmp("f\n",rx_buff))
     cfc:	69 ec       	ldi	r22, 0xC9	; 201
     cfe:	72 e0       	ldi	r23, 0x02	; 2
     d00:	81 e1       	ldi	r24, 0x11	; 17
     d02:	92 e0       	ldi	r25, 0x02	; 2
     d04:	0e 94 56 0a 	call	0x14ac	; 0x14ac <strcmp>
     d08:	89 2b       	or	r24, r25
     d0a:	21 f4       	brne	.+8      	; 0xd14 <main+0x378>
					{
						button_val = BUTTON_RIGHT;
     d0c:	84 e0       	ldi	r24, 0x04	; 4
     d0e:	80 93 c0 02 	sts	0x02C0, r24
     d12:	63 c0       	rjmp	.+198    	; 0xdda <main+0x43e>
					}  else if (!strcmp("q\n",rx_buff))
     d14:	69 ec       	ldi	r22, 0xC9	; 201
     d16:	72 e0       	ldi	r23, 0x02	; 2
     d18:	84 e1       	ldi	r24, 0x14	; 20
     d1a:	92 e0       	ldi	r25, 0x02	; 2
     d1c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <strcmp>
     d20:	89 2b       	or	r24, r25
     d22:	21 f4       	brne	.+8      	; 0xd2c <main+0x390>
					{
						button_val = BUTTON_ENTER;
     d24:	85 e0       	ldi	r24, 0x05	; 5
     d26:	80 93 c0 02 	sts	0x02C0, r24
     d2a:	57 c0       	rjmp	.+174    	; 0xdda <main+0x43e>
					}	else 
					// Online Tuning Mode
					if (!strcmp("config\n",rx_buff))
     d2c:	69 ec       	ldi	r22, 0xC9	; 201
     d2e:	72 e0       	ldi	r23, 0x02	; 2
     d30:	87 e1       	ldi	r24, 0x17	; 23
     d32:	92 e0       	ldi	r25, 0x02	; 2
     d34:	0e 94 56 0a 	call	0x14ac	; 0x14ac <strcmp>
     d38:	89 2b       	or	r24, r25
     d3a:	99 f5       	brne	.+102    	; 0xda2 <main+0x406>
}
/************************************************************************/
/*  display managing flags    and routine                                */
/************************************************************************/
inline static void Menu_Dsp_flag_clr(void){
	flag_enable_debug_mode_display = 0;
     d3c:	10 92 1d 01 	sts	0x011D, r1
     d40:	10 92 1c 01 	sts	0x011C, r1
	flag_enable_online_tuning = 0;
     d44:	10 92 bf 02 	sts	0x02BF, r1
     d48:	10 92 be 02 	sts	0x02BE, r1
					}	else 
					// Online Tuning Mode
					if (!strcmp("config\n",rx_buff))
					{	
						Menu_Dsp_flag_clr();
						Menu_Navigate(&Menu_2_1);
     d4c:	84 ee       	ldi	r24, 0xE4	; 228
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 90 08 	call	0x1120	; 0x1120 <Menu_Navigate>
						oled_goto_xy(6,0);
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	86 e0       	ldi	r24, 0x06	; 6
     d58:	0e 94 0e 09 	call	0x121c	; 0x121c <oled_goto_xy>
						puts("Into PID config mode");
     d5c:	8f e1       	ldi	r24, 0x1F	; 31
     d5e:	92 e0       	ldi	r25, 0x02	; 2
     d60:	0e 94 b5 0a 	call	0x156a	; 0x156a <puts>
						oled_goto_xy(2,5);
     d64:	65 e0       	ldi	r22, 0x05	; 5
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	0e 94 0e 09 	call	0x121c	; 0x121c <oled_goto_xy>
						printf("Current Kp%2d, Ki%2d, Kd%2d",tx_data[3],tx_data[4],tx_data[5]);
     d6c:	8e 85       	ldd	r24, Y+14	; 0x0e
     d6e:	1f 92       	push	r1
     d70:	8f 93       	push	r24
     d72:	8d 85       	ldd	r24, Y+13	; 0x0d
     d74:	1f 92       	push	r1
     d76:	8f 93       	push	r24
     d78:	8c 85       	ldd	r24, Y+12	; 0x0c
     d7a:	1f 92       	push	r1
     d7c:	8f 93       	push	r24
     d7e:	84 e3       	ldi	r24, 0x34	; 52
     d80:	92 e0       	ldi	r25, 0x02	; 2
     d82:	9f 93       	push	r25
     d84:	8f 93       	push	r24
     d86:	0e 94 a1 0a 	call	0x1542	; 0x1542 <printf>
						flag_enable_online_tuning = 1;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	90 93 bf 02 	sts	0x02BF, r25
     d92:	80 93 be 02 	sts	0x02BE, r24
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	1c c0       	rjmp	.+56     	; 0xdda <main+0x43e>
					}else 
					// Play Mode
					if (!strcmp("play\n",rx_buff))
     da2:	69 ec       	ldi	r22, 0xC9	; 201
     da4:	72 e0       	ldi	r23, 0x02	; 2
     da6:	80 e5       	ldi	r24, 0x50	; 80
     da8:	92 e0       	ldi	r25, 0x02	; 2
     daa:	0e 94 56 0a 	call	0x14ac	; 0x14ac <strcmp>
     dae:	89 2b       	or	r24, r25
     db0:	a1 f4       	brne	.+40     	; 0xdda <main+0x43e>
}
/************************************************************************/
/*  display managing flags    and routine                                */
/************************************************************************/
inline static void Menu_Dsp_flag_clr(void){
	flag_enable_debug_mode_display = 0;
     db2:	10 92 1d 01 	sts	0x011D, r1
     db6:	10 92 1c 01 	sts	0x011C, r1
	flag_enable_online_tuning = 0;
     dba:	10 92 bf 02 	sts	0x02BF, r1
     dbe:	10 92 be 02 	sts	0x02BE, r1
					}else 
					// Play Mode
					if (!strcmp("play\n",rx_buff))
					{	
						Menu_Dsp_flag_clr();
						Menu_Navigate(&Menu_1_1);
     dc2:	87 e3       	ldi	r24, 0x37	; 55
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	0e 94 90 08 	call	0x1120	; 0x1120 <Menu_Navigate>
						oled_goto_xy(6,0);
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	86 e0       	ldi	r24, 0x06	; 6
     dce:	0e 94 0e 09 	call	0x121c	; 0x121c <oled_goto_xy>
						puts("Into Play mode");
     dd2:	86 e5       	ldi	r24, 0x56	; 86
     dd4:	92 e0       	ldi	r25, 0x02	; 2
     dd6:	0e 94 b5 0a 	call	0x156a	; 0x156a <puts>
					}
					if (!strcmp("debug\n",rx_buff))
     dda:	69 ec       	ldi	r22, 0xC9	; 201
     ddc:	72 e0       	ldi	r23, 0x02	; 2
     dde:	85 e6       	ldi	r24, 0x65	; 101
     de0:	92 e0       	ldi	r25, 0x02	; 2
     de2:	0e 94 56 0a 	call	0x14ac	; 0x14ac <strcmp>
     de6:	89 2b       	or	r24, r25
     de8:	71 f4       	brne	.+28     	; 0xe06 <main+0x46a>
}
/************************************************************************/
/*  display managing flags    and routine                                */
/************************************************************************/
inline static void Menu_Dsp_flag_clr(void){
	flag_enable_debug_mode_display = 0;
     dea:	10 92 1d 01 	sts	0x011D, r1
     dee:	10 92 1c 01 	sts	0x011C, r1
	flag_enable_online_tuning = 0;
     df2:	10 92 bf 02 	sts	0x02BF, r1
     df6:	10 92 be 02 	sts	0x02BE, r1
						puts("Into Play mode");
					}
					if (!strcmp("debug\n",rx_buff))
					{
						Menu_Dsp_flag_clr();
						Menu_Navigate(&Menu_3_1);
     dfa:	8f e8       	ldi	r24, 0x8F	; 143
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 90 08 	call	0x1120	; 0x1120 <Menu_Navigate>
						/*oled_goto_xy(6,0);
						puts("Into Debug mode");*/
						Menu_EnterCurrentItem();
     e02:	0e 94 16 08 	call	0x102c	; 0x102c <Menu_EnterCurrentItem>
					}
					
					/************************************************************************/
					/*    online changing pid gains enabled                                 */
					/************************************************************************/
					if (flag_enable_online_tuning)
     e06:	80 91 be 02 	lds	r24, 0x02BE
     e0a:	90 91 bf 02 	lds	r25, 0x02BF
     e0e:	89 2b       	or	r24, r25
     e10:	09 f4       	brne	.+2      	; 0xe14 <main+0x478>
     e12:	2c ce       	rjmp	.-936    	; 0xa6c <main+0xd0>
					{	
						int getval;
						if (!strncmp("kp ",rx_buff,3)){
     e14:	43 e0       	ldi	r20, 0x03	; 3
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	69 ec       	ldi	r22, 0xC9	; 201
     e1a:	72 e0       	ldi	r23, 0x02	; 2
     e1c:	8c e6       	ldi	r24, 0x6C	; 108
     e1e:	92 e0       	ldi	r25, 0x02	; 2
     e20:	0e 94 5f 0a 	call	0x14be	; 0x14be <strncmp>
     e24:	89 2b       	or	r24, r25
     e26:	f1 f4       	brne	.+60     	; 0xe64 <main+0x4c8>
							sscanf(rx_buff,"kp %d\n", &getval);
     e28:	bf 92       	push	r11
     e2a:	af 92       	push	r10
     e2c:	80 e7       	ldi	r24, 0x70	; 112
     e2e:	92 e0       	ldi	r25, 0x02	; 2
     e30:	9f 93       	push	r25
     e32:	8f 93       	push	r24
     e34:	89 ec       	ldi	r24, 0xC9	; 201
     e36:	92 e0       	ldi	r25, 0x02	; 2
     e38:	9f 93       	push	r25
     e3a:	8f 93       	push	r24
     e3c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sscanf>
							tx_data[3] = (char) getval; 
     e40:	8b 89       	ldd	r24, Y+19	; 0x13
     e42:	9c 89       	ldd	r25, Y+20	; 0x14
     e44:	8c 87       	std	Y+12, r24	; 0x0c
							printf("new kp: %2d\n",tx_data[3]);
     e46:	99 27       	eor	r25, r25
     e48:	9f 93       	push	r25
     e4a:	8f 93       	push	r24
     e4c:	87 e7       	ldi	r24, 0x77	; 119
     e4e:	92 e0       	ldi	r25, 0x02	; 2
     e50:	9f 93       	push	r25
     e52:	8f 93       	push	r24
     e54:	0e 94 a1 0a 	call	0x1542	; 0x1542 <printf>
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	4d c0       	rjmp	.+154    	; 0xefe <main+0x562>
						} else if (!strncmp("ki ",rx_buff,3))
     e64:	43 e0       	ldi	r20, 0x03	; 3
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	69 ec       	ldi	r22, 0xC9	; 201
     e6a:	72 e0       	ldi	r23, 0x02	; 2
     e6c:	84 e8       	ldi	r24, 0x84	; 132
     e6e:	92 e0       	ldi	r25, 0x02	; 2
     e70:	0e 94 5f 0a 	call	0x14be	; 0x14be <strncmp>
     e74:	89 2b       	or	r24, r25
     e76:	e9 f4       	brne	.+58     	; 0xeb2 <main+0x516>
						{
							sscanf(rx_buff,"ki %d\n", &getval);
     e78:	bf 92       	push	r11
     e7a:	af 92       	push	r10
     e7c:	88 e8       	ldi	r24, 0x88	; 136
     e7e:	92 e0       	ldi	r25, 0x02	; 2
     e80:	9f 93       	push	r25
     e82:	8f 93       	push	r24
     e84:	89 ec       	ldi	r24, 0xC9	; 201
     e86:	92 e0       	ldi	r25, 0x02	; 2
     e88:	9f 93       	push	r25
     e8a:	8f 93       	push	r24
     e8c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sscanf>
							tx_data[4] = (char) getval;
     e90:	8b 89       	ldd	r24, Y+19	; 0x13
     e92:	8d 87       	std	Y+13, r24	; 0x0d
							printf("new ki: %2d\n",tx_data[3]);
     e94:	8c 85       	ldd	r24, Y+12	; 0x0c
     e96:	1f 92       	push	r1
     e98:	8f 93       	push	r24
     e9a:	8f e8       	ldi	r24, 0x8F	; 143
     e9c:	92 e0       	ldi	r25, 0x02	; 2
     e9e:	9f 93       	push	r25
     ea0:	8f 93       	push	r24
     ea2:	0e 94 a1 0a 	call	0x1542	; 0x1542 <printf>
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	26 c0       	rjmp	.+76     	; 0xefe <main+0x562>
						} else if (!strncmp("kd ",rx_buff,3))
     eb2:	43 e0       	ldi	r20, 0x03	; 3
     eb4:	50 e0       	ldi	r21, 0x00	; 0
     eb6:	69 ec       	ldi	r22, 0xC9	; 201
     eb8:	72 e0       	ldi	r23, 0x02	; 2
     eba:	8c e9       	ldi	r24, 0x9C	; 156
     ebc:	92 e0       	ldi	r25, 0x02	; 2
     ebe:	0e 94 5f 0a 	call	0x14be	; 0x14be <strncmp>
     ec2:	89 2b       	or	r24, r25
     ec4:	e1 f4       	brne	.+56     	; 0xefe <main+0x562>
						{
							sscanf(rx_buff,"kd %d\n", &getval);
     ec6:	bf 92       	push	r11
     ec8:	af 92       	push	r10
     eca:	80 ea       	ldi	r24, 0xA0	; 160
     ecc:	92 e0       	ldi	r25, 0x02	; 2
     ece:	9f 93       	push	r25
     ed0:	8f 93       	push	r24
     ed2:	89 ec       	ldi	r24, 0xC9	; 201
     ed4:	92 e0       	ldi	r25, 0x02	; 2
     ed6:	9f 93       	push	r25
     ed8:	8f 93       	push	r24
     eda:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sscanf>
							tx_data[5] = (char) getval;
     ede:	8b 89       	ldd	r24, Y+19	; 0x13
     ee0:	8e 87       	std	Y+14, r24	; 0x0e
							printf("new kd: %2d\n",tx_data[3]);
     ee2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ee4:	1f 92       	push	r1
     ee6:	8f 93       	push	r24
     ee8:	87 ea       	ldi	r24, 0xA7	; 167
     eea:	92 e0       	ldi	r25, 0x02	; 2
     eec:	9f 93       	push	r25
     eee:	8f 93       	push	r24
     ef0:	0e 94 a1 0a 	call	0x1542	; 0x1542 <printf>
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
						}
						oled_goto_xy(2,5);
     efe:	65 e0       	ldi	r22, 0x05	; 5
     f00:	82 e0       	ldi	r24, 0x02	; 2
     f02:	0e 94 0e 09 	call	0x121c	; 0x121c <oled_goto_xy>
						printf("Current Kp%2d, Ki%2d, Kd%2d",tx_data[3],tx_data[4],tx_data[5]);
     f06:	8e 85       	ldd	r24, Y+14	; 0x0e
     f08:	1f 92       	push	r1
     f0a:	8f 93       	push	r24
     f0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f0e:	1f 92       	push	r1
     f10:	8f 93       	push	r24
     f12:	8c 85       	ldd	r24, Y+12	; 0x0c
     f14:	1f 92       	push	r1
     f16:	8f 93       	push	r24
     f18:	84 e3       	ldi	r24, 0x34	; 52
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	9f 93       	push	r25
     f1e:	8f 93       	push	r24
     f20:	0e 94 a1 0a 	call	0x1542	; 0x1542 <printf>
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	92 cd       	rjmp	.-1244   	; 0xa54 <main+0xb8>

00000f30 <__vector_3>:
                                                                               */
      /************************************************************************/


ISR(INT2_vect)
{
     f30:	1f 92       	push	r1
     f32:	0f 92       	push	r0
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	0f 92       	push	r0
     f38:	11 24       	eor	r1, r1
     f3a:	8f 93       	push	r24
     f3c:	9f 93       	push	r25
	can_rx_flag=1;					//set receive (CAN receive NOT UART!!!) flag for main function, flag will be cleared in main.
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	90 93 bd 02 	sts	0x02BD, r25
     f46:	80 93 bc 02 	sts	0x02BC, r24
	GIFR &= ~(1<<INTF2);		//clear interrupt flag
     f4a:	8a b7       	in	r24, 0x3a	; 58
     f4c:	8f 7d       	andi	r24, 0xDF	; 223
     f4e:	8a bf       	out	0x3a, r24	; 58
}
     f50:	9f 91       	pop	r25
     f52:	8f 91       	pop	r24
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	0f 90       	pop	r0
     f5a:	1f 90       	pop	r1
     f5c:	18 95       	reti

00000f5e <__vector_1>:


ISR(INT0_vect)
{
     f5e:	1f 92       	push	r1
     f60:	0f 92       	push	r0
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	0f 92       	push	r0
     f66:	11 24       	eor	r1, r1
     f68:	8f 93       	push	r24
     f6a:	9f 93       	push	r25
	flag_plunger=1;		//set flag
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	90 93 bb 02 	sts	0x02BB, r25
     f74:	80 93 ba 02 	sts	0x02BA, r24
	GIFR &= ~(1<<INTF0);	//clear flag of interrupt
     f78:	8a b7       	in	r24, 0x3a	; 58
     f7a:	8f 7b       	andi	r24, 0xBF	; 191
     f7c:	8a bf       	out	0x3a, r24	; 58
}
     f7e:	9f 91       	pop	r25
     f80:	8f 91       	pop	r24
     f82:	0f 90       	pop	r0
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	0f 90       	pop	r0
     f88:	1f 90       	pop	r1
     f8a:	18 95       	reti

00000f8c <__vector_20>:


ISR ( USART1_RXC_vect)
{
     f8c:	1f 92       	push	r1
     f8e:	0f 92       	push	r0
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	0f 92       	push	r0
     f94:	11 24       	eor	r1, r1
     f96:	2f 93       	push	r18
     f98:	8f 93       	push	r24
     f9a:	9f 93       	push	r25
     f9c:	ef 93       	push	r30
     f9e:	ff 93       	push	r31
	
		if(!is_main_not_fetch_the_buffer){
     fa0:	80 91 b8 02 	lds	r24, 0x02B8
     fa4:	90 91 b9 02 	lds	r25, 0x02B9
     fa8:	89 2b       	or	r24, r25
     faa:	61 f5       	brne	.+88     	; 0x1004 <__vector_20+0x78>
			
			rx_buff[rx_count]=UDR1;
     fac:	83 b1       	in	r24, 0x03	; 3
     fae:	e0 91 b6 02 	lds	r30, 0x02B6
     fb2:	f0 91 b7 02 	lds	r31, 0x02B7
     fb6:	e7 53       	subi	r30, 0x37	; 55
     fb8:	fd 4f       	sbci	r31, 0xFD	; 253
     fba:	80 83       	st	Z, r24
			
			
			//UCSR1A &= ~(1<<RXC1);		//Clear Flag
			//UCSR1A |= (1<<UDRE1);		//Flush the buffer and enable it for next transmission
			UCSR1A &= ~(1<<RXC1);		//Clear Flag
     fbc:	17 98       	cbi	0x02, 7	; 2
			
			if(rx_buff[rx_count]=='\r'||rx_buff[rx_count]=='\n'||rx_count>18)
     fbe:	80 91 b6 02 	lds	r24, 0x02B6
     fc2:	90 91 b7 02 	lds	r25, 0x02B7
     fc6:	fc 01       	movw	r30, r24
     fc8:	e7 53       	subi	r30, 0x37	; 55
     fca:	fd 4f       	sbci	r31, 0xFD	; 253
     fcc:	20 81       	ld	r18, Z
     fce:	2d 30       	cpi	r18, 0x0D	; 13
     fd0:	29 f0       	breq	.+10     	; 0xfdc <__vector_20+0x50>
     fd2:	2a 30       	cpi	r18, 0x0A	; 10
     fd4:	19 f0       	breq	.+6      	; 0xfdc <__vector_20+0x50>
     fd6:	83 31       	cpi	r24, 0x13	; 19
     fd8:	91 05       	cpc	r25, r1
     fda:	7c f0       	brlt	.+30     	; 0xffa <__vector_20+0x6e>
			{
				rx_buff[rx_count+1] = '\0';
     fdc:	fc 01       	movw	r30, r24
     fde:	e7 53       	subi	r30, 0x37	; 55
     fe0:	fd 4f       	sbci	r31, 0xFD	; 253
     fe2:	11 82       	std	Z+1, r1	; 0x01
				rx_count=0;
     fe4:	10 92 b7 02 	sts	0x02B7, r1
     fe8:	10 92 b6 02 	sts	0x02B6, r1
				is_main_not_fetch_the_buffer=1;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	90 93 b9 02 	sts	0x02B9, r25
     ff4:	80 93 b8 02 	sts	0x02B8, r24
     ff8:	05 c0       	rjmp	.+10     	; 0x1004 <__vector_20+0x78>
			
			}else{
				rx_count++;
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	90 93 b7 02 	sts	0x02B7, r25
    1000:	80 93 b6 02 	sts	0x02B6, r24
				
				
			}	
		}
		
}
    1004:	ff 91       	pop	r31
    1006:	ef 91       	pop	r30
    1008:	9f 91       	pop	r25
    100a:	8f 91       	pop	r24
    100c:	2f 91       	pop	r18
    100e:	0f 90       	pop	r0
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	0f 90       	pop	r0
    1014:	1f 90       	pop	r1
    1016:	18 95       	reti

00001018 <Menu_GetCurrentMenu>:


Menu_Item_t* Menu_GetCurrentMenu(void)
{
	return CurrentMenuItem;
}
    1018:	80 91 1e 01 	lds	r24, 0x011E
    101c:	90 91 1f 01 	lds	r25, 0x011F
    1020:	08 95       	ret

00001022 <Menu_SetGenericClear>:
{
	MenuWriteFunc = WriteFunc;
	Menu_Navigate(CurrentMenuItem);
}
void Menu_SetGenericClear(void (*ClrFunc)(void)){
	MenuClrFunc = ClrFunc;
    1022:	90 93 c4 02 	sts	0x02C4, r25
    1026:	80 93 c3 02 	sts	0x02C3, r24
    102a:	08 95       	ret

0000102c <Menu_EnterCurrentItem>:
}
void Menu_EnterCurrentItem(void)
{
	if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
    102c:	e0 91 1e 01 	lds	r30, 0x011E
    1030:	f0 91 1f 01 	lds	r31, 0x011F
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	e3 3d       	cpi	r30, 0xD3	; 211
    1038:	f8 07       	cpc	r31, r24
    103a:	49 f0       	breq	.+18     	; 0x104e <Menu_EnterCurrentItem+0x22>
    103c:	30 97       	sbiw	r30, 0x00	; 0
    103e:	39 f0       	breq	.+14     	; 0x104e <Menu_EnterCurrentItem+0x22>
		return;

	void (*EnterCallback)(void) = MENU_ITEM_READ_POINTER(&CurrentMenuItem->EnterCallback);
    1040:	3c 96       	adiw	r30, 0x0c	; 12
    1042:	85 91       	lpm	r24, Z+
    1044:	94 91       	lpm	r25, Z

	if (EnterCallback)
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	11 f0       	breq	.+4      	; 0x104e <Menu_EnterCurrentItem+0x22>
		EnterCallback();
    104a:	fc 01       	movw	r30, r24
    104c:	09 95       	icall
    104e:	08 95       	ret

00001050 <Menu_DrawBase>:
}

/************************************************************************/
/* draw the base of the whole menu, all same level items of new         */
/************************************************************************/
void Menu_DrawBase(void){
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
static Menu_Item_t* CurrentMenuItem = &NULL_MENU;


Menu_Item_t* Menu_GetCurrentMenu(void)
{
	return CurrentMenuItem;
    1054:	c0 91 1e 01 	lds	r28, 0x011E
    1058:	d0 91 1f 01 	lds	r29, 0x011F
/************************************************************************/
/* draw the base of the whole menu, all same level items of new         */
/************************************************************************/
void Menu_DrawBase(void){
	Menu_Item_t * ptr = Menu_GetCurrentMenu();// payattention here you need some thing
	if ((ptr == &NULL_MENU) || (ptr == NULL))
    105c:	21 e0       	ldi	r18, 0x01	; 1
    105e:	c3 3d       	cpi	r28, 0xD3	; 211
    1060:	d2 07       	cpc	r29, r18
    1062:	09 f4       	brne	.+2      	; 0x1066 <Menu_DrawBase+0x16>
    1064:	5a c0       	rjmp	.+180    	; 0x111a <Menu_DrawBase+0xca>
    1066:	20 97       	sbiw	r28, 0x00	; 0
    1068:	09 f4       	brne	.+2      	; 0x106c <Menu_DrawBase+0x1c>
    106a:	57 c0       	rjmp	.+174    	; 0x111a <Menu_DrawBase+0xca>
	return;
	// get the first item of the same level
	while (
		(MENU_ITEM_READ_POINTER(&ptr->Previous) != &NULL_MENU)
    106c:	ce 01       	movw	r24, r28
    106e:	04 96       	adiw	r24, 0x04	; 4
    1070:	fc 01       	movw	r30, r24
    1072:	25 91       	lpm	r18, Z+
    1074:	34 91       	lpm	r19, Z
void Menu_DrawBase(void){
	Menu_Item_t * ptr = Menu_GetCurrentMenu();// payattention here you need some thing
	if ((ptr == &NULL_MENU) || (ptr == NULL))
	return;
	// get the first item of the same level
	while (
    1076:	23 5d       	subi	r18, 0xD3	; 211
    1078:	31 40       	sbci	r19, 0x01	; 1
    107a:	a9 f0       	breq	.+42     	; 0x10a6 <Menu_DrawBase+0x56>
		(MENU_ITEM_READ_POINTER(&ptr->Previous) != &NULL_MENU)
		 && (MENU_ITEM_READ_POINTER(&ptr->Previous) != NULL)
    107c:	fc 01       	movw	r30, r24
    107e:	25 91       	lpm	r18, Z+
    1080:	34 91       	lpm	r19, Z
    1082:	23 2b       	or	r18, r19
    1084:	81 f0       	breq	.+32     	; 0x10a6 <Menu_DrawBase+0x56>
		 )
		ptr = MENU_ITEM_READ_POINTER(&ptr->Previous);
    1086:	fc 01       	movw	r30, r24
    1088:	85 91       	lpm	r24, Z+
    108a:	94 91       	lpm	r25, Z
    108c:	ec 01       	movw	r28, r24
	Menu_Item_t * ptr = Menu_GetCurrentMenu();// payattention here you need some thing
	if ((ptr == &NULL_MENU) || (ptr == NULL))
	return;
	// get the first item of the same level
	while (
		(MENU_ITEM_READ_POINTER(&ptr->Previous) != &NULL_MENU)
    108e:	04 96       	adiw	r24, 0x04	; 4
    1090:	fc 01       	movw	r30, r24
    1092:	25 91       	lpm	r18, Z+
    1094:	34 91       	lpm	r19, Z
void Menu_DrawBase(void){
	Menu_Item_t * ptr = Menu_GetCurrentMenu();// payattention here you need some thing
	if ((ptr == &NULL_MENU) || (ptr == NULL))
	return;
	// get the first item of the same level
	while (
    1096:	23 5d       	subi	r18, 0xD3	; 211
    1098:	31 40       	sbci	r19, 0x01	; 1
    109a:	29 f0       	breq	.+10     	; 0x10a6 <Menu_DrawBase+0x56>
		(MENU_ITEM_READ_POINTER(&ptr->Previous) != &NULL_MENU)
		 && (MENU_ITEM_READ_POINTER(&ptr->Previous) != NULL)
    109c:	fc 01       	movw	r30, r24
    109e:	25 91       	lpm	r18, Z+
    10a0:	34 91       	lpm	r19, Z
    10a2:	23 2b       	or	r18, r19
    10a4:	81 f7       	brne	.-32     	; 0x1086 <Menu_DrawBase+0x36>
		 )
		ptr = MENU_ITEM_READ_POINTER(&ptr->Previous);
		
	// get the first item of the same level
	if (MenuWriteFunc){
    10a6:	20 91 c5 02 	lds	r18, 0x02C5
    10aa:	30 91 c6 02 	lds	r19, 0x02C6
    10ae:	21 15       	cp	r18, r1
    10b0:	31 05       	cpc	r19, r1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <Menu_DrawBase+0x66>
    10b4:	32 c0       	rjmp	.+100    	; 0x111a <Menu_DrawBase+0xca>
		MenuWriteFunc(pgm_read_byte(&(ptr->pos_x)),pgm_read_byte(&(ptr->pos_y)),ptr->Text);
    10b6:	fe 01       	movw	r30, r28
    10b8:	31 96       	adiw	r30, 0x01	; 1
    10ba:	64 91       	lpm	r22, Z
    10bc:	fe 01       	movw	r30, r28
    10be:	84 91       	lpm	r24, Z
    10c0:	ae 01       	movw	r20, r28
    10c2:	42 5f       	subi	r20, 0xF2	; 242
    10c4:	5f 4f       	sbci	r21, 0xFF	; 255
    10c6:	f9 01       	movw	r30, r18
    10c8:	09 95       	icall
		while (( MENU_ITEM_READ_POINTER(&ptr->Next) != &NULL_MENU) && ( MENU_ITEM_READ_POINTER(&ptr->Next) != NULL)) {
    10ca:	22 96       	adiw	r28, 0x02	; 2
    10cc:	fe 01       	movw	r30, r28
    10ce:	85 91       	lpm	r24, Z+
    10d0:	94 91       	lpm	r25, Z
    10d2:	83 5d       	subi	r24, 0xD3	; 211
    10d4:	91 40       	sbci	r25, 0x01	; 1
    10d6:	09 f1       	breq	.+66     	; 0x111a <Menu_DrawBase+0xca>
    10d8:	fe 01       	movw	r30, r28
    10da:	85 91       	lpm	r24, Z+
    10dc:	94 91       	lpm	r25, Z
    10de:	89 2b       	or	r24, r25
    10e0:	e1 f0       	breq	.+56     	; 0x111a <Menu_DrawBase+0xca>
			ptr = MENU_ITEM_READ_POINTER(&ptr->Next);
    10e2:	fe 01       	movw	r30, r28
    10e4:	c5 91       	lpm	r28, Z+
    10e6:	d4 91       	lpm	r29, Z
			MenuWriteFunc(pgm_read_byte(&(ptr->pos_x)),pgm_read_byte(&(ptr->pos_y)),ptr->Text);
    10e8:	fe 01       	movw	r30, r28
    10ea:	31 96       	adiw	r30, 0x01	; 1
    10ec:	64 91       	lpm	r22, Z
    10ee:	fe 01       	movw	r30, r28
    10f0:	84 91       	lpm	r24, Z
    10f2:	ae 01       	movw	r20, r28
    10f4:	42 5f       	subi	r20, 0xF2	; 242
    10f6:	5f 4f       	sbci	r21, 0xFF	; 255
    10f8:	e0 91 c5 02 	lds	r30, 0x02C5
    10fc:	f0 91 c6 02 	lds	r31, 0x02C6
    1100:	09 95       	icall
		ptr = MENU_ITEM_READ_POINTER(&ptr->Previous);
		
	// get the first item of the same level
	if (MenuWriteFunc){
		MenuWriteFunc(pgm_read_byte(&(ptr->pos_x)),pgm_read_byte(&(ptr->pos_y)),ptr->Text);
		while (( MENU_ITEM_READ_POINTER(&ptr->Next) != &NULL_MENU) && ( MENU_ITEM_READ_POINTER(&ptr->Next) != NULL)) {
    1102:	22 96       	adiw	r28, 0x02	; 2
    1104:	fe 01       	movw	r30, r28
    1106:	85 91       	lpm	r24, Z+
    1108:	94 91       	lpm	r25, Z
    110a:	83 5d       	subi	r24, 0xD3	; 211
    110c:	91 40       	sbci	r25, 0x01	; 1
    110e:	29 f0       	breq	.+10     	; 0x111a <Menu_DrawBase+0xca>
    1110:	fe 01       	movw	r30, r28
    1112:	85 91       	lpm	r24, Z+
    1114:	94 91       	lpm	r25, Z
    1116:	89 2b       	or	r24, r25
    1118:	21 f7       	brne	.-56     	; 0x10e2 <Menu_DrawBase+0x92>
			ptr = MENU_ITEM_READ_POINTER(&ptr->Next);
			MenuWriteFunc(pgm_read_byte(&(ptr->pos_x)),pgm_read_byte(&(ptr->pos_y)),ptr->Text);
		}
	}
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	08 95       	ret

00001120 <Menu_Navigate>:
{
	return CurrentMenuItem;
}

void Menu_Navigate(Menu_Item_t* const NewMenu)
{
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
	if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
    1124:	21 e0       	ldi	r18, 0x01	; 1
    1126:	83 3d       	cpi	r24, 0xD3	; 211
    1128:	92 07       	cpc	r25, r18
    112a:	09 f4       	brne	.+2      	; 0x112e <Menu_Navigate+0xe>
    112c:	36 c0       	rjmp	.+108    	; 0x119a <Menu_Navigate+0x7a>
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	09 f4       	brne	.+2      	; 0x1134 <Menu_Navigate+0x14>
    1132:	33 c0       	rjmp	.+102    	; 0x119a <Menu_Navigate+0x7a>
		return;
	static Menu_Item_t* LastMenuItem;
	LastMenuItem = CurrentMenuItem;
    1134:	e0 91 1e 01 	lds	r30, 0x011E
    1138:	f0 91 1f 01 	lds	r31, 0x011F
    113c:	f0 93 c2 02 	sts	0x02C2, r31
    1140:	e0 93 c1 02 	sts	0x02C1, r30
	CurrentMenuItem = NewMenu;
    1144:	90 93 1f 01 	sts	0x011F, r25
    1148:	80 93 1e 01 	sts	0x011E, r24
	if (MENU_ITEM_READ_POINTER(&LastMenuItem->Parent) != MENU_ITEM_READ_POINTER(&NewMenu->Parent))
    114c:	36 96       	adiw	r30, 0x06	; 6
    114e:	25 91       	lpm	r18, Z+
    1150:	34 91       	lpm	r19, Z
    1152:	06 96       	adiw	r24, 0x06	; 6
    1154:	fc 01       	movw	r30, r24
    1156:	85 91       	lpm	r24, Z+
    1158:	94 91       	lpm	r25, Z
    115a:	28 17       	cp	r18, r24
    115c:	39 07       	cpc	r19, r25
    115e:	29 f0       	breq	.+10     	; 0x116a <Menu_Navigate+0x4a>
	{
		// not the same level navigation, need to be refreshed
		MenuClrFunc();
    1160:	e0 91 c3 02 	lds	r30, 0x02C3
    1164:	f0 91 c4 02 	lds	r31, 0x02C4
    1168:	09 95       	icall
/*
	if (MenuWriteFunc)
		MenuWriteFunc(pgm_read_byte(&(CurrentMenuItem->pos_x)),pgm_read_byte(&(CurrentMenuItem->pos_y)),CurrentMenuItem->Text);
*/

	void (*SelectCallback)(uint8_t x, uint8_t y, const char* Text) = MENU_ITEM_READ_POINTER(&CurrentMenuItem->SelectCallback);
    116a:	e0 91 1e 01 	lds	r30, 0x011E
    116e:	f0 91 1f 01 	lds	r31, 0x011F
    1172:	3a 96       	adiw	r30, 0x0a	; 10
    1174:	c5 91       	lpm	r28, Z+
    1176:	d4 91       	lpm	r29, Z
	
	Menu_DrawBase();
    1178:	0e 94 28 08 	call	0x1050	; 0x1050 <Menu_DrawBase>
	if (SelectCallback)
    117c:	20 97       	sbiw	r28, 0x00	; 0
    117e:	69 f0       	breq	.+26     	; 0x119a <Menu_Navigate+0x7a>
		SelectCallback(pgm_read_byte(&(CurrentMenuItem->pos_x)),pgm_read_byte(&(CurrentMenuItem->pos_y)),CurrentMenuItem->Text);
    1180:	40 91 1e 01 	lds	r20, 0x011E
    1184:	50 91 1f 01 	lds	r21, 0x011F
    1188:	fa 01       	movw	r30, r20
    118a:	31 96       	adiw	r30, 0x01	; 1
    118c:	64 91       	lpm	r22, Z
    118e:	fa 01       	movw	r30, r20
    1190:	84 91       	lpm	r24, Z
    1192:	42 5f       	subi	r20, 0xF2	; 242
    1194:	5f 4f       	sbci	r21, 0xFF	; 255
    1196:	fe 01       	movw	r30, r28
    1198:	09 95       	icall
}
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	08 95       	ret

000011a0 <Menu_SetGenericWriteCallback>:

void Menu_SetGenericWriteCallback(void (*WriteFunc)(uint8_t x, uint8_t y, const char* Text))
{
	MenuWriteFunc = WriteFunc;
    11a0:	90 93 c6 02 	sts	0x02C6, r25
    11a4:	80 93 c5 02 	sts	0x02C5, r24
	Menu_Navigate(CurrentMenuItem);
    11a8:	80 91 1e 01 	lds	r24, 0x011E
    11ac:	90 91 1f 01 	lds	r25, 0x011F
    11b0:	0e 94 90 08 	call	0x1120	; 0x1120 <Menu_Navigate>
    11b4:	08 95       	ret

000011b6 <oled_init>:
}

 
 void oled_init(void)
 {
 	MCUCR |= (1<<SRE);        //Enable External Memory interface
    11b6:	85 b7       	in	r24, 0x35	; 53
    11b8:	80 68       	ori	r24, 0x80	; 128
    11ba:	85 bf       	out	0x35, r24	; 53
 	SFIOR |= (1<<XMM2);       //Mask out higher 4 bits of address
    11bc:	80 b7       	in	r24, 0x30	; 48
    11be:	80 62       	ori	r24, 0x20	; 32
    11c0:	80 bf       	out	0x30, r24	; 48
 	volatile uint8_t *addr= (uint8_t *) OLED_ADDR_CMD_START;		//selcet command mode
 	
 	//code copied from datasheet
 	*addr=0xae;				//turn display off
    11c2:	ef e0       	ldi	r30, 0x0F	; 15
    11c4:	f0 e1       	ldi	r31, 0x10	; 16
    11c6:	8e ea       	ldi	r24, 0xAE	; 174
    11c8:	80 83       	st	Z, r24
 	*addr=0xa1;			//column addr 127 is mapped to seg0
    11ca:	81 ea       	ldi	r24, 0xA1	; 161
    11cc:	80 83       	st	Z, r24
 	*addr=0xda;				//com pin configuration
    11ce:	8a ed       	ldi	r24, 0xDA	; 218
    11d0:	80 83       	st	Z, r24
 	*addr=0x12;				//com pin config=alternative
    11d2:	82 e1       	ldi	r24, 0x12	; 18
    11d4:	80 83       	st	Z, r24
 	*addr=0xc8;				//o/p scan direction com63 to com0
    11d6:	88 ec       	ldi	r24, 0xC8	; 200
    11d8:	80 83       	st	Z, r24
 	*addr=0xa8;				//multiplex ratio config
    11da:	88 ea       	ldi	r24, 0xA8	; 168
    11dc:	80 83       	st	Z, r24
 	*addr=0x3f;				//ratio=63
    11de:	8f e3       	ldi	r24, 0x3F	; 63
    11e0:	80 83       	st	Z, r24
 	*addr=0xd5;				//dclck ratio
    11e2:	85 ed       	ldi	r24, 0xD5	; 213
    11e4:	80 83       	st	Z, r24
 	*addr=0x80;				//divide ratio and oscl. frequency
    11e6:	80 e8       	ldi	r24, 0x80	; 128
    11e8:	80 83       	st	Z, r24
 	*addr=0x81;				//contrast control
    11ea:	81 e8       	ldi	r24, 0x81	; 129
    11ec:	80 83       	st	Z, r24
 	*addr=0x50;				//value of contrast is 50h
    11ee:	80 e5       	ldi	r24, 0x50	; 80
    11f0:	80 83       	st	Z, r24
 	*addr=0xd9;				//set pre-charge period
    11f2:	89 ed       	ldi	r24, 0xD9	; 217
    11f4:	80 83       	st	Z, r24
 	*addr=0x21;				//value =21
    11f6:	81 e2       	ldi	r24, 0x21	; 33
    11f8:	80 83       	st	Z, r24
 	*addr=0x20;				//set memory addressing mode
    11fa:	80 e2       	ldi	r24, 0x20	; 32
    11fc:	80 83       	st	Z, r24
 	*addr=0x00;				//horz addressing mode
    11fe:	10 82       	st	Z, r1
 	*addr=0xdb;				//vcom de-select level mode
    1200:	8b ed       	ldi	r24, 0xDB	; 219
    1202:	80 83       	st	Z, r24
 	*addr=0x30;				//value=0.83vcc
    1204:	80 e3       	ldi	r24, 0x30	; 48
    1206:	80 83       	st	Z, r24
 	*addr=0xad;				//master configuration
    1208:	8d ea       	ldi	r24, 0xAD	; 173
    120a:	80 83       	st	Z, r24
 	*addr=0x00;				//select extrenal iref
    120c:	10 82       	st	Z, r1
 	*addr=0xa4;				//out follows ram content
    120e:	84 ea       	ldi	r24, 0xA4	; 164
    1210:	80 83       	st	Z, r24
 	*addr=0xa6;				//set normal display
    1212:	86 ea       	ldi	r24, 0xA6	; 166
    1214:	80 83       	st	Z, r24
 	*addr=0xaf;				//display on
    1216:	8f ea       	ldi	r24, 0xAF	; 175
    1218:	80 83       	st	Z, r24
    121a:	08 95       	ret

0000121c <oled_goto_xy>:



void oled_goto_xy(uint8_t col,uint8_t row){
	// input: 0 to max - min.
	current_col_address = col;
    121c:	80 93 c8 02 	sts	0x02C8, r24
	current_pag_address = row;
    1220:	60 93 c7 02 	sts	0x02C7, r22
void oled_wr_cmd(uint8_t cmd){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_CMD_START;
	*addr = cmd;*/
	volatile uint8_t *  addr = (uint8_t *)OLED_ADDR_CMD_START;
	*addr = cmd;
    1224:	ef e0       	ldi	r30, 0x0F	; 15
    1226:	f0 e1       	ldi	r31, 0x10	; 16
    1228:	91 e2       	ldi	r25, 0x21	; 33
    122a:	90 83       	st	Z, r25
    122c:	80 83       	st	Z, r24
    122e:	8f e7       	ldi	r24, 0x7F	; 127
    1230:	80 83       	st	Z, r24
    1232:	82 e2       	ldi	r24, 0x22	; 34
    1234:	80 83       	st	Z, r24
    1236:	60 83       	st	Z, r22
    1238:	86 e0       	ldi	r24, 0x06	; 6
    123a:	80 83       	st	Z, r24
    123c:	08 95       	ret

0000123e <oled_goto_nextln>:
	oled_wr_cmd(END_PAGE);
}

void oled_goto_nextln(void){
	// input: 0 to max-min
	current_pag_address++;
    123e:	80 91 c7 02 	lds	r24, 0x02C7
    1242:	8f 5f       	subi	r24, 0xFF	; 255
    1244:	80 93 c7 02 	sts	0x02C7, r24
	if(current_pag_address > END_PAGE - START_PAGE)
    1248:	80 91 c7 02 	lds	r24, 0x02C7
    124c:	87 30       	cpi	r24, 0x07	; 7
    124e:	10 f0       	brcs	.+4      	; 0x1254 <oled_goto_nextln+0x16>
		current_pag_address = 0;
    1250:	10 92 c7 02 	sts	0x02C7, r1
	oled_goto_xy(0, current_pag_address);
    1254:	60 91 c7 02 	lds	r22, 0x02C7
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	0e 94 0e 09 	call	0x121c	; 0x121c <oled_goto_xy>
    125e:	08 95       	ret

00001260 <oled_putchar>:
}
void oled_putchar( const char c){
    1260:	cf 93       	push	r28
	if(c == '\n'){
    1262:	8a 30       	cpi	r24, 0x0A	; 10
    1264:	19 f4       	brne	.+6      	; 0x126c <oled_putchar+0xc>
		oled_goto_nextln();
    1266:	0e 94 1f 09 	call	0x123e	; 0x123e <oled_goto_nextln>
		return;
    126a:	29 c0       	rjmp	.+82     	; 0x12be <oled_putchar+0x5e>
	}
	int i;
	const char j = (c-' ');
    126c:	c0 ee       	ldi	r28, 0xE0	; 224
    126e:	c8 0f       	add	r28, r24
	current_col_address+=CHA_WIDTH;
    1270:	80 91 c8 02 	lds	r24, 0x02C8
    1274:	8b 5f       	subi	r24, 0xFB	; 251
    1276:	80 93 c8 02 	sts	0x02C8, r24

	if(current_col_address/CHA_WIDTH >= MAX_CHARS_A_LINE){
    127a:	80 91 c8 02 	lds	r24, 0x02C8
    127e:	8d 37       	cpi	r24, 0x7D	; 125
    1280:	70 f0       	brcs	.+28     	; 0x129e <oled_putchar+0x3e>
		//current_col_address = 0;
		oled_goto_nextln();
    1282:	0e 94 1f 09 	call	0x123e	; 0x123e <oled_goto_nextln>
    1286:	0b c0       	rjmp	.+22     	; 0x129e <oled_putchar+0x3e>
    1288:	fc 01       	movw	r30, r24
    128a:	e2 0f       	add	r30, r18
    128c:	f3 1f       	adc	r31, r19
	}


	for(i = 0; i < 5; i++){
		// pay attention, progmem read
		 oled_wr_d(pgm_read_byte(&font[(int)j][i]));
    128e:	e4 91       	lpm	r30, Z
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
    1290:	ec 93       	st	X, r30
		//current_col_address = 0;
		oled_goto_nextln();
	}


	for(i = 0; i < 5; i++){
    1292:	2f 5f       	subi	r18, 0xFF	; 255
    1294:	3f 4f       	sbci	r19, 0xFF	; 255
    1296:	25 30       	cpi	r18, 0x05	; 5
    1298:	31 05       	cpc	r19, r1
    129a:	b1 f7       	brne	.-20     	; 0x1288 <oled_putchar+0x28>
    129c:	10 c0       	rjmp	.+32     	; 0x12be <oled_putchar+0x5e>
    129e:	8c 2f       	mov	r24, r28
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9c 01       	movw	r18, r24
    12a4:	22 0f       	add	r18, r18
    12a6:	33 1f       	adc	r19, r19
    12a8:	22 0f       	add	r18, r18
    12aa:	33 1f       	adc	r19, r19
    12ac:	82 0f       	add	r24, r18
    12ae:	93 1f       	adc	r25, r19
	current_pag_address++;
	if(current_pag_address > END_PAGE - START_PAGE)
		current_pag_address = 0;
	oled_goto_xy(0, current_pag_address);
}
void oled_putchar( const char c){
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	8f 51       	subi	r24, 0x1F	; 31
    12b6:	9e 4f       	sbci	r25, 0xFE	; 254
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
    12b8:	af e0       	ldi	r26, 0x0F	; 15
    12ba:	b2 e1       	ldi	r27, 0x12	; 18
    12bc:	e5 cf       	rjmp	.-54     	; 0x1288 <oled_putchar+0x28>

	for(i = 0; i < 5; i++){
		// pay attention, progmem read
		 oled_wr_d(pgm_read_byte(&font[(int)j][i]));
	}
}
    12be:	cf 91       	pop	r28
    12c0:	08 95       	ret

000012c2 <oled_putstr_P>:
}
void oled_putstr_inverse( const char * str){
	while(*str)
		oled_putchar_inverse(*str++);
}
void oled_putstr_P( const char * str){
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	ec 01       	movw	r28, r24
		char read = pgm_read_byte(str);
    12c8:	fc 01       	movw	r30, r24
    12ca:	84 91       	lpm	r24, Z
		// Display buffer on LCD.
		while(read){
    12cc:	88 23       	and	r24, r24
    12ce:	39 f0       	breq	.+14     	; 0x12de <oled_putstr_P+0x1c>
			oled_putchar(read);
    12d0:	0e 94 30 09 	call	0x1260	; 0x1260 <oled_putchar>
			str++;
    12d4:	21 96       	adiw	r28, 0x01	; 1
			read = pgm_read_byte(str);
    12d6:	fe 01       	movw	r30, r28
    12d8:	84 91       	lpm	r24, Z
		oled_putchar_inverse(*str++);
}
void oled_putstr_P( const char * str){
		char read = pgm_read_byte(str);
		// Display buffer on LCD.
		while(read){
    12da:	81 11       	cpse	r24, r1
    12dc:	f9 cf       	rjmp	.-14     	; 0x12d0 <oled_putstr_P+0xe>
			oled_putchar(read);
			str++;
			read = pgm_read_byte(str);
		}
		
}
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	08 95       	ret

000012e4 <oled_clear>:
		read = pgm_read_byte(str);
	}
	
}
void oled_clear(void){
	current_col_address = 0;
    12e4:	10 92 c8 02 	sts	0x02C8, r1
	current_pag_address = 0;
    12e8:	10 92 c7 02 	sts	0x02C7, r1
void oled_wr_cmd(uint8_t cmd){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_CMD_START;
	*addr = cmd;*/
	volatile uint8_t *  addr = (uint8_t *)OLED_ADDR_CMD_START;
	*addr = cmd;
    12ec:	ef e0       	ldi	r30, 0x0F	; 15
    12ee:	f0 e1       	ldi	r31, 0x10	; 16
    12f0:	8e ea       	ldi	r24, 0xAE	; 174
    12f2:	80 83       	st	Z, r24
    12f4:	80 e2       	ldi	r24, 0x20	; 32
    12f6:	80 83       	st	Z, r24
    12f8:	10 82       	st	Z, r1
    12fa:	81 e2       	ldi	r24, 0x21	; 33
    12fc:	80 83       	st	Z, r24
    12fe:	10 82       	st	Z, r1
    1300:	8f e7       	ldi	r24, 0x7F	; 127
    1302:	80 83       	st	Z, r24
    1304:	82 e2       	ldi	r24, 0x22	; 34
    1306:	80 83       	st	Z, r24
    1308:	10 82       	st	Z, r1
    130a:	87 e0       	ldi	r24, 0x07	; 7
    130c:	80 83       	st	Z, r24
    130e:	80 e4       	ldi	r24, 0x40	; 64
    1310:	80 83       	st	Z, r24
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	94 e0       	ldi	r25, 0x04	; 4
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
    1316:	ef e0       	ldi	r30, 0x0F	; 15
    1318:	f2 e1       	ldi	r31, 0x12	; 18
    131a:	10 82       	st	Z, r1
    131c:	01 97       	sbiw	r24, 0x01	; 1
	oled_wr_cmd(0x22);
	oled_wr_cmd(0);
	oled_wr_cmd(7);
	oled_wr_cmd(0x40);
	int temp;
	for(temp = 0; temp < 8*128; temp++){
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	e1 f7       	brne	.-8      	; 0x131a <oled_clear+0x36>
void oled_wr_cmd(uint8_t cmd){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_CMD_START;
	*addr = cmd;*/
	volatile uint8_t *  addr = (uint8_t *)OLED_ADDR_CMD_START;
	*addr = cmd;
    1322:	ef e0       	ldi	r30, 0x0F	; 15
    1324:	f0 e1       	ldi	r31, 0x10	; 16
    1326:	81 e2       	ldi	r24, 0x21	; 33
    1328:	80 83       	st	Z, r24
    132a:	10 82       	st	Z, r1
    132c:	8f e7       	ldi	r24, 0x7F	; 127
    132e:	80 83       	st	Z, r24
    1330:	82 e2       	ldi	r24, 0x22	; 34
    1332:	80 83       	st	Z, r24
    1334:	10 82       	st	Z, r1
    1336:	86 e0       	ldi	r24, 0x06	; 6
    1338:	80 83       	st	Z, r24
    133a:	8c e7       	ldi	r24, 0x7C	; 124
    133c:	80 83       	st	Z, r24
    133e:	8f ea       	ldi	r24, 0xAF	; 175
    1340:	80 83       	st	Z, r24
	oled_wr_cmd(0x22);
	oled_wr_cmd(START_PAGE);
	oled_wr_cmd(END_PAGE);
	oled_wr_cmd(0x7c);
	oled_wr_cmd(0xaf); // on
	oled_goto_xy(0,0);
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	0e 94 0e 09 	call	0x121c	; 0x121c <oled_goto_xy>
    134a:	08 95       	ret

0000134c <oled_putchar_printf>:
		oled_wr_d(0);
	}
}

int oled_putchar_printf(char var, FILE *stream){
	if(var == '\r'||var =='\n'){
    134c:	8d 30       	cpi	r24, 0x0D	; 13
    134e:	11 f0       	breq	.+4      	; 0x1354 <oled_putchar_printf+0x8>
    1350:	8a 30       	cpi	r24, 0x0A	; 10
    1352:	19 f4       	brne	.+6      	; 0x135a <oled_putchar_printf+0xe>
		oled_goto_nextln();
    1354:	0e 94 1f 09 	call	0x123e	; 0x123e <oled_goto_nextln>
		return 0;
    1358:	02 c0       	rjmp	.+4      	; 0x135e <oled_putchar_printf+0x12>
	}

	oled_putchar(var);
    135a:	0e 94 30 09 	call	0x1260	; 0x1260 <oled_putchar>
	return 0;
}
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	08 95       	ret

00001364 <oled_putchar_inverse>:

void oled_putchar_inverse(char c){
    1364:	cf 93       	push	r28
	if(c == '\n'){
    1366:	8a 30       	cpi	r24, 0x0A	; 10
    1368:	19 f4       	brne	.+6      	; 0x1370 <oled_putchar_inverse+0xc>
		oled_goto_nextln();
    136a:	0e 94 1f 09 	call	0x123e	; 0x123e <oled_goto_nextln>
		return;
    136e:	2a c0       	rjmp	.+84     	; 0x13c4 <oled_putchar_inverse+0x60>
	}
	int i;
	const char j = (c-' ');
    1370:	c0 ee       	ldi	r28, 0xE0	; 224
    1372:	c8 0f       	add	r28, r24
	current_col_address+=CHA_WIDTH;
    1374:	80 91 c8 02 	lds	r24, 0x02C8
    1378:	8b 5f       	subi	r24, 0xFB	; 251
    137a:	80 93 c8 02 	sts	0x02C8, r24

	if(current_col_address/CHA_WIDTH >= MAX_CHARS_A_LINE){
    137e:	80 91 c8 02 	lds	r24, 0x02C8
    1382:	8d 37       	cpi	r24, 0x7D	; 125
    1384:	78 f0       	brcs	.+30     	; 0x13a4 <oled_putchar_inverse+0x40>
		//current_col_address = 0;
		oled_goto_nextln();
    1386:	0e 94 1f 09 	call	0x123e	; 0x123e <oled_goto_nextln>
    138a:	0c c0       	rjmp	.+24     	; 0x13a4 <oled_putchar_inverse+0x40>
    138c:	fc 01       	movw	r30, r24
    138e:	e2 0f       	add	r30, r18
    1390:	f3 1f       	adc	r31, r19
	}


	for(i = 0; i < 5; i++){
		// pay attention, progmem read
		oled_wr_d(~(pgm_read_byte(&font[(int)j][i])));
    1392:	e4 91       	lpm	r30, Z
    1394:	e0 95       	com	r30
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
    1396:	ec 93       	st	X, r30
		//current_col_address = 0;
		oled_goto_nextln();
	}


	for(i = 0; i < 5; i++){
    1398:	2f 5f       	subi	r18, 0xFF	; 255
    139a:	3f 4f       	sbci	r19, 0xFF	; 255
    139c:	25 30       	cpi	r18, 0x05	; 5
    139e:	31 05       	cpc	r19, r1
    13a0:	a9 f7       	brne	.-22     	; 0x138c <oled_putchar_inverse+0x28>
    13a2:	10 c0       	rjmp	.+32     	; 0x13c4 <oled_putchar_inverse+0x60>
    13a4:	8c 2f       	mov	r24, r28
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9c 01       	movw	r18, r24
    13aa:	22 0f       	add	r18, r18
    13ac:	33 1f       	adc	r19, r19
    13ae:	22 0f       	add	r18, r18
    13b0:	33 1f       	adc	r19, r19
    13b2:	82 0f       	add	r24, r18
    13b4:	93 1f       	adc	r25, r19

	oled_putchar(var);
	return 0;
}

void oled_putchar_inverse(char c){
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	8f 51       	subi	r24, 0x1F	; 31
    13bc:	9e 4f       	sbci	r25, 0xFE	; 254
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
    13be:	af e0       	ldi	r26, 0x0F	; 15
    13c0:	b2 e1       	ldi	r27, 0x12	; 18
    13c2:	e4 cf       	rjmp	.-56     	; 0x138c <oled_putchar_inverse+0x28>

	for(i = 0; i < 5; i++){
		// pay attention, progmem read
		oled_wr_d(~(pgm_read_byte(&font[(int)j][i])));
	}
}
    13c4:	cf 91       	pop	r28
    13c6:	08 95       	ret

000013c8 <oled_putstr_inverse>:

void oled_putstr( const char * str){
	while(*str)
		oled_putchar(*str++);
}
void oled_putstr_inverse( const char * str){
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	ec 01       	movw	r28, r24
	while(*str)
    13ce:	88 81       	ld	r24, Y
    13d0:	88 23       	and	r24, r24
    13d2:	31 f0       	breq	.+12     	; 0x13e0 <oled_putstr_inverse+0x18>
    13d4:	21 96       	adiw	r28, 0x01	; 1
		oled_putchar_inverse(*str++);
    13d6:	0e 94 b2 09 	call	0x1364	; 0x1364 <oled_putchar_inverse>
void oled_putstr( const char * str){
	while(*str)
		oled_putchar(*str++);
}
void oled_putstr_inverse( const char * str){
	while(*str)
    13da:	89 91       	ld	r24, Y+
    13dc:	81 11       	cpse	r24, r1
    13de:	fb cf       	rjmp	.-10     	; 0x13d6 <oled_putstr_inverse+0xe>
		oled_putchar_inverse(*str++);
}
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	08 95       	ret

000013e6 <oled_putstr_P_inverse>:
			str++;
			read = pgm_read_byte(str);
		}
		
}
void oled_putstr_P_inverse( const char * str){
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	ec 01       	movw	r28, r24
	char read = pgm_read_byte(str);
    13ec:	fc 01       	movw	r30, r24
    13ee:	84 91       	lpm	r24, Z
	// Display buffer on LCD.
	while(read){
    13f0:	88 23       	and	r24, r24
    13f2:	39 f0       	breq	.+14     	; 0x1402 <oled_putstr_P_inverse+0x1c>
		oled_putchar_inverse(read);
    13f4:	0e 94 b2 09 	call	0x1364	; 0x1364 <oled_putchar_inverse>
		str++;
    13f8:	21 96       	adiw	r28, 0x01	; 1
		read = pgm_read_byte(str);
    13fa:	fe 01       	movw	r30, r28
    13fc:	84 91       	lpm	r24, Z
		
}
void oled_putstr_P_inverse( const char * str){
	char read = pgm_read_byte(str);
	// Display buffer on LCD.
	while(read){
    13fe:	81 11       	cpse	r24, r1
    1400:	f9 cf       	rjmp	.-14     	; 0x13f4 <oled_putstr_P_inverse+0xe>
		oled_putchar_inverse(read);
		str++;
		read = pgm_read_byte(str);
	}
	
}
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	08 95       	ret

00001408 <usart_init>:
/********************************************************************************
                                usart Related
********************************************************************************/
void usart_init( uint16_t ubrr) {
	// Set baud rate
	UBRR1H = (uint8_t)(ubrr>>8);
    1408:	9c bf       	out	0x3c, r25	; 60
	UBRR1L = (uint8_t)ubrr;
    140a:	80 b9       	out	0x00, r24	; 0
	// Enable receiver and transmitter
	UCSR1B |= (1<<RXEN1)|(1<<TXEN1) | (1<<RXCIE1);			//RX enable, TX enable in Interrupt mode!!!
    140c:	81 b1       	in	r24, 0x01	; 1
    140e:	88 69       	ori	r24, 0x98	; 152
    1410:	81 b9       	out	0x01, r24	; 1
	// Set frame format: 8data, 1stop bit	
	UCSR1C |= (1<<URSEL1)|(3<<UCSZ10);						
    1412:	8c b7       	in	r24, 0x3c	; 60
    1414:	86 68       	ori	r24, 0x86	; 134
    1416:	8c bf       	out	0x3c, r24	; 60
    1418:	08 95       	ret

0000141a <usart_putchar>:
}

void usart_putchar(char data) {
	// Wait for empty transmit buffer
	while ( !(UCSR1A & (_BV(UDRE1))) );
    141a:	15 9b       	sbis	0x02, 5	; 2
    141c:	fe cf       	rjmp	.-4      	; 0x141a <usart_putchar>
	// Start transmission
	UDR1 = data;
    141e:	83 b9       	out	0x03, r24	; 3
    1420:	08 95       	ret

00001422 <usart_putchar_printf>:
        usart_putchar(*s);
        s++;
    }
}

int usart_putchar_printf(char var, FILE *stream) {
    1422:	cf 93       	push	r28
    1424:	c8 2f       	mov	r28, r24
    // translate \n to \r for br@y++ terminal
    if (var == '\n') usart_putchar('\r');
    1426:	8a 30       	cpi	r24, 0x0A	; 10
    1428:	19 f4       	brne	.+6      	; 0x1430 <usart_putchar_printf+0xe>
    142a:	8d e0       	ldi	r24, 0x0D	; 13
    142c:	0e 94 0d 0a 	call	0x141a	; 0x141a <usart_putchar>
    usart_putchar(var);
    1430:	8c 2f       	mov	r24, r28
    1432:	0e 94 0d 0a 	call	0x141a	; 0x141a <usart_putchar>
    return 0;
}
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	cf 91       	pop	r28
    143c:	08 95       	ret

0000143e <__divmodhi4>:
    143e:	97 fb       	bst	r25, 7
    1440:	07 2e       	mov	r0, r23
    1442:	16 f4       	brtc	.+4      	; 0x1448 <__divmodhi4+0xa>
    1444:	00 94       	com	r0
    1446:	07 d0       	rcall	.+14     	; 0x1456 <__divmodhi4_neg1>
    1448:	77 fd       	sbrc	r23, 7
    144a:	09 d0       	rcall	.+18     	; 0x145e <__divmodhi4_neg2>
    144c:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmodhi4>
    1450:	07 fc       	sbrc	r0, 7
    1452:	05 d0       	rcall	.+10     	; 0x145e <__divmodhi4_neg2>
    1454:	3e f4       	brtc	.+14     	; 0x1464 <__divmodhi4_exit>

00001456 <__divmodhi4_neg1>:
    1456:	90 95       	com	r25
    1458:	81 95       	neg	r24
    145a:	9f 4f       	sbci	r25, 0xFF	; 255
    145c:	08 95       	ret

0000145e <__divmodhi4_neg2>:
    145e:	70 95       	com	r23
    1460:	61 95       	neg	r22
    1462:	7f 4f       	sbci	r23, 0xFF	; 255

00001464 <__divmodhi4_exit>:
    1464:	08 95       	ret

00001466 <__umulhisi3>:
    1466:	a2 9f       	mul	r26, r18
    1468:	b0 01       	movw	r22, r0
    146a:	b3 9f       	mul	r27, r19
    146c:	c0 01       	movw	r24, r0
    146e:	a3 9f       	mul	r26, r19
    1470:	70 0d       	add	r23, r0
    1472:	81 1d       	adc	r24, r1
    1474:	11 24       	eor	r1, r1
    1476:	91 1d       	adc	r25, r1
    1478:	b2 9f       	mul	r27, r18
    147a:	70 0d       	add	r23, r0
    147c:	81 1d       	adc	r24, r1
    147e:	11 24       	eor	r1, r1
    1480:	91 1d       	adc	r25, r1
    1482:	08 95       	ret

00001484 <__udivmodhi4>:
    1484:	aa 1b       	sub	r26, r26
    1486:	bb 1b       	sub	r27, r27
    1488:	51 e1       	ldi	r21, 0x11	; 17
    148a:	07 c0       	rjmp	.+14     	; 0x149a <__udivmodhi4_ep>

0000148c <__udivmodhi4_loop>:
    148c:	aa 1f       	adc	r26, r26
    148e:	bb 1f       	adc	r27, r27
    1490:	a6 17       	cp	r26, r22
    1492:	b7 07       	cpc	r27, r23
    1494:	10 f0       	brcs	.+4      	; 0x149a <__udivmodhi4_ep>
    1496:	a6 1b       	sub	r26, r22
    1498:	b7 0b       	sbc	r27, r23

0000149a <__udivmodhi4_ep>:
    149a:	88 1f       	adc	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	5a 95       	dec	r21
    14a0:	a9 f7       	brne	.-22     	; 0x148c <__udivmodhi4_loop>
    14a2:	80 95       	com	r24
    14a4:	90 95       	com	r25
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	08 95       	ret

000014ac <strcmp>:
    14ac:	fb 01       	movw	r30, r22
    14ae:	dc 01       	movw	r26, r24
    14b0:	8d 91       	ld	r24, X+
    14b2:	01 90       	ld	r0, Z+
    14b4:	80 19       	sub	r24, r0
    14b6:	01 10       	cpse	r0, r1
    14b8:	d9 f3       	breq	.-10     	; 0x14b0 <strcmp+0x4>
    14ba:	99 0b       	sbc	r25, r25
    14bc:	08 95       	ret

000014be <strncmp>:
    14be:	fb 01       	movw	r30, r22
    14c0:	dc 01       	movw	r26, r24
    14c2:	41 50       	subi	r20, 0x01	; 1
    14c4:	50 40       	sbci	r21, 0x00	; 0
    14c6:	30 f0       	brcs	.+12     	; 0x14d4 <strncmp+0x16>
    14c8:	8d 91       	ld	r24, X+
    14ca:	01 90       	ld	r0, Z+
    14cc:	80 19       	sub	r24, r0
    14ce:	19 f4       	brne	.+6      	; 0x14d6 <strncmp+0x18>
    14d0:	00 20       	and	r0, r0
    14d2:	b9 f7       	brne	.-18     	; 0x14c2 <strncmp+0x4>
    14d4:	88 1b       	sub	r24, r24
    14d6:	99 0b       	sbc	r25, r25
    14d8:	08 95       	ret

000014da <fwrite>:
    14da:	a0 e0       	ldi	r26, 0x00	; 0
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e3 e7       	ldi	r30, 0x73	; 115
    14e0:	fa e0       	ldi	r31, 0x0A	; 10
    14e2:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__prologue_saves__+0xc>
    14e6:	6b 01       	movw	r12, r22
    14e8:	4a 01       	movw	r8, r20
    14ea:	79 01       	movw	r14, r18
    14ec:	d9 01       	movw	r26, r18
    14ee:	13 96       	adiw	r26, 0x03	; 3
    14f0:	2c 91       	ld	r18, X
    14f2:	21 ff       	sbrs	r18, 1
    14f4:	1d c0       	rjmp	.+58     	; 0x1530 <fwrite+0x56>
    14f6:	c0 e0       	ldi	r28, 0x00	; 0
    14f8:	d0 e0       	ldi	r29, 0x00	; 0
    14fa:	c8 15       	cp	r28, r8
    14fc:	d9 05       	cpc	r29, r9
    14fe:	d9 f0       	breq	.+54     	; 0x1536 <fwrite+0x5c>
    1500:	8c 01       	movw	r16, r24
    1502:	5c 01       	movw	r10, r24
    1504:	ac 0c       	add	r10, r12
    1506:	bd 1c       	adc	r11, r13
    1508:	c8 01       	movw	r24, r16
    150a:	0a 15       	cp	r16, r10
    150c:	1b 05       	cpc	r17, r11
    150e:	71 f0       	breq	.+28     	; 0x152c <fwrite+0x52>
    1510:	0f 5f       	subi	r16, 0xFF	; 255
    1512:	1f 4f       	sbci	r17, 0xFF	; 255
    1514:	d7 01       	movw	r26, r14
    1516:	18 96       	adiw	r26, 0x08	; 8
    1518:	ed 91       	ld	r30, X+
    151a:	fc 91       	ld	r31, X
    151c:	19 97       	sbiw	r26, 0x09	; 9
    151e:	b7 01       	movw	r22, r14
    1520:	dc 01       	movw	r26, r24
    1522:	8c 91       	ld	r24, X
    1524:	09 95       	icall
    1526:	89 2b       	or	r24, r25
    1528:	79 f3       	breq	.-34     	; 0x1508 <fwrite+0x2e>
    152a:	05 c0       	rjmp	.+10     	; 0x1536 <fwrite+0x5c>
    152c:	21 96       	adiw	r28, 0x01	; 1
    152e:	e5 cf       	rjmp	.-54     	; 0x14fa <fwrite+0x20>
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <fwrite+0x5e>
    1536:	ce 01       	movw	r24, r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	ec e0       	ldi	r30, 0x0C	; 12
    153e:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__epilogue_restores__+0xc>

00001542 <printf>:
    1542:	a0 e0       	ldi	r26, 0x00	; 0
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e7 ea       	ldi	r30, 0xA7	; 167
    1548:	fa e0       	ldi	r31, 0x0A	; 10
    154a:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__prologue_saves__+0x20>
    154e:	fe 01       	movw	r30, r28
    1550:	35 96       	adiw	r30, 0x05	; 5
    1552:	61 91       	ld	r22, Z+
    1554:	71 91       	ld	r23, Z+
    1556:	af 01       	movw	r20, r30
    1558:	80 91 df 02 	lds	r24, 0x02DF
    155c:	90 91 e0 02 	lds	r25, 0x02E0
    1560:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <vfprintf>
    1564:	e2 e0       	ldi	r30, 0x02	; 2
    1566:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__epilogue_restores__+0x20>

0000156a <puts>:
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	e0 91 df 02 	lds	r30, 0x02DF
    1576:	f0 91 e0 02 	lds	r31, 0x02E0
    157a:	23 81       	ldd	r18, Z+3	; 0x03
    157c:	21 ff       	sbrs	r18, 1
    157e:	1b c0       	rjmp	.+54     	; 0x15b6 <puts+0x4c>
    1580:	ec 01       	movw	r28, r24
    1582:	00 e0       	ldi	r16, 0x00	; 0
    1584:	10 e0       	ldi	r17, 0x00	; 0
    1586:	89 91       	ld	r24, Y+
    1588:	60 91 df 02 	lds	r22, 0x02DF
    158c:	70 91 e0 02 	lds	r23, 0x02E0
    1590:	db 01       	movw	r26, r22
    1592:	18 96       	adiw	r26, 0x08	; 8
    1594:	ed 91       	ld	r30, X+
    1596:	fc 91       	ld	r31, X
    1598:	19 97       	sbiw	r26, 0x09	; 9
    159a:	88 23       	and	r24, r24
    159c:	31 f0       	breq	.+12     	; 0x15aa <puts+0x40>
    159e:	09 95       	icall
    15a0:	89 2b       	or	r24, r25
    15a2:	89 f3       	breq	.-30     	; 0x1586 <puts+0x1c>
    15a4:	0f ef       	ldi	r16, 0xFF	; 255
    15a6:	1f ef       	ldi	r17, 0xFF	; 255
    15a8:	ee cf       	rjmp	.-36     	; 0x1586 <puts+0x1c>
    15aa:	8a e0       	ldi	r24, 0x0A	; 10
    15ac:	09 95       	icall
    15ae:	89 2b       	or	r24, r25
    15b0:	11 f4       	brne	.+4      	; 0x15b6 <puts+0x4c>
    15b2:	c8 01       	movw	r24, r16
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <puts+0x50>
    15b6:	8f ef       	ldi	r24, 0xFF	; 255
    15b8:	9f ef       	ldi	r25, 0xFF	; 255
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	1f 91       	pop	r17
    15c0:	0f 91       	pop	r16
    15c2:	08 95       	ret

000015c4 <sscanf>:
    15c4:	ae e0       	ldi	r26, 0x0E	; 14
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e8 ee       	ldi	r30, 0xE8	; 232
    15ca:	fa e0       	ldi	r31, 0x0A	; 10
    15cc:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__prologue_saves__+0x20>
    15d0:	85 e0       	ldi	r24, 0x05	; 5
    15d2:	8c 83       	std	Y+4, r24	; 0x04
    15d4:	8b 89       	ldd	r24, Y+19	; 0x13
    15d6:	9c 89       	ldd	r25, Y+20	; 0x14
    15d8:	9a 83       	std	Y+2, r25	; 0x02
    15da:	89 83       	std	Y+1, r24	; 0x01
    15dc:	ae 01       	movw	r20, r28
    15de:	49 5e       	subi	r20, 0xE9	; 233
    15e0:	5f 4f       	sbci	r21, 0xFF	; 255
    15e2:	6d 89       	ldd	r22, Y+21	; 0x15
    15e4:	7e 89       	ldd	r23, Y+22	; 0x16
    15e6:	ce 01       	movw	r24, r28
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <vfscanf>
    15ee:	2e 96       	adiw	r28, 0x0e	; 14
    15f0:	e2 e0       	ldi	r30, 0x02	; 2
    15f2:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__epilogue_restores__+0x20>

000015f6 <vfprintf>:
    15f6:	ac e0       	ldi	r26, 0x0C	; 12
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e1 e0       	ldi	r30, 0x01	; 1
    15fc:	fb e0       	ldi	r31, 0x0B	; 11
    15fe:	0c 94 95 10 	jmp	0x212a	; 0x212a <__prologue_saves__>
    1602:	7c 01       	movw	r14, r24
    1604:	6b 01       	movw	r12, r22
    1606:	8a 01       	movw	r16, r20
    1608:	fc 01       	movw	r30, r24
    160a:	17 82       	std	Z+7, r1	; 0x07
    160c:	16 82       	std	Z+6, r1	; 0x06
    160e:	83 81       	ldd	r24, Z+3	; 0x03
    1610:	81 ff       	sbrs	r24, 1
    1612:	bd c1       	rjmp	.+890    	; 0x198e <vfprintf+0x398>
    1614:	ce 01       	movw	r24, r28
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	4c 01       	movw	r8, r24
    161a:	f7 01       	movw	r30, r14
    161c:	93 81       	ldd	r25, Z+3	; 0x03
    161e:	f6 01       	movw	r30, r12
    1620:	93 fd       	sbrc	r25, 3
    1622:	85 91       	lpm	r24, Z+
    1624:	93 ff       	sbrs	r25, 3
    1626:	81 91       	ld	r24, Z+
    1628:	6f 01       	movw	r12, r30
    162a:	88 23       	and	r24, r24
    162c:	09 f4       	brne	.+2      	; 0x1630 <vfprintf+0x3a>
    162e:	ab c1       	rjmp	.+854    	; 0x1986 <vfprintf+0x390>
    1630:	85 32       	cpi	r24, 0x25	; 37
    1632:	39 f4       	brne	.+14     	; 0x1642 <vfprintf+0x4c>
    1634:	93 fd       	sbrc	r25, 3
    1636:	85 91       	lpm	r24, Z+
    1638:	93 ff       	sbrs	r25, 3
    163a:	81 91       	ld	r24, Z+
    163c:	6f 01       	movw	r12, r30
    163e:	85 32       	cpi	r24, 0x25	; 37
    1640:	29 f4       	brne	.+10     	; 0x164c <vfprintf+0x56>
    1642:	b7 01       	movw	r22, r14
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <fputc>
    164a:	e7 cf       	rjmp	.-50     	; 0x161a <vfprintf+0x24>
    164c:	51 2c       	mov	r5, r1
    164e:	31 2c       	mov	r3, r1
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	20 32       	cpi	r18, 0x20	; 32
    1654:	a0 f4       	brcc	.+40     	; 0x167e <vfprintf+0x88>
    1656:	8b 32       	cpi	r24, 0x2B	; 43
    1658:	69 f0       	breq	.+26     	; 0x1674 <vfprintf+0x7e>
    165a:	30 f4       	brcc	.+12     	; 0x1668 <vfprintf+0x72>
    165c:	80 32       	cpi	r24, 0x20	; 32
    165e:	59 f0       	breq	.+22     	; 0x1676 <vfprintf+0x80>
    1660:	83 32       	cpi	r24, 0x23	; 35
    1662:	69 f4       	brne	.+26     	; 0x167e <vfprintf+0x88>
    1664:	20 61       	ori	r18, 0x10	; 16
    1666:	2c c0       	rjmp	.+88     	; 0x16c0 <vfprintf+0xca>
    1668:	8d 32       	cpi	r24, 0x2D	; 45
    166a:	39 f0       	breq	.+14     	; 0x167a <vfprintf+0x84>
    166c:	80 33       	cpi	r24, 0x30	; 48
    166e:	39 f4       	brne	.+14     	; 0x167e <vfprintf+0x88>
    1670:	21 60       	ori	r18, 0x01	; 1
    1672:	26 c0       	rjmp	.+76     	; 0x16c0 <vfprintf+0xca>
    1674:	22 60       	ori	r18, 0x02	; 2
    1676:	24 60       	ori	r18, 0x04	; 4
    1678:	23 c0       	rjmp	.+70     	; 0x16c0 <vfprintf+0xca>
    167a:	28 60       	ori	r18, 0x08	; 8
    167c:	21 c0       	rjmp	.+66     	; 0x16c0 <vfprintf+0xca>
    167e:	27 fd       	sbrc	r18, 7
    1680:	27 c0       	rjmp	.+78     	; 0x16d0 <vfprintf+0xda>
    1682:	30 ed       	ldi	r19, 0xD0	; 208
    1684:	38 0f       	add	r19, r24
    1686:	3a 30       	cpi	r19, 0x0A	; 10
    1688:	78 f4       	brcc	.+30     	; 0x16a8 <vfprintf+0xb2>
    168a:	26 ff       	sbrs	r18, 6
    168c:	06 c0       	rjmp	.+12     	; 0x169a <vfprintf+0xa4>
    168e:	fa e0       	ldi	r31, 0x0A	; 10
    1690:	5f 9e       	mul	r5, r31
    1692:	30 0d       	add	r19, r0
    1694:	11 24       	eor	r1, r1
    1696:	53 2e       	mov	r5, r19
    1698:	13 c0       	rjmp	.+38     	; 0x16c0 <vfprintf+0xca>
    169a:	8a e0       	ldi	r24, 0x0A	; 10
    169c:	38 9e       	mul	r3, r24
    169e:	30 0d       	add	r19, r0
    16a0:	11 24       	eor	r1, r1
    16a2:	33 2e       	mov	r3, r19
    16a4:	20 62       	ori	r18, 0x20	; 32
    16a6:	0c c0       	rjmp	.+24     	; 0x16c0 <vfprintf+0xca>
    16a8:	8e 32       	cpi	r24, 0x2E	; 46
    16aa:	21 f4       	brne	.+8      	; 0x16b4 <vfprintf+0xbe>
    16ac:	26 fd       	sbrc	r18, 6
    16ae:	6b c1       	rjmp	.+726    	; 0x1986 <vfprintf+0x390>
    16b0:	20 64       	ori	r18, 0x40	; 64
    16b2:	06 c0       	rjmp	.+12     	; 0x16c0 <vfprintf+0xca>
    16b4:	8c 36       	cpi	r24, 0x6C	; 108
    16b6:	11 f4       	brne	.+4      	; 0x16bc <vfprintf+0xc6>
    16b8:	20 68       	ori	r18, 0x80	; 128
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <vfprintf+0xca>
    16bc:	88 36       	cpi	r24, 0x68	; 104
    16be:	41 f4       	brne	.+16     	; 0x16d0 <vfprintf+0xda>
    16c0:	f6 01       	movw	r30, r12
    16c2:	93 fd       	sbrc	r25, 3
    16c4:	85 91       	lpm	r24, Z+
    16c6:	93 ff       	sbrs	r25, 3
    16c8:	81 91       	ld	r24, Z+
    16ca:	6f 01       	movw	r12, r30
    16cc:	81 11       	cpse	r24, r1
    16ce:	c1 cf       	rjmp	.-126    	; 0x1652 <vfprintf+0x5c>
    16d0:	98 2f       	mov	r25, r24
    16d2:	9f 7d       	andi	r25, 0xDF	; 223
    16d4:	95 54       	subi	r25, 0x45	; 69
    16d6:	93 30       	cpi	r25, 0x03	; 3
    16d8:	28 f4       	brcc	.+10     	; 0x16e4 <vfprintf+0xee>
    16da:	0c 5f       	subi	r16, 0xFC	; 252
    16dc:	1f 4f       	sbci	r17, 0xFF	; 255
    16de:	ff e3       	ldi	r31, 0x3F	; 63
    16e0:	f9 83       	std	Y+1, r31	; 0x01
    16e2:	0d c0       	rjmp	.+26     	; 0x16fe <vfprintf+0x108>
    16e4:	83 36       	cpi	r24, 0x63	; 99
    16e6:	31 f0       	breq	.+12     	; 0x16f4 <vfprintf+0xfe>
    16e8:	83 37       	cpi	r24, 0x73	; 115
    16ea:	71 f0       	breq	.+28     	; 0x1708 <vfprintf+0x112>
    16ec:	83 35       	cpi	r24, 0x53	; 83
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <vfprintf+0xfc>
    16f0:	5b c0       	rjmp	.+182    	; 0x17a8 <vfprintf+0x1b2>
    16f2:	22 c0       	rjmp	.+68     	; 0x1738 <vfprintf+0x142>
    16f4:	f8 01       	movw	r30, r16
    16f6:	80 81       	ld	r24, Z
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	0e 5f       	subi	r16, 0xFE	; 254
    16fc:	1f 4f       	sbci	r17, 0xFF	; 255
    16fe:	44 24       	eor	r4, r4
    1700:	43 94       	inc	r4
    1702:	51 2c       	mov	r5, r1
    1704:	54 01       	movw	r10, r8
    1706:	15 c0       	rjmp	.+42     	; 0x1732 <vfprintf+0x13c>
    1708:	38 01       	movw	r6, r16
    170a:	f2 e0       	ldi	r31, 0x02	; 2
    170c:	6f 0e       	add	r6, r31
    170e:	71 1c       	adc	r7, r1
    1710:	f8 01       	movw	r30, r16
    1712:	a0 80       	ld	r10, Z
    1714:	b1 80       	ldd	r11, Z+1	; 0x01
    1716:	26 ff       	sbrs	r18, 6
    1718:	03 c0       	rjmp	.+6      	; 0x1720 <vfprintf+0x12a>
    171a:	65 2d       	mov	r22, r5
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <vfprintf+0x12e>
    1720:	6f ef       	ldi	r22, 0xFF	; 255
    1722:	7f ef       	ldi	r23, 0xFF	; 255
    1724:	c5 01       	movw	r24, r10
    1726:	2c 87       	std	Y+12, r18	; 0x0c
    1728:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <strnlen>
    172c:	2c 01       	movw	r4, r24
    172e:	83 01       	movw	r16, r6
    1730:	2c 85       	ldd	r18, Y+12	; 0x0c
    1732:	2f 77       	andi	r18, 0x7F	; 127
    1734:	22 2e       	mov	r2, r18
    1736:	17 c0       	rjmp	.+46     	; 0x1766 <vfprintf+0x170>
    1738:	38 01       	movw	r6, r16
    173a:	f2 e0       	ldi	r31, 0x02	; 2
    173c:	6f 0e       	add	r6, r31
    173e:	71 1c       	adc	r7, r1
    1740:	f8 01       	movw	r30, r16
    1742:	a0 80       	ld	r10, Z
    1744:	b1 80       	ldd	r11, Z+1	; 0x01
    1746:	26 ff       	sbrs	r18, 6
    1748:	03 c0       	rjmp	.+6      	; 0x1750 <vfprintf+0x15a>
    174a:	65 2d       	mov	r22, r5
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <vfprintf+0x15e>
    1750:	6f ef       	ldi	r22, 0xFF	; 255
    1752:	7f ef       	ldi	r23, 0xFF	; 255
    1754:	c5 01       	movw	r24, r10
    1756:	2c 87       	std	Y+12, r18	; 0x0c
    1758:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <strnlen_P>
    175c:	2c 01       	movw	r4, r24
    175e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1760:	20 68       	ori	r18, 0x80	; 128
    1762:	22 2e       	mov	r2, r18
    1764:	83 01       	movw	r16, r6
    1766:	23 fc       	sbrc	r2, 3
    1768:	1b c0       	rjmp	.+54     	; 0x17a0 <vfprintf+0x1aa>
    176a:	83 2d       	mov	r24, r3
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	48 16       	cp	r4, r24
    1770:	59 06       	cpc	r5, r25
    1772:	b0 f4       	brcc	.+44     	; 0x17a0 <vfprintf+0x1aa>
    1774:	b7 01       	movw	r22, r14
    1776:	80 e2       	ldi	r24, 0x20	; 32
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <fputc>
    177e:	3a 94       	dec	r3
    1780:	f4 cf       	rjmp	.-24     	; 0x176a <vfprintf+0x174>
    1782:	f5 01       	movw	r30, r10
    1784:	27 fc       	sbrc	r2, 7
    1786:	85 91       	lpm	r24, Z+
    1788:	27 fe       	sbrs	r2, 7
    178a:	81 91       	ld	r24, Z+
    178c:	5f 01       	movw	r10, r30
    178e:	b7 01       	movw	r22, r14
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <fputc>
    1796:	31 10       	cpse	r3, r1
    1798:	3a 94       	dec	r3
    179a:	f1 e0       	ldi	r31, 0x01	; 1
    179c:	4f 1a       	sub	r4, r31
    179e:	51 08       	sbc	r5, r1
    17a0:	41 14       	cp	r4, r1
    17a2:	51 04       	cpc	r5, r1
    17a4:	71 f7       	brne	.-36     	; 0x1782 <vfprintf+0x18c>
    17a6:	e5 c0       	rjmp	.+458    	; 0x1972 <vfprintf+0x37c>
    17a8:	84 36       	cpi	r24, 0x64	; 100
    17aa:	11 f0       	breq	.+4      	; 0x17b0 <vfprintf+0x1ba>
    17ac:	89 36       	cpi	r24, 0x69	; 105
    17ae:	39 f5       	brne	.+78     	; 0x17fe <vfprintf+0x208>
    17b0:	f8 01       	movw	r30, r16
    17b2:	27 ff       	sbrs	r18, 7
    17b4:	07 c0       	rjmp	.+14     	; 0x17c4 <vfprintf+0x1ce>
    17b6:	60 81       	ld	r22, Z
    17b8:	71 81       	ldd	r23, Z+1	; 0x01
    17ba:	82 81       	ldd	r24, Z+2	; 0x02
    17bc:	93 81       	ldd	r25, Z+3	; 0x03
    17be:	0c 5f       	subi	r16, 0xFC	; 252
    17c0:	1f 4f       	sbci	r17, 0xFF	; 255
    17c2:	08 c0       	rjmp	.+16     	; 0x17d4 <vfprintf+0x1de>
    17c4:	60 81       	ld	r22, Z
    17c6:	71 81       	ldd	r23, Z+1	; 0x01
    17c8:	88 27       	eor	r24, r24
    17ca:	77 fd       	sbrc	r23, 7
    17cc:	80 95       	com	r24
    17ce:	98 2f       	mov	r25, r24
    17d0:	0e 5f       	subi	r16, 0xFE	; 254
    17d2:	1f 4f       	sbci	r17, 0xFF	; 255
    17d4:	2f 76       	andi	r18, 0x6F	; 111
    17d6:	b2 2e       	mov	r11, r18
    17d8:	97 ff       	sbrs	r25, 7
    17da:	09 c0       	rjmp	.+18     	; 0x17ee <vfprintf+0x1f8>
    17dc:	90 95       	com	r25
    17de:	80 95       	com	r24
    17e0:	70 95       	com	r23
    17e2:	61 95       	neg	r22
    17e4:	7f 4f       	sbci	r23, 0xFF	; 255
    17e6:	8f 4f       	sbci	r24, 0xFF	; 255
    17e8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ea:	20 68       	ori	r18, 0x80	; 128
    17ec:	b2 2e       	mov	r11, r18
    17ee:	2a e0       	ldi	r18, 0x0A	; 10
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	a4 01       	movw	r20, r8
    17f4:	0e 94 34 10 	call	0x2068	; 0x2068 <__ultoa_invert>
    17f8:	a8 2e       	mov	r10, r24
    17fa:	a8 18       	sub	r10, r8
    17fc:	44 c0       	rjmp	.+136    	; 0x1886 <vfprintf+0x290>
    17fe:	85 37       	cpi	r24, 0x75	; 117
    1800:	29 f4       	brne	.+10     	; 0x180c <vfprintf+0x216>
    1802:	2f 7e       	andi	r18, 0xEF	; 239
    1804:	b2 2e       	mov	r11, r18
    1806:	2a e0       	ldi	r18, 0x0A	; 10
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	25 c0       	rjmp	.+74     	; 0x1856 <vfprintf+0x260>
    180c:	f2 2f       	mov	r31, r18
    180e:	f9 7f       	andi	r31, 0xF9	; 249
    1810:	bf 2e       	mov	r11, r31
    1812:	8f 36       	cpi	r24, 0x6F	; 111
    1814:	c1 f0       	breq	.+48     	; 0x1846 <vfprintf+0x250>
    1816:	18 f4       	brcc	.+6      	; 0x181e <vfprintf+0x228>
    1818:	88 35       	cpi	r24, 0x58	; 88
    181a:	79 f0       	breq	.+30     	; 0x183a <vfprintf+0x244>
    181c:	b4 c0       	rjmp	.+360    	; 0x1986 <vfprintf+0x390>
    181e:	80 37       	cpi	r24, 0x70	; 112
    1820:	19 f0       	breq	.+6      	; 0x1828 <vfprintf+0x232>
    1822:	88 37       	cpi	r24, 0x78	; 120
    1824:	21 f0       	breq	.+8      	; 0x182e <vfprintf+0x238>
    1826:	af c0       	rjmp	.+350    	; 0x1986 <vfprintf+0x390>
    1828:	2f 2f       	mov	r18, r31
    182a:	20 61       	ori	r18, 0x10	; 16
    182c:	b2 2e       	mov	r11, r18
    182e:	b4 fe       	sbrs	r11, 4
    1830:	0d c0       	rjmp	.+26     	; 0x184c <vfprintf+0x256>
    1832:	8b 2d       	mov	r24, r11
    1834:	84 60       	ori	r24, 0x04	; 4
    1836:	b8 2e       	mov	r11, r24
    1838:	09 c0       	rjmp	.+18     	; 0x184c <vfprintf+0x256>
    183a:	24 ff       	sbrs	r18, 4
    183c:	0a c0       	rjmp	.+20     	; 0x1852 <vfprintf+0x25c>
    183e:	9f 2f       	mov	r25, r31
    1840:	96 60       	ori	r25, 0x06	; 6
    1842:	b9 2e       	mov	r11, r25
    1844:	06 c0       	rjmp	.+12     	; 0x1852 <vfprintf+0x25c>
    1846:	28 e0       	ldi	r18, 0x08	; 8
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	05 c0       	rjmp	.+10     	; 0x1856 <vfprintf+0x260>
    184c:	20 e1       	ldi	r18, 0x10	; 16
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <vfprintf+0x260>
    1852:	20 e1       	ldi	r18, 0x10	; 16
    1854:	32 e0       	ldi	r19, 0x02	; 2
    1856:	f8 01       	movw	r30, r16
    1858:	b7 fe       	sbrs	r11, 7
    185a:	07 c0       	rjmp	.+14     	; 0x186a <vfprintf+0x274>
    185c:	60 81       	ld	r22, Z
    185e:	71 81       	ldd	r23, Z+1	; 0x01
    1860:	82 81       	ldd	r24, Z+2	; 0x02
    1862:	93 81       	ldd	r25, Z+3	; 0x03
    1864:	0c 5f       	subi	r16, 0xFC	; 252
    1866:	1f 4f       	sbci	r17, 0xFF	; 255
    1868:	06 c0       	rjmp	.+12     	; 0x1876 <vfprintf+0x280>
    186a:	60 81       	ld	r22, Z
    186c:	71 81       	ldd	r23, Z+1	; 0x01
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	0e 5f       	subi	r16, 0xFE	; 254
    1874:	1f 4f       	sbci	r17, 0xFF	; 255
    1876:	a4 01       	movw	r20, r8
    1878:	0e 94 34 10 	call	0x2068	; 0x2068 <__ultoa_invert>
    187c:	a8 2e       	mov	r10, r24
    187e:	a8 18       	sub	r10, r8
    1880:	fb 2d       	mov	r31, r11
    1882:	ff 77       	andi	r31, 0x7F	; 127
    1884:	bf 2e       	mov	r11, r31
    1886:	b6 fe       	sbrs	r11, 6
    1888:	0b c0       	rjmp	.+22     	; 0x18a0 <vfprintf+0x2aa>
    188a:	2b 2d       	mov	r18, r11
    188c:	2e 7f       	andi	r18, 0xFE	; 254
    188e:	a5 14       	cp	r10, r5
    1890:	50 f4       	brcc	.+20     	; 0x18a6 <vfprintf+0x2b0>
    1892:	b4 fe       	sbrs	r11, 4
    1894:	0a c0       	rjmp	.+20     	; 0x18aa <vfprintf+0x2b4>
    1896:	b2 fc       	sbrc	r11, 2
    1898:	08 c0       	rjmp	.+16     	; 0x18aa <vfprintf+0x2b4>
    189a:	2b 2d       	mov	r18, r11
    189c:	2e 7e       	andi	r18, 0xEE	; 238
    189e:	05 c0       	rjmp	.+10     	; 0x18aa <vfprintf+0x2b4>
    18a0:	7a 2c       	mov	r7, r10
    18a2:	2b 2d       	mov	r18, r11
    18a4:	03 c0       	rjmp	.+6      	; 0x18ac <vfprintf+0x2b6>
    18a6:	7a 2c       	mov	r7, r10
    18a8:	01 c0       	rjmp	.+2      	; 0x18ac <vfprintf+0x2b6>
    18aa:	75 2c       	mov	r7, r5
    18ac:	24 ff       	sbrs	r18, 4
    18ae:	0d c0       	rjmp	.+26     	; 0x18ca <vfprintf+0x2d4>
    18b0:	fe 01       	movw	r30, r28
    18b2:	ea 0d       	add	r30, r10
    18b4:	f1 1d       	adc	r31, r1
    18b6:	80 81       	ld	r24, Z
    18b8:	80 33       	cpi	r24, 0x30	; 48
    18ba:	11 f4       	brne	.+4      	; 0x18c0 <vfprintf+0x2ca>
    18bc:	29 7e       	andi	r18, 0xE9	; 233
    18be:	09 c0       	rjmp	.+18     	; 0x18d2 <vfprintf+0x2dc>
    18c0:	22 ff       	sbrs	r18, 2
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <vfprintf+0x2da>
    18c4:	73 94       	inc	r7
    18c6:	73 94       	inc	r7
    18c8:	04 c0       	rjmp	.+8      	; 0x18d2 <vfprintf+0x2dc>
    18ca:	82 2f       	mov	r24, r18
    18cc:	86 78       	andi	r24, 0x86	; 134
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <vfprintf+0x2dc>
    18d0:	73 94       	inc	r7
    18d2:	23 fd       	sbrc	r18, 3
    18d4:	13 c0       	rjmp	.+38     	; 0x18fc <vfprintf+0x306>
    18d6:	20 ff       	sbrs	r18, 0
    18d8:	06 c0       	rjmp	.+12     	; 0x18e6 <vfprintf+0x2f0>
    18da:	5a 2c       	mov	r5, r10
    18dc:	73 14       	cp	r7, r3
    18de:	18 f4       	brcc	.+6      	; 0x18e6 <vfprintf+0x2f0>
    18e0:	53 0c       	add	r5, r3
    18e2:	57 18       	sub	r5, r7
    18e4:	73 2c       	mov	r7, r3
    18e6:	73 14       	cp	r7, r3
    18e8:	68 f4       	brcc	.+26     	; 0x1904 <vfprintf+0x30e>
    18ea:	b7 01       	movw	r22, r14
    18ec:	80 e2       	ldi	r24, 0x20	; 32
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	2c 87       	std	Y+12, r18	; 0x0c
    18f2:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <fputc>
    18f6:	73 94       	inc	r7
    18f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    18fa:	f5 cf       	rjmp	.-22     	; 0x18e6 <vfprintf+0x2f0>
    18fc:	73 14       	cp	r7, r3
    18fe:	10 f4       	brcc	.+4      	; 0x1904 <vfprintf+0x30e>
    1900:	37 18       	sub	r3, r7
    1902:	01 c0       	rjmp	.+2      	; 0x1906 <vfprintf+0x310>
    1904:	31 2c       	mov	r3, r1
    1906:	24 ff       	sbrs	r18, 4
    1908:	12 c0       	rjmp	.+36     	; 0x192e <vfprintf+0x338>
    190a:	b7 01       	movw	r22, r14
    190c:	80 e3       	ldi	r24, 0x30	; 48
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	2c 87       	std	Y+12, r18	; 0x0c
    1912:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <fputc>
    1916:	2c 85       	ldd	r18, Y+12	; 0x0c
    1918:	22 ff       	sbrs	r18, 2
    191a:	17 c0       	rjmp	.+46     	; 0x194a <vfprintf+0x354>
    191c:	21 ff       	sbrs	r18, 1
    191e:	03 c0       	rjmp	.+6      	; 0x1926 <vfprintf+0x330>
    1920:	88 e5       	ldi	r24, 0x58	; 88
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 c0       	rjmp	.+4      	; 0x192a <vfprintf+0x334>
    1926:	88 e7       	ldi	r24, 0x78	; 120
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	b7 01       	movw	r22, r14
    192c:	0c c0       	rjmp	.+24     	; 0x1946 <vfprintf+0x350>
    192e:	82 2f       	mov	r24, r18
    1930:	86 78       	andi	r24, 0x86	; 134
    1932:	59 f0       	breq	.+22     	; 0x194a <vfprintf+0x354>
    1934:	21 fd       	sbrc	r18, 1
    1936:	02 c0       	rjmp	.+4      	; 0x193c <vfprintf+0x346>
    1938:	80 e2       	ldi	r24, 0x20	; 32
    193a:	01 c0       	rjmp	.+2      	; 0x193e <vfprintf+0x348>
    193c:	8b e2       	ldi	r24, 0x2B	; 43
    193e:	27 fd       	sbrc	r18, 7
    1940:	8d e2       	ldi	r24, 0x2D	; 45
    1942:	b7 01       	movw	r22, r14
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <fputc>
    194a:	a5 14       	cp	r10, r5
    194c:	38 f4       	brcc	.+14     	; 0x195c <vfprintf+0x366>
    194e:	b7 01       	movw	r22, r14
    1950:	80 e3       	ldi	r24, 0x30	; 48
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <fputc>
    1958:	5a 94       	dec	r5
    195a:	f7 cf       	rjmp	.-18     	; 0x194a <vfprintf+0x354>
    195c:	aa 94       	dec	r10
    195e:	f4 01       	movw	r30, r8
    1960:	ea 0d       	add	r30, r10
    1962:	f1 1d       	adc	r31, r1
    1964:	80 81       	ld	r24, Z
    1966:	b7 01       	movw	r22, r14
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <fputc>
    196e:	a1 10       	cpse	r10, r1
    1970:	f5 cf       	rjmp	.-22     	; 0x195c <vfprintf+0x366>
    1972:	33 20       	and	r3, r3
    1974:	09 f4       	brne	.+2      	; 0x1978 <vfprintf+0x382>
    1976:	51 ce       	rjmp	.-862    	; 0x161a <vfprintf+0x24>
    1978:	b7 01       	movw	r22, r14
    197a:	80 e2       	ldi	r24, 0x20	; 32
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <fputc>
    1982:	3a 94       	dec	r3
    1984:	f6 cf       	rjmp	.-20     	; 0x1972 <vfprintf+0x37c>
    1986:	f7 01       	movw	r30, r14
    1988:	86 81       	ldd	r24, Z+6	; 0x06
    198a:	97 81       	ldd	r25, Z+7	; 0x07
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <vfprintf+0x39c>
    198e:	8f ef       	ldi	r24, 0xFF	; 255
    1990:	9f ef       	ldi	r25, 0xFF	; 255
    1992:	2c 96       	adiw	r28, 0x0c	; 12
    1994:	e2 e1       	ldi	r30, 0x12	; 18
    1996:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <__epilogue_restores__>

0000199a <putval>:
    199a:	20 fd       	sbrc	r18, 0
    199c:	09 c0       	rjmp	.+18     	; 0x19b0 <putval+0x16>
    199e:	fc 01       	movw	r30, r24
    19a0:	23 fd       	sbrc	r18, 3
    19a2:	05 c0       	rjmp	.+10     	; 0x19ae <putval+0x14>
    19a4:	22 ff       	sbrs	r18, 2
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <putval+0x12>
    19a8:	73 83       	std	Z+3, r23	; 0x03
    19aa:	62 83       	std	Z+2, r22	; 0x02
    19ac:	51 83       	std	Z+1, r21	; 0x01
    19ae:	40 83       	st	Z, r20
    19b0:	08 95       	ret

000019b2 <mulacc>:
    19b2:	44 fd       	sbrc	r20, 4
    19b4:	10 c0       	rjmp	.+32     	; 0x19d6 <mulacc+0x24>
    19b6:	46 fd       	sbrc	r20, 6
    19b8:	10 c0       	rjmp	.+32     	; 0x19da <mulacc+0x28>
    19ba:	db 01       	movw	r26, r22
    19bc:	fc 01       	movw	r30, r24
    19be:	aa 0f       	add	r26, r26
    19c0:	bb 1f       	adc	r27, r27
    19c2:	ee 1f       	adc	r30, r30
    19c4:	ff 1f       	adc	r31, r31
    19c6:	10 94       	com	r1
    19c8:	d1 f7       	brne	.-12     	; 0x19be <mulacc+0xc>
    19ca:	6a 0f       	add	r22, r26
    19cc:	7b 1f       	adc	r23, r27
    19ce:	8e 1f       	adc	r24, r30
    19d0:	9f 1f       	adc	r25, r31
    19d2:	31 e0       	ldi	r19, 0x01	; 1
    19d4:	03 c0       	rjmp	.+6      	; 0x19dc <mulacc+0x2a>
    19d6:	33 e0       	ldi	r19, 0x03	; 3
    19d8:	01 c0       	rjmp	.+2      	; 0x19dc <mulacc+0x2a>
    19da:	34 e0       	ldi	r19, 0x04	; 4
    19dc:	66 0f       	add	r22, r22
    19de:	77 1f       	adc	r23, r23
    19e0:	88 1f       	adc	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	31 50       	subi	r19, 0x01	; 1
    19e6:	d1 f7       	brne	.-12     	; 0x19dc <mulacc+0x2a>
    19e8:	62 0f       	add	r22, r18
    19ea:	71 1d       	adc	r23, r1
    19ec:	81 1d       	adc	r24, r1
    19ee:	91 1d       	adc	r25, r1
    19f0:	08 95       	ret

000019f2 <skip_spaces>:
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	8c 01       	movw	r16, r24
    19fc:	c8 01       	movw	r24, r16
    19fe:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fgetc>
    1a02:	ec 01       	movw	r28, r24
    1a04:	97 fd       	sbrc	r25, 7
    1a06:	08 c0       	rjmp	.+16     	; 0x1a18 <skip_spaces+0x26>
    1a08:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <isspace>
    1a0c:	89 2b       	or	r24, r25
    1a0e:	b1 f7       	brne	.-20     	; 0x19fc <skip_spaces+0xa>
    1a10:	b8 01       	movw	r22, r16
    1a12:	ce 01       	movw	r24, r28
    1a14:	0e 94 1b 10 	call	0x2036	; 0x2036 <ungetc>
    1a18:	ce 01       	movw	r24, r28
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	1f 91       	pop	r17
    1a20:	0f 91       	pop	r16
    1a22:	08 95       	ret

00001a24 <conv_int>:
    1a24:	8f 92       	push	r8
    1a26:	9f 92       	push	r9
    1a28:	af 92       	push	r10
    1a2a:	cf 92       	push	r12
    1a2c:	df 92       	push	r13
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	ec 01       	movw	r28, r24
    1a3c:	a6 2e       	mov	r10, r22
    1a3e:	4a 01       	movw	r8, r20
    1a40:	02 2f       	mov	r16, r18
    1a42:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fgetc>
    1a46:	ac 01       	movw	r20, r24
    1a48:	55 27       	eor	r21, r21
    1a4a:	4b 32       	cpi	r20, 0x2B	; 43
    1a4c:	51 05       	cpc	r21, r1
    1a4e:	21 f0       	breq	.+8      	; 0x1a58 <conv_int+0x34>
    1a50:	4d 32       	cpi	r20, 0x2D	; 45
    1a52:	51 05       	cpc	r21, r1
    1a54:	51 f4       	brne	.+20     	; 0x1a6a <conv_int+0x46>
    1a56:	00 68       	ori	r16, 0x80	; 128
    1a58:	aa 94       	dec	r10
    1a5a:	11 f4       	brne	.+4      	; 0x1a60 <conv_int+0x3c>
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	67 c0       	rjmp	.+206    	; 0x1b2e <conv_int+0x10a>
    1a60:	ce 01       	movw	r24, r28
    1a62:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fgetc>
    1a66:	97 fd       	sbrc	r25, 7
    1a68:	f9 cf       	rjmp	.-14     	; 0x1a5c <conv_int+0x38>
    1a6a:	10 2f       	mov	r17, r16
    1a6c:	1d 7f       	andi	r17, 0xFD	; 253
    1a6e:	30 2f       	mov	r19, r16
    1a70:	30 73       	andi	r19, 0x30	; 48
    1a72:	01 f5       	brne	.+64     	; 0x1ab4 <conv_int+0x90>
    1a74:	80 33       	cpi	r24, 0x30	; 48
    1a76:	f1 f4       	brne	.+60     	; 0x1ab4 <conv_int+0x90>
    1a78:	ff 24       	eor	r15, r15
    1a7a:	fa 94       	dec	r15
    1a7c:	fa 0c       	add	r15, r10
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <conv_int+0x5e>
    1a80:	42 c0       	rjmp	.+132    	; 0x1b06 <conv_int+0xe2>
    1a82:	ce 01       	movw	r24, r28
    1a84:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fgetc>
    1a88:	97 fd       	sbrc	r25, 7
    1a8a:	3d c0       	rjmp	.+122    	; 0x1b06 <conv_int+0xe2>
    1a8c:	38 2f       	mov	r19, r24
    1a8e:	3f 7d       	andi	r19, 0xDF	; 223
    1a90:	38 35       	cpi	r19, 0x58	; 88
    1a92:	51 f4       	brne	.+20     	; 0x1aa8 <conv_int+0x84>
    1a94:	12 64       	ori	r17, 0x42	; 66
    1a96:	aa 94       	dec	r10
    1a98:	aa 94       	dec	r10
    1a9a:	a9 f1       	breq	.+106    	; 0x1b06 <conv_int+0xe2>
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fgetc>
    1aa2:	97 ff       	sbrs	r25, 7
    1aa4:	07 c0       	rjmp	.+14     	; 0x1ab4 <conv_int+0x90>
    1aa6:	2f c0       	rjmp	.+94     	; 0x1b06 <conv_int+0xe2>
    1aa8:	06 ff       	sbrs	r16, 6
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <conv_int+0x8c>
    1aac:	12 60       	ori	r17, 0x02	; 2
    1aae:	01 c0       	rjmp	.+2      	; 0x1ab2 <conv_int+0x8e>
    1ab0:	12 61       	ori	r17, 0x12	; 18
    1ab2:	af 2c       	mov	r10, r15
    1ab4:	c1 2c       	mov	r12, r1
    1ab6:	d1 2c       	mov	r13, r1
    1ab8:	76 01       	movw	r14, r12
    1aba:	20 ed       	ldi	r18, 0xD0	; 208
    1abc:	28 0f       	add	r18, r24
    1abe:	28 30       	cpi	r18, 0x08	; 8
    1ac0:	80 f0       	brcs	.+32     	; 0x1ae2 <conv_int+0xbe>
    1ac2:	14 ff       	sbrs	r17, 4
    1ac4:	04 c0       	rjmp	.+8      	; 0x1ace <conv_int+0xaa>
    1ac6:	be 01       	movw	r22, r28
    1ac8:	0e 94 1b 10 	call	0x2036	; 0x2036 <ungetc>
    1acc:	19 c0       	rjmp	.+50     	; 0x1b00 <conv_int+0xdc>
    1ace:	2a 30       	cpi	r18, 0x0A	; 10
    1ad0:	40 f0       	brcs	.+16     	; 0x1ae2 <conv_int+0xbe>
    1ad2:	16 ff       	sbrs	r17, 6
    1ad4:	f8 cf       	rjmp	.-16     	; 0x1ac6 <conv_int+0xa2>
    1ad6:	2f 7d       	andi	r18, 0xDF	; 223
    1ad8:	3f ee       	ldi	r19, 0xEF	; 239
    1ada:	32 0f       	add	r19, r18
    1adc:	36 30       	cpi	r19, 0x06	; 6
    1ade:	98 f7       	brcc	.-26     	; 0x1ac6 <conv_int+0xa2>
    1ae0:	27 50       	subi	r18, 0x07	; 7
    1ae2:	41 2f       	mov	r20, r17
    1ae4:	c7 01       	movw	r24, r14
    1ae6:	b6 01       	movw	r22, r12
    1ae8:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <mulacc>
    1aec:	6b 01       	movw	r12, r22
    1aee:	7c 01       	movw	r14, r24
    1af0:	12 60       	ori	r17, 0x02	; 2
    1af2:	aa 94       	dec	r10
    1af4:	59 f0       	breq	.+22     	; 0x1b0c <conv_int+0xe8>
    1af6:	ce 01       	movw	r24, r28
    1af8:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fgetc>
    1afc:	97 ff       	sbrs	r25, 7
    1afe:	dd cf       	rjmp	.-70     	; 0x1aba <conv_int+0x96>
    1b00:	11 fd       	sbrc	r17, 1
    1b02:	04 c0       	rjmp	.+8      	; 0x1b0c <conv_int+0xe8>
    1b04:	ab cf       	rjmp	.-170    	; 0x1a5c <conv_int+0x38>
    1b06:	c1 2c       	mov	r12, r1
    1b08:	d1 2c       	mov	r13, r1
    1b0a:	76 01       	movw	r14, r12
    1b0c:	17 ff       	sbrs	r17, 7
    1b0e:	08 c0       	rjmp	.+16     	; 0x1b20 <conv_int+0xfc>
    1b10:	f0 94       	com	r15
    1b12:	e0 94       	com	r14
    1b14:	d0 94       	com	r13
    1b16:	c0 94       	com	r12
    1b18:	c1 1c       	adc	r12, r1
    1b1a:	d1 1c       	adc	r13, r1
    1b1c:	e1 1c       	adc	r14, r1
    1b1e:	f1 1c       	adc	r15, r1
    1b20:	21 2f       	mov	r18, r17
    1b22:	b7 01       	movw	r22, r14
    1b24:	a6 01       	movw	r20, r12
    1b26:	c4 01       	movw	r24, r8
    1b28:	0e 94 cd 0c 	call	0x199a	; 0x199a <putval>
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	1f 91       	pop	r17
    1b34:	0f 91       	pop	r16
    1b36:	ff 90       	pop	r15
    1b38:	ef 90       	pop	r14
    1b3a:	df 90       	pop	r13
    1b3c:	cf 90       	pop	r12
    1b3e:	af 90       	pop	r10
    1b40:	9f 90       	pop	r9
    1b42:	8f 90       	pop	r8
    1b44:	08 95       	ret

00001b46 <conv_brk>:
    1b46:	a1 e2       	ldi	r26, 0x21	; 33
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e9 ea       	ldi	r30, 0xA9	; 169
    1b4c:	fd e0       	ldi	r31, 0x0D	; 13
    1b4e:	0c 94 9a 10 	jmp	0x2134	; 0x2134 <__prologue_saves__+0xa>
    1b52:	5c 01       	movw	r10, r24
    1b54:	7a 01       	movw	r14, r20
    1b56:	8e 01       	movw	r16, r28
    1b58:	0f 5f       	subi	r16, 0xFF	; 255
    1b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5c:	68 01       	movw	r12, r16
    1b5e:	80 e2       	ldi	r24, 0x20	; 32
    1b60:	d8 01       	movw	r26, r16
    1b62:	1d 92       	st	X+, r1
    1b64:	8a 95       	dec	r24
    1b66:	e9 f7       	brne	.-6      	; 0x1b62 <conv_brk+0x1c>
    1b68:	f5 01       	movw	r30, r10
    1b6a:	73 80       	ldd	r7, Z+3	; 0x03
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	50 e0       	ldi	r21, 0x00	; 0
    1b70:	81 2c       	mov	r8, r1
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	91 2c       	mov	r9, r1
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	f9 01       	movw	r30, r18
    1b7c:	73 fc       	sbrc	r7, 3
    1b7e:	a5 91       	lpm	r26, Z+
    1b80:	73 fe       	sbrs	r7, 3
    1b82:	a1 91       	ld	r26, Z+
    1b84:	8f 01       	movw	r16, r30
    1b86:	7a 2f       	mov	r23, r26
    1b88:	9f 01       	movw	r18, r30
    1b8a:	a1 11       	cpse	r26, r1
    1b8c:	03 c0       	rjmp	.+6      	; 0x1b94 <conv_brk+0x4e>
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	7d c0       	rjmp	.+250    	; 0x1c8e <conv_brk+0x148>
    1b94:	ae 35       	cpi	r26, 0x5E	; 94
    1b96:	19 f4       	brne	.+6      	; 0x1b9e <conv_brk+0x58>
    1b98:	41 15       	cp	r20, r1
    1b9a:	51 05       	cpc	r21, r1
    1b9c:	59 f1       	breq	.+86     	; 0x1bf4 <conv_brk+0xae>
    1b9e:	e9 2d       	mov	r30, r9
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	e4 17       	cp	r30, r20
    1ba4:	f5 07       	cpc	r31, r21
    1ba6:	3c f4       	brge	.+14     	; 0x1bb6 <conv_brk+0x70>
    1ba8:	ad 35       	cpi	r26, 0x5D	; 93
    1baa:	69 f1       	breq	.+90     	; 0x1c06 <conv_brk+0xc0>
    1bac:	ad 32       	cpi	r26, 0x2D	; 45
    1bae:	19 f4       	brne	.+6      	; 0x1bb6 <conv_brk+0x70>
    1bb0:	bb 23       	and	r27, r27
    1bb2:	19 f1       	breq	.+70     	; 0x1bfa <conv_brk+0xb4>
    1bb4:	03 c0       	rjmp	.+6      	; 0x1bbc <conv_brk+0x76>
    1bb6:	b1 11       	cpse	r27, r1
    1bb8:	01 c0       	rjmp	.+2      	; 0x1bbc <conv_brk+0x76>
    1bba:	8a 2e       	mov	r8, r26
    1bbc:	e7 2f       	mov	r30, r23
    1bbe:	e6 95       	lsr	r30
    1bc0:	e6 95       	lsr	r30
    1bc2:	e6 95       	lsr	r30
    1bc4:	86 01       	movw	r16, r12
    1bc6:	0e 0f       	add	r16, r30
    1bc8:	11 1d       	adc	r17, r1
    1bca:	f8 01       	movw	r30, r16
    1bcc:	a7 2f       	mov	r26, r23
    1bce:	a7 70       	andi	r26, 0x07	; 7
    1bd0:	8c 01       	movw	r16, r24
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <conv_brk+0x92>
    1bd4:	00 0f       	add	r16, r16
    1bd6:	11 1f       	adc	r17, r17
    1bd8:	aa 95       	dec	r26
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <conv_brk+0x8e>
    1bdc:	d8 01       	movw	r26, r16
    1bde:	b0 81       	ld	r27, Z
    1be0:	ba 2b       	or	r27, r26
    1be2:	b0 83       	st	Z, r27
    1be4:	78 15       	cp	r23, r8
    1be6:	59 f0       	breq	.+22     	; 0x1bfe <conv_brk+0xb8>
    1be8:	78 15       	cp	r23, r8
    1bea:	10 f4       	brcc	.+4      	; 0x1bf0 <conv_brk+0xaa>
    1bec:	7f 5f       	subi	r23, 0xFF	; 255
    1bee:	e6 cf       	rjmp	.-52     	; 0x1bbc <conv_brk+0x76>
    1bf0:	71 50       	subi	r23, 0x01	; 1
    1bf2:	e4 cf       	rjmp	.-56     	; 0x1bbc <conv_brk+0x76>
    1bf4:	99 24       	eor	r9, r9
    1bf6:	93 94       	inc	r9
    1bf8:	03 c0       	rjmp	.+6      	; 0x1c00 <conv_brk+0xba>
    1bfa:	b1 e0       	ldi	r27, 0x01	; 1
    1bfc:	01 c0       	rjmp	.+2      	; 0x1c00 <conv_brk+0xba>
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	4f 5f       	subi	r20, 0xFF	; 255
    1c02:	5f 4f       	sbci	r21, 0xFF	; 255
    1c04:	ba cf       	rjmp	.-140    	; 0x1b7a <conv_brk+0x34>
    1c06:	bb 23       	and	r27, r27
    1c08:	19 f0       	breq	.+6      	; 0x1c10 <conv_brk+0xca>
    1c0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c0c:	80 62       	ori	r24, 0x20	; 32
    1c0e:	8e 83       	std	Y+6, r24	; 0x06
    1c10:	91 10       	cpse	r9, r1
    1c12:	03 c0       	rjmp	.+6      	; 0x1c1a <conv_brk+0xd4>
    1c14:	99 24       	eor	r9, r9
    1c16:	93 94       	inc	r9
    1c18:	15 c0       	rjmp	.+42     	; 0x1c44 <conv_brk+0xfe>
    1c1a:	f6 01       	movw	r30, r12
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	81 96       	adiw	r24, 0x21	; 33
    1c20:	20 81       	ld	r18, Z
    1c22:	20 95       	com	r18
    1c24:	21 93       	st	Z+, r18
    1c26:	e8 17       	cp	r30, r24
    1c28:	f9 07       	cpc	r31, r25
    1c2a:	d1 f7       	brne	.-12     	; 0x1c20 <conv_brk+0xda>
    1c2c:	f3 cf       	rjmp	.-26     	; 0x1c14 <conv_brk+0xce>
    1c2e:	e1 14       	cp	r14, r1
    1c30:	f1 04       	cpc	r15, r1
    1c32:	29 f0       	breq	.+10     	; 0x1c3e <conv_brk+0xf8>
    1c34:	d7 01       	movw	r26, r14
    1c36:	8c 93       	st	X, r24
    1c38:	f7 01       	movw	r30, r14
    1c3a:	31 96       	adiw	r30, 0x01	; 1
    1c3c:	7f 01       	movw	r14, r30
    1c3e:	61 50       	subi	r22, 0x01	; 1
    1c40:	01 f1       	breq	.+64     	; 0x1c82 <conv_brk+0x13c>
    1c42:	91 2c       	mov	r9, r1
    1c44:	c5 01       	movw	r24, r10
    1c46:	69 a3       	std	Y+33, r22	; 0x21
    1c48:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fgetc>
    1c4c:	69 a1       	ldd	r22, Y+33	; 0x21
    1c4e:	97 fd       	sbrc	r25, 7
    1c50:	16 c0       	rjmp	.+44     	; 0x1c7e <conv_brk+0x138>
    1c52:	28 2f       	mov	r18, r24
    1c54:	26 95       	lsr	r18
    1c56:	26 95       	lsr	r18
    1c58:	26 95       	lsr	r18
    1c5a:	f6 01       	movw	r30, r12
    1c5c:	e2 0f       	add	r30, r18
    1c5e:	f1 1d       	adc	r31, r1
    1c60:	20 81       	ld	r18, Z
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	ac 01       	movw	r20, r24
    1c66:	47 70       	andi	r20, 0x07	; 7
    1c68:	55 27       	eor	r21, r21
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <conv_brk+0x12a>
    1c6c:	35 95       	asr	r19
    1c6e:	27 95       	ror	r18
    1c70:	4a 95       	dec	r20
    1c72:	e2 f7       	brpl	.-8      	; 0x1c6c <conv_brk+0x126>
    1c74:	20 fd       	sbrc	r18, 0
    1c76:	db cf       	rjmp	.-74     	; 0x1c2e <conv_brk+0xe8>
    1c78:	b5 01       	movw	r22, r10
    1c7a:	0e 94 1b 10 	call	0x2036	; 0x2036 <ungetc>
    1c7e:	91 10       	cpse	r9, r1
    1c80:	86 cf       	rjmp	.-244    	; 0x1b8e <conv_brk+0x48>
    1c82:	e1 14       	cp	r14, r1
    1c84:	f1 04       	cpc	r15, r1
    1c86:	11 f0       	breq	.+4      	; 0x1c8c <conv_brk+0x146>
    1c88:	d7 01       	movw	r26, r14
    1c8a:	1c 92       	st	X, r1
    1c8c:	c8 01       	movw	r24, r16
    1c8e:	a1 96       	adiw	r28, 0x21	; 33
    1c90:	ed e0       	ldi	r30, 0x0D	; 13
    1c92:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__epilogue_restores__+0xa>

00001c96 <vfscanf>:
    1c96:	4f 92       	push	r4
    1c98:	5f 92       	push	r5
    1c9a:	7f 92       	push	r7
    1c9c:	8f 92       	push	r8
    1c9e:	9f 92       	push	r9
    1ca0:	af 92       	push	r10
    1ca2:	bf 92       	push	r11
    1ca4:	cf 92       	push	r12
    1ca6:	df 92       	push	r13
    1ca8:	ef 92       	push	r14
    1caa:	ff 92       	push	r15
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	1f 92       	push	r1
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	8c 01       	movw	r16, r24
    1cbc:	2b 01       	movw	r4, r22
    1cbe:	7a 01       	movw	r14, r20
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	17 82       	std	Z+7, r1	; 0x07
    1cc4:	16 82       	std	Z+6, r1	; 0x06
    1cc6:	a1 2c       	mov	r10, r1
    1cc8:	f8 01       	movw	r30, r16
    1cca:	d3 80       	ldd	r13, Z+3	; 0x03
    1ccc:	f2 01       	movw	r30, r4
    1cce:	d3 fc       	sbrc	r13, 3
    1cd0:	85 91       	lpm	r24, Z+
    1cd2:	d3 fe       	sbrs	r13, 3
    1cd4:	81 91       	ld	r24, Z+
    1cd6:	38 2f       	mov	r19, r24
    1cd8:	2f 01       	movw	r4, r30
    1cda:	88 23       	and	r24, r24
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <vfscanf+0x4a>
    1cde:	fc c0       	rjmp	.+504    	; 0x1ed8 <vfscanf+0x242>
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	39 83       	std	Y+1, r19	; 0x01
    1ce4:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <isspace>
    1ce8:	39 81       	ldd	r19, Y+1	; 0x01
    1cea:	89 2b       	or	r24, r25
    1cec:	21 f0       	breq	.+8      	; 0x1cf6 <vfscanf+0x60>
    1cee:	c8 01       	movw	r24, r16
    1cf0:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <skip_spaces>
    1cf4:	e9 cf       	rjmp	.-46     	; 0x1cc8 <vfscanf+0x32>
    1cf6:	35 32       	cpi	r19, 0x25	; 37
    1cf8:	41 f4       	brne	.+16     	; 0x1d0a <vfscanf+0x74>
    1cfa:	f2 01       	movw	r30, r4
    1cfc:	d3 fc       	sbrc	r13, 3
    1cfe:	35 91       	lpm	r19, Z+
    1d00:	d3 fe       	sbrs	r13, 3
    1d02:	31 91       	ld	r19, Z+
    1d04:	2f 01       	movw	r4, r30
    1d06:	35 32       	cpi	r19, 0x25	; 37
    1d08:	69 f4       	brne	.+26     	; 0x1d24 <vfscanf+0x8e>
    1d0a:	c8 01       	movw	r24, r16
    1d0c:	39 83       	std	Y+1, r19	; 0x01
    1d0e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fgetc>
    1d12:	39 81       	ldd	r19, Y+1	; 0x01
    1d14:	97 fd       	sbrc	r25, 7
    1d16:	de c0       	rjmp	.+444    	; 0x1ed4 <vfscanf+0x23e>
    1d18:	38 17       	cp	r19, r24
    1d1a:	b1 f2       	breq	.-84     	; 0x1cc8 <vfscanf+0x32>
    1d1c:	b8 01       	movw	r22, r16
    1d1e:	0e 94 1b 10 	call	0x2036	; 0x2036 <ungetc>
    1d22:	da c0       	rjmp	.+436    	; 0x1ed8 <vfscanf+0x242>
    1d24:	3a 32       	cpi	r19, 0x2A	; 42
    1d26:	41 f4       	brne	.+16     	; 0x1d38 <vfscanf+0xa2>
    1d28:	d3 fc       	sbrc	r13, 3
    1d2a:	35 91       	lpm	r19, Z+
    1d2c:	d3 fe       	sbrs	r13, 3
    1d2e:	31 91       	ld	r19, Z+
    1d30:	2f 01       	movw	r4, r30
    1d32:	bb 24       	eor	r11, r11
    1d34:	b3 94       	inc	r11
    1d36:	01 c0       	rjmp	.+2      	; 0x1d3a <vfscanf+0xa4>
    1d38:	b1 2c       	mov	r11, r1
    1d3a:	71 2c       	mov	r7, r1
    1d3c:	20 ed       	ldi	r18, 0xD0	; 208
    1d3e:	23 0f       	add	r18, r19
    1d40:	2a 30       	cpi	r18, 0x0A	; 10
    1d42:	90 f4       	brcc	.+36     	; 0x1d68 <vfscanf+0xd2>
    1d44:	fb 2d       	mov	r31, r11
    1d46:	f2 60       	ori	r31, 0x02	; 2
    1d48:	bf 2e       	mov	r11, r31
    1d4a:	67 2d       	mov	r22, r7
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	40 e2       	ldi	r20, 0x20	; 32
    1d54:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <mulacc>
    1d58:	76 2e       	mov	r7, r22
    1d5a:	f2 01       	movw	r30, r4
    1d5c:	d3 fc       	sbrc	r13, 3
    1d5e:	35 91       	lpm	r19, Z+
    1d60:	d3 fe       	sbrs	r13, 3
    1d62:	31 91       	ld	r19, Z+
    1d64:	2f 01       	movw	r4, r30
    1d66:	ea cf       	rjmp	.-44     	; 0x1d3c <vfscanf+0xa6>
    1d68:	b1 fe       	sbrs	r11, 1
    1d6a:	03 c0       	rjmp	.+6      	; 0x1d72 <vfscanf+0xdc>
    1d6c:	71 10       	cpse	r7, r1
    1d6e:	03 c0       	rjmp	.+6      	; 0x1d76 <vfscanf+0xe0>
    1d70:	b3 c0       	rjmp	.+358    	; 0x1ed8 <vfscanf+0x242>
    1d72:	77 24       	eor	r7, r7
    1d74:	7a 94       	dec	r7
    1d76:	38 36       	cpi	r19, 0x68	; 104
    1d78:	19 f0       	breq	.+6      	; 0x1d80 <vfscanf+0xea>
    1d7a:	3c 36       	cpi	r19, 0x6C	; 108
    1d7c:	61 f0       	breq	.+24     	; 0x1d96 <vfscanf+0x100>
    1d7e:	14 c0       	rjmp	.+40     	; 0x1da8 <vfscanf+0x112>
    1d80:	f2 01       	movw	r30, r4
    1d82:	d3 fc       	sbrc	r13, 3
    1d84:	35 91       	lpm	r19, Z+
    1d86:	d3 fe       	sbrs	r13, 3
    1d88:	31 91       	ld	r19, Z+
    1d8a:	2f 01       	movw	r4, r30
    1d8c:	38 36       	cpi	r19, 0x68	; 104
    1d8e:	61 f4       	brne	.+24     	; 0x1da8 <vfscanf+0x112>
    1d90:	fb 2d       	mov	r31, r11
    1d92:	f8 60       	ori	r31, 0x08	; 8
    1d94:	bf 2e       	mov	r11, r31
    1d96:	8b 2d       	mov	r24, r11
    1d98:	84 60       	ori	r24, 0x04	; 4
    1d9a:	b8 2e       	mov	r11, r24
    1d9c:	f2 01       	movw	r30, r4
    1d9e:	d3 fc       	sbrc	r13, 3
    1da0:	35 91       	lpm	r19, Z+
    1da2:	d3 fe       	sbrs	r13, 3
    1da4:	31 91       	ld	r19, Z+
    1da6:	2f 01       	movw	r4, r30
    1da8:	33 23       	and	r19, r19
    1daa:	09 f4       	brne	.+2      	; 0x1dae <vfscanf+0x118>
    1dac:	95 c0       	rjmp	.+298    	; 0x1ed8 <vfscanf+0x242>
    1dae:	63 2f       	mov	r22, r19
    1db0:	70 e0       	ldi	r23, 0x00	; 0
    1db2:	8c eb       	ldi	r24, 0xBC	; 188
    1db4:	93 e0       	ldi	r25, 0x03	; 3
    1db6:	39 83       	std	Y+1, r19	; 0x01
    1db8:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <strchr_P>
    1dbc:	39 81       	ldd	r19, Y+1	; 0x01
    1dbe:	89 2b       	or	r24, r25
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <vfscanf+0x12e>
    1dc2:	8a c0       	rjmp	.+276    	; 0x1ed8 <vfscanf+0x242>
    1dc4:	b0 fc       	sbrc	r11, 0
    1dc6:	07 c0       	rjmp	.+14     	; 0x1dd6 <vfscanf+0x140>
    1dc8:	f7 01       	movw	r30, r14
    1dca:	c0 80       	ld	r12, Z
    1dcc:	d1 80       	ldd	r13, Z+1	; 0x01
    1dce:	c7 01       	movw	r24, r14
    1dd0:	02 96       	adiw	r24, 0x02	; 2
    1dd2:	7c 01       	movw	r14, r24
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <vfscanf+0x144>
    1dd6:	c1 2c       	mov	r12, r1
    1dd8:	d1 2c       	mov	r13, r1
    1dda:	3e 36       	cpi	r19, 0x6E	; 110
    1ddc:	51 f4       	brne	.+20     	; 0x1df2 <vfscanf+0x15c>
    1dde:	f8 01       	movw	r30, r16
    1de0:	46 81       	ldd	r20, Z+6	; 0x06
    1de2:	57 81       	ldd	r21, Z+7	; 0x07
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	2b 2d       	mov	r18, r11
    1dea:	c6 01       	movw	r24, r12
    1dec:	0e 94 cd 0c 	call	0x199a	; 0x199a <putval>
    1df0:	6b cf       	rjmp	.-298    	; 0x1cc8 <vfscanf+0x32>
    1df2:	33 36       	cpi	r19, 0x63	; 99
    1df4:	a1 f4       	brne	.+40     	; 0x1e1e <vfscanf+0x188>
    1df6:	b1 fc       	sbrc	r11, 1
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <vfscanf+0x168>
    1dfa:	77 24       	eor	r7, r7
    1dfc:	73 94       	inc	r7
    1dfe:	c8 01       	movw	r24, r16
    1e00:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fgetc>
    1e04:	97 fd       	sbrc	r25, 7
    1e06:	66 c0       	rjmp	.+204    	; 0x1ed4 <vfscanf+0x23e>
    1e08:	c1 14       	cp	r12, r1
    1e0a:	d1 04       	cpc	r13, r1
    1e0c:	29 f0       	breq	.+10     	; 0x1e18 <vfscanf+0x182>
    1e0e:	f6 01       	movw	r30, r12
    1e10:	80 83       	st	Z, r24
    1e12:	c6 01       	movw	r24, r12
    1e14:	01 96       	adiw	r24, 0x01	; 1
    1e16:	6c 01       	movw	r12, r24
    1e18:	7a 94       	dec	r7
    1e1a:	89 f7       	brne	.-30     	; 0x1dfe <vfscanf+0x168>
    1e1c:	57 c0       	rjmp	.+174    	; 0x1ecc <vfscanf+0x236>
    1e1e:	3b 35       	cpi	r19, 0x5B	; 91
    1e20:	59 f4       	brne	.+22     	; 0x1e38 <vfscanf+0x1a2>
    1e22:	92 01       	movw	r18, r4
    1e24:	a6 01       	movw	r20, r12
    1e26:	67 2d       	mov	r22, r7
    1e28:	c8 01       	movw	r24, r16
    1e2a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <conv_brk>
    1e2e:	2c 01       	movw	r4, r24
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <vfscanf+0x1a0>
    1e34:	4b c0       	rjmp	.+150    	; 0x1ecc <vfscanf+0x236>
    1e36:	45 c0       	rjmp	.+138    	; 0x1ec2 <vfscanf+0x22c>
    1e38:	c8 01       	movw	r24, r16
    1e3a:	39 83       	std	Y+1, r19	; 0x01
    1e3c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <skip_spaces>
    1e40:	39 81       	ldd	r19, Y+1	; 0x01
    1e42:	97 fd       	sbrc	r25, 7
    1e44:	47 c0       	rjmp	.+142    	; 0x1ed4 <vfscanf+0x23e>
    1e46:	3f 36       	cpi	r19, 0x6F	; 111
    1e48:	69 f1       	breq	.+90     	; 0x1ea4 <vfscanf+0x20e>
    1e4a:	28 f4       	brcc	.+10     	; 0x1e56 <vfscanf+0x1c0>
    1e4c:	34 36       	cpi	r19, 0x64	; 100
    1e4e:	31 f1       	breq	.+76     	; 0x1e9c <vfscanf+0x206>
    1e50:	39 36       	cpi	r19, 0x69	; 105
    1e52:	79 f1       	breq	.+94     	; 0x1eb2 <vfscanf+0x21c>
    1e54:	2b c0       	rjmp	.+86     	; 0x1eac <vfscanf+0x216>
    1e56:	33 37       	cpi	r19, 0x73	; 115
    1e58:	69 f0       	breq	.+26     	; 0x1e74 <vfscanf+0x1de>
    1e5a:	35 37       	cpi	r19, 0x75	; 117
    1e5c:	f9 f0       	breq	.+62     	; 0x1e9c <vfscanf+0x206>
    1e5e:	26 c0       	rjmp	.+76     	; 0x1eac <vfscanf+0x216>
    1e60:	c1 14       	cp	r12, r1
    1e62:	d1 04       	cpc	r13, r1
    1e64:	29 f0       	breq	.+10     	; 0x1e70 <vfscanf+0x1da>
    1e66:	f6 01       	movw	r30, r12
    1e68:	80 82       	st	Z, r8
    1e6a:	c6 01       	movw	r24, r12
    1e6c:	01 96       	adiw	r24, 0x01	; 1
    1e6e:	6c 01       	movw	r12, r24
    1e70:	7a 94       	dec	r7
    1e72:	71 f0       	breq	.+28     	; 0x1e90 <vfscanf+0x1fa>
    1e74:	c8 01       	movw	r24, r16
    1e76:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fgetc>
    1e7a:	4c 01       	movw	r8, r24
    1e7c:	97 fd       	sbrc	r25, 7
    1e7e:	08 c0       	rjmp	.+16     	; 0x1e90 <vfscanf+0x1fa>
    1e80:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <isspace>
    1e84:	89 2b       	or	r24, r25
    1e86:	61 f3       	breq	.-40     	; 0x1e60 <vfscanf+0x1ca>
    1e88:	b8 01       	movw	r22, r16
    1e8a:	c4 01       	movw	r24, r8
    1e8c:	0e 94 1b 10 	call	0x2036	; 0x2036 <ungetc>
    1e90:	c1 14       	cp	r12, r1
    1e92:	d1 04       	cpc	r13, r1
    1e94:	d9 f0       	breq	.+54     	; 0x1ecc <vfscanf+0x236>
    1e96:	f6 01       	movw	r30, r12
    1e98:	10 82       	st	Z, r1
    1e9a:	18 c0       	rjmp	.+48     	; 0x1ecc <vfscanf+0x236>
    1e9c:	fb 2d       	mov	r31, r11
    1e9e:	f0 62       	ori	r31, 0x20	; 32
    1ea0:	bf 2e       	mov	r11, r31
    1ea2:	07 c0       	rjmp	.+14     	; 0x1eb2 <vfscanf+0x21c>
    1ea4:	8b 2d       	mov	r24, r11
    1ea6:	80 61       	ori	r24, 0x10	; 16
    1ea8:	b8 2e       	mov	r11, r24
    1eaa:	03 c0       	rjmp	.+6      	; 0x1eb2 <vfscanf+0x21c>
    1eac:	9b 2d       	mov	r25, r11
    1eae:	90 64       	ori	r25, 0x40	; 64
    1eb0:	b9 2e       	mov	r11, r25
    1eb2:	2b 2d       	mov	r18, r11
    1eb4:	a6 01       	movw	r20, r12
    1eb6:	67 2d       	mov	r22, r7
    1eb8:	c8 01       	movw	r24, r16
    1eba:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <conv_int>
    1ebe:	81 11       	cpse	r24, r1
    1ec0:	05 c0       	rjmp	.+10     	; 0x1ecc <vfscanf+0x236>
    1ec2:	f8 01       	movw	r30, r16
    1ec4:	83 81       	ldd	r24, Z+3	; 0x03
    1ec6:	80 73       	andi	r24, 0x30	; 48
    1ec8:	29 f4       	brne	.+10     	; 0x1ed4 <vfscanf+0x23e>
    1eca:	06 c0       	rjmp	.+12     	; 0x1ed8 <vfscanf+0x242>
    1ecc:	b0 fc       	sbrc	r11, 0
    1ece:	fc ce       	rjmp	.-520    	; 0x1cc8 <vfscanf+0x32>
    1ed0:	a3 94       	inc	r10
    1ed2:	fa ce       	rjmp	.-524    	; 0x1cc8 <vfscanf+0x32>
    1ed4:	aa 20       	and	r10, r10
    1ed6:	19 f0       	breq	.+6      	; 0x1ede <vfscanf+0x248>
    1ed8:	8a 2d       	mov	r24, r10
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <vfscanf+0x24c>
    1ede:	8f ef       	ldi	r24, 0xFF	; 255
    1ee0:	9f ef       	ldi	r25, 0xFF	; 255
    1ee2:	0f 90       	pop	r0
    1ee4:	df 91       	pop	r29
    1ee6:	cf 91       	pop	r28
    1ee8:	1f 91       	pop	r17
    1eea:	0f 91       	pop	r16
    1eec:	ff 90       	pop	r15
    1eee:	ef 90       	pop	r14
    1ef0:	df 90       	pop	r13
    1ef2:	cf 90       	pop	r12
    1ef4:	bf 90       	pop	r11
    1ef6:	af 90       	pop	r10
    1ef8:	9f 90       	pop	r9
    1efa:	8f 90       	pop	r8
    1efc:	7f 90       	pop	r7
    1efe:	5f 90       	pop	r5
    1f00:	4f 90       	pop	r4
    1f02:	08 95       	ret

00001f04 <isspace>:
    1f04:	91 11       	cpse	r25, r1
    1f06:	0e c1       	rjmp	.+540    	; 0x2124 <__ctype_isfalse>
    1f08:	80 32       	cpi	r24, 0x20	; 32
    1f0a:	19 f0       	breq	.+6      	; 0x1f12 <isspace+0xe>
    1f0c:	89 50       	subi	r24, 0x09	; 9
    1f0e:	85 50       	subi	r24, 0x05	; 5
    1f10:	d0 f7       	brcc	.-12     	; 0x1f06 <isspace+0x2>
    1f12:	08 95       	ret

00001f14 <strchr_P>:
    1f14:	fc 01       	movw	r30, r24
    1f16:	05 90       	lpm	r0, Z+
    1f18:	06 16       	cp	r0, r22
    1f1a:	21 f0       	breq	.+8      	; 0x1f24 <strchr_P+0x10>
    1f1c:	00 20       	and	r0, r0
    1f1e:	d9 f7       	brne	.-10     	; 0x1f16 <strchr_P+0x2>
    1f20:	c0 01       	movw	r24, r0
    1f22:	08 95       	ret
    1f24:	31 97       	sbiw	r30, 0x01	; 1
    1f26:	cf 01       	movw	r24, r30
    1f28:	08 95       	ret

00001f2a <strnlen_P>:
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	05 90       	lpm	r0, Z+
    1f2e:	61 50       	subi	r22, 0x01	; 1
    1f30:	70 40       	sbci	r23, 0x00	; 0
    1f32:	01 10       	cpse	r0, r1
    1f34:	d8 f7       	brcc	.-10     	; 0x1f2c <strnlen_P+0x2>
    1f36:	80 95       	com	r24
    1f38:	90 95       	com	r25
    1f3a:	8e 0f       	add	r24, r30
    1f3c:	9f 1f       	adc	r25, r31
    1f3e:	08 95       	ret

00001f40 <strnlen>:
    1f40:	fc 01       	movw	r30, r24
    1f42:	61 50       	subi	r22, 0x01	; 1
    1f44:	70 40       	sbci	r23, 0x00	; 0
    1f46:	01 90       	ld	r0, Z+
    1f48:	01 10       	cpse	r0, r1
    1f4a:	d8 f7       	brcc	.-10     	; 0x1f42 <strnlen+0x2>
    1f4c:	80 95       	com	r24
    1f4e:	90 95       	com	r25
    1f50:	8e 0f       	add	r24, r30
    1f52:	9f 1f       	adc	r25, r31
    1f54:	08 95       	ret

00001f56 <fgetc>:
    1f56:	cf 93       	push	r28
    1f58:	df 93       	push	r29
    1f5a:	ec 01       	movw	r28, r24
    1f5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f5e:	20 ff       	sbrs	r18, 0
    1f60:	33 c0       	rjmp	.+102    	; 0x1fc8 <fgetc+0x72>
    1f62:	26 ff       	sbrs	r18, 6
    1f64:	0a c0       	rjmp	.+20     	; 0x1f7a <fgetc+0x24>
    1f66:	2f 7b       	andi	r18, 0xBF	; 191
    1f68:	2b 83       	std	Y+3, r18	; 0x03
    1f6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f6e:	01 96       	adiw	r24, 0x01	; 1
    1f70:	9f 83       	std	Y+7, r25	; 0x07
    1f72:	8e 83       	std	Y+6, r24	; 0x06
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	29 c0       	rjmp	.+82     	; 0x1fcc <fgetc+0x76>
    1f7a:	22 ff       	sbrs	r18, 2
    1f7c:	0f c0       	rjmp	.+30     	; 0x1f9c <fgetc+0x46>
    1f7e:	e8 81       	ld	r30, Y
    1f80:	f9 81       	ldd	r31, Y+1	; 0x01
    1f82:	80 81       	ld	r24, Z
    1f84:	99 27       	eor	r25, r25
    1f86:	87 fd       	sbrc	r24, 7
    1f88:	90 95       	com	r25
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	19 f4       	brne	.+6      	; 0x1f94 <fgetc+0x3e>
    1f8e:	20 62       	ori	r18, 0x20	; 32
    1f90:	2b 83       	std	Y+3, r18	; 0x03
    1f92:	1a c0       	rjmp	.+52     	; 0x1fc8 <fgetc+0x72>
    1f94:	31 96       	adiw	r30, 0x01	; 1
    1f96:	f9 83       	std	Y+1, r31	; 0x01
    1f98:	e8 83       	st	Y, r30
    1f9a:	0e c0       	rjmp	.+28     	; 0x1fb8 <fgetc+0x62>
    1f9c:	ea 85       	ldd	r30, Y+10	; 0x0a
    1f9e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1fa0:	09 95       	icall
    1fa2:	97 ff       	sbrs	r25, 7
    1fa4:	09 c0       	rjmp	.+18     	; 0x1fb8 <fgetc+0x62>
    1fa6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa8:	01 96       	adiw	r24, 0x01	; 1
    1faa:	11 f4       	brne	.+4      	; 0x1fb0 <fgetc+0x5a>
    1fac:	80 e1       	ldi	r24, 0x10	; 16
    1fae:	01 c0       	rjmp	.+2      	; 0x1fb2 <fgetc+0x5c>
    1fb0:	80 e2       	ldi	r24, 0x20	; 32
    1fb2:	82 2b       	or	r24, r18
    1fb4:	8b 83       	std	Y+3, r24	; 0x03
    1fb6:	08 c0       	rjmp	.+16     	; 0x1fc8 <fgetc+0x72>
    1fb8:	2e 81       	ldd	r18, Y+6	; 0x06
    1fba:	3f 81       	ldd	r19, Y+7	; 0x07
    1fbc:	2f 5f       	subi	r18, 0xFF	; 255
    1fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc0:	3f 83       	std	Y+7, r19	; 0x07
    1fc2:	2e 83       	std	Y+6, r18	; 0x06
    1fc4:	99 27       	eor	r25, r25
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <fgetc+0x76>
    1fc8:	8f ef       	ldi	r24, 0xFF	; 255
    1fca:	9f ef       	ldi	r25, 0xFF	; 255
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	08 95       	ret

00001fd2 <fputc>:
    1fd2:	0f 93       	push	r16
    1fd4:	1f 93       	push	r17
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	18 2f       	mov	r17, r24
    1fdc:	09 2f       	mov	r16, r25
    1fde:	eb 01       	movw	r28, r22
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	81 fd       	sbrc	r24, 1
    1fe4:	03 c0       	rjmp	.+6      	; 0x1fec <fputc+0x1a>
    1fe6:	8f ef       	ldi	r24, 0xFF	; 255
    1fe8:	9f ef       	ldi	r25, 0xFF	; 255
    1fea:	20 c0       	rjmp	.+64     	; 0x202c <fputc+0x5a>
    1fec:	82 ff       	sbrs	r24, 2
    1fee:	10 c0       	rjmp	.+32     	; 0x2010 <fputc+0x3e>
    1ff0:	4e 81       	ldd	r20, Y+6	; 0x06
    1ff2:	5f 81       	ldd	r21, Y+7	; 0x07
    1ff4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff8:	42 17       	cp	r20, r18
    1ffa:	53 07       	cpc	r21, r19
    1ffc:	7c f4       	brge	.+30     	; 0x201c <fputc+0x4a>
    1ffe:	e8 81       	ld	r30, Y
    2000:	f9 81       	ldd	r31, Y+1	; 0x01
    2002:	9f 01       	movw	r18, r30
    2004:	2f 5f       	subi	r18, 0xFF	; 255
    2006:	3f 4f       	sbci	r19, 0xFF	; 255
    2008:	39 83       	std	Y+1, r19	; 0x01
    200a:	28 83       	st	Y, r18
    200c:	10 83       	st	Z, r17
    200e:	06 c0       	rjmp	.+12     	; 0x201c <fputc+0x4a>
    2010:	e8 85       	ldd	r30, Y+8	; 0x08
    2012:	f9 85       	ldd	r31, Y+9	; 0x09
    2014:	81 2f       	mov	r24, r17
    2016:	09 95       	icall
    2018:	89 2b       	or	r24, r25
    201a:	29 f7       	brne	.-54     	; 0x1fe6 <fputc+0x14>
    201c:	2e 81       	ldd	r18, Y+6	; 0x06
    201e:	3f 81       	ldd	r19, Y+7	; 0x07
    2020:	2f 5f       	subi	r18, 0xFF	; 255
    2022:	3f 4f       	sbci	r19, 0xFF	; 255
    2024:	3f 83       	std	Y+7, r19	; 0x07
    2026:	2e 83       	std	Y+6, r18	; 0x06
    2028:	81 2f       	mov	r24, r17
    202a:	90 2f       	mov	r25, r16
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	1f 91       	pop	r17
    2032:	0f 91       	pop	r16
    2034:	08 95       	ret

00002036 <ungetc>:
    2036:	fb 01       	movw	r30, r22
    2038:	23 81       	ldd	r18, Z+3	; 0x03
    203a:	20 ff       	sbrs	r18, 0
    203c:	12 c0       	rjmp	.+36     	; 0x2062 <ungetc+0x2c>
    203e:	26 fd       	sbrc	r18, 6
    2040:	10 c0       	rjmp	.+32     	; 0x2062 <ungetc+0x2c>
    2042:	8f 3f       	cpi	r24, 0xFF	; 255
    2044:	3f ef       	ldi	r19, 0xFF	; 255
    2046:	93 07       	cpc	r25, r19
    2048:	61 f0       	breq	.+24     	; 0x2062 <ungetc+0x2c>
    204a:	82 83       	std	Z+2, r24	; 0x02
    204c:	2f 7d       	andi	r18, 0xDF	; 223
    204e:	20 64       	ori	r18, 0x40	; 64
    2050:	23 83       	std	Z+3, r18	; 0x03
    2052:	26 81       	ldd	r18, Z+6	; 0x06
    2054:	37 81       	ldd	r19, Z+7	; 0x07
    2056:	21 50       	subi	r18, 0x01	; 1
    2058:	31 09       	sbc	r19, r1
    205a:	37 83       	std	Z+7, r19	; 0x07
    205c:	26 83       	std	Z+6, r18	; 0x06
    205e:	99 27       	eor	r25, r25
    2060:	08 95       	ret
    2062:	8f ef       	ldi	r24, 0xFF	; 255
    2064:	9f ef       	ldi	r25, 0xFF	; 255
    2066:	08 95       	ret

00002068 <__ultoa_invert>:
    2068:	fa 01       	movw	r30, r20
    206a:	aa 27       	eor	r26, r26
    206c:	28 30       	cpi	r18, 0x08	; 8
    206e:	51 f1       	breq	.+84     	; 0x20c4 <__ultoa_invert+0x5c>
    2070:	20 31       	cpi	r18, 0x10	; 16
    2072:	81 f1       	breq	.+96     	; 0x20d4 <__ultoa_invert+0x6c>
    2074:	e8 94       	clt
    2076:	6f 93       	push	r22
    2078:	6e 7f       	andi	r22, 0xFE	; 254
    207a:	6e 5f       	subi	r22, 0xFE	; 254
    207c:	7f 4f       	sbci	r23, 0xFF	; 255
    207e:	8f 4f       	sbci	r24, 0xFF	; 255
    2080:	9f 4f       	sbci	r25, 0xFF	; 255
    2082:	af 4f       	sbci	r26, 0xFF	; 255
    2084:	b1 e0       	ldi	r27, 0x01	; 1
    2086:	3e d0       	rcall	.+124    	; 0x2104 <__ultoa_invert+0x9c>
    2088:	b4 e0       	ldi	r27, 0x04	; 4
    208a:	3c d0       	rcall	.+120    	; 0x2104 <__ultoa_invert+0x9c>
    208c:	67 0f       	add	r22, r23
    208e:	78 1f       	adc	r23, r24
    2090:	89 1f       	adc	r24, r25
    2092:	9a 1f       	adc	r25, r26
    2094:	a1 1d       	adc	r26, r1
    2096:	68 0f       	add	r22, r24
    2098:	79 1f       	adc	r23, r25
    209a:	8a 1f       	adc	r24, r26
    209c:	91 1d       	adc	r25, r1
    209e:	a1 1d       	adc	r26, r1
    20a0:	6a 0f       	add	r22, r26
    20a2:	71 1d       	adc	r23, r1
    20a4:	81 1d       	adc	r24, r1
    20a6:	91 1d       	adc	r25, r1
    20a8:	a1 1d       	adc	r26, r1
    20aa:	20 d0       	rcall	.+64     	; 0x20ec <__ultoa_invert+0x84>
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <__ultoa_invert+0x48>
    20ae:	68 94       	set
    20b0:	3f 91       	pop	r19
    20b2:	2a e0       	ldi	r18, 0x0A	; 10
    20b4:	26 9f       	mul	r18, r22
    20b6:	11 24       	eor	r1, r1
    20b8:	30 19       	sub	r19, r0
    20ba:	30 5d       	subi	r19, 0xD0	; 208
    20bc:	31 93       	st	Z+, r19
    20be:	de f6       	brtc	.-74     	; 0x2076 <__ultoa_invert+0xe>
    20c0:	cf 01       	movw	r24, r30
    20c2:	08 95       	ret
    20c4:	46 2f       	mov	r20, r22
    20c6:	47 70       	andi	r20, 0x07	; 7
    20c8:	40 5d       	subi	r20, 0xD0	; 208
    20ca:	41 93       	st	Z+, r20
    20cc:	b3 e0       	ldi	r27, 0x03	; 3
    20ce:	0f d0       	rcall	.+30     	; 0x20ee <__ultoa_invert+0x86>
    20d0:	c9 f7       	brne	.-14     	; 0x20c4 <__ultoa_invert+0x5c>
    20d2:	f6 cf       	rjmp	.-20     	; 0x20c0 <__ultoa_invert+0x58>
    20d4:	46 2f       	mov	r20, r22
    20d6:	4f 70       	andi	r20, 0x0F	; 15
    20d8:	40 5d       	subi	r20, 0xD0	; 208
    20da:	4a 33       	cpi	r20, 0x3A	; 58
    20dc:	18 f0       	brcs	.+6      	; 0x20e4 <__ultoa_invert+0x7c>
    20de:	49 5d       	subi	r20, 0xD9	; 217
    20e0:	31 fd       	sbrc	r19, 1
    20e2:	40 52       	subi	r20, 0x20	; 32
    20e4:	41 93       	st	Z+, r20
    20e6:	02 d0       	rcall	.+4      	; 0x20ec <__ultoa_invert+0x84>
    20e8:	a9 f7       	brne	.-22     	; 0x20d4 <__ultoa_invert+0x6c>
    20ea:	ea cf       	rjmp	.-44     	; 0x20c0 <__ultoa_invert+0x58>
    20ec:	b4 e0       	ldi	r27, 0x04	; 4
    20ee:	a6 95       	lsr	r26
    20f0:	97 95       	ror	r25
    20f2:	87 95       	ror	r24
    20f4:	77 95       	ror	r23
    20f6:	67 95       	ror	r22
    20f8:	ba 95       	dec	r27
    20fa:	c9 f7       	brne	.-14     	; 0x20ee <__ultoa_invert+0x86>
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	61 05       	cpc	r22, r1
    2100:	71 05       	cpc	r23, r1
    2102:	08 95       	ret
    2104:	9b 01       	movw	r18, r22
    2106:	ac 01       	movw	r20, r24
    2108:	0a 2e       	mov	r0, r26
    210a:	06 94       	lsr	r0
    210c:	57 95       	ror	r21
    210e:	47 95       	ror	r20
    2110:	37 95       	ror	r19
    2112:	27 95       	ror	r18
    2114:	ba 95       	dec	r27
    2116:	c9 f7       	brne	.-14     	; 0x210a <__ultoa_invert+0xa2>
    2118:	62 0f       	add	r22, r18
    211a:	73 1f       	adc	r23, r19
    211c:	84 1f       	adc	r24, r20
    211e:	95 1f       	adc	r25, r21
    2120:	a0 1d       	adc	r26, r0
    2122:	08 95       	ret

00002124 <__ctype_isfalse>:
    2124:	99 27       	eor	r25, r25
    2126:	88 27       	eor	r24, r24

00002128 <__ctype_istrue>:
    2128:	08 95       	ret

0000212a <__prologue_saves__>:
    212a:	2f 92       	push	r2
    212c:	3f 92       	push	r3
    212e:	4f 92       	push	r4
    2130:	5f 92       	push	r5
    2132:	6f 92       	push	r6
    2134:	7f 92       	push	r7
    2136:	8f 92       	push	r8
    2138:	9f 92       	push	r9
    213a:	af 92       	push	r10
    213c:	bf 92       	push	r11
    213e:	cf 92       	push	r12
    2140:	df 92       	push	r13
    2142:	ef 92       	push	r14
    2144:	ff 92       	push	r15
    2146:	0f 93       	push	r16
    2148:	1f 93       	push	r17
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	ca 1b       	sub	r28, r26
    2154:	db 0b       	sbc	r29, r27
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	f8 94       	cli
    215a:	de bf       	out	0x3e, r29	; 62
    215c:	0f be       	out	0x3f, r0	; 63
    215e:	cd bf       	out	0x3d, r28	; 61
    2160:	09 94       	ijmp

00002162 <__epilogue_restores__>:
    2162:	2a 88       	ldd	r2, Y+18	; 0x12
    2164:	39 88       	ldd	r3, Y+17	; 0x11
    2166:	48 88       	ldd	r4, Y+16	; 0x10
    2168:	5f 84       	ldd	r5, Y+15	; 0x0f
    216a:	6e 84       	ldd	r6, Y+14	; 0x0e
    216c:	7d 84       	ldd	r7, Y+13	; 0x0d
    216e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2170:	9b 84       	ldd	r9, Y+11	; 0x0b
    2172:	aa 84       	ldd	r10, Y+10	; 0x0a
    2174:	b9 84       	ldd	r11, Y+9	; 0x09
    2176:	c8 84       	ldd	r12, Y+8	; 0x08
    2178:	df 80       	ldd	r13, Y+7	; 0x07
    217a:	ee 80       	ldd	r14, Y+6	; 0x06
    217c:	fd 80       	ldd	r15, Y+5	; 0x05
    217e:	0c 81       	ldd	r16, Y+4	; 0x04
    2180:	1b 81       	ldd	r17, Y+3	; 0x03
    2182:	aa 81       	ldd	r26, Y+2	; 0x02
    2184:	b9 81       	ldd	r27, Y+1	; 0x01
    2186:	ce 0f       	add	r28, r30
    2188:	d1 1d       	adc	r29, r1
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	ed 01       	movw	r28, r26
    2196:	08 95       	ret

00002198 <_exit>:
    2198:	f8 94       	cli

0000219a <__stop_program>:
    219a:	ff cf       	rjmp	.-2      	; 0x219a <__stop_program>


Node_2_can.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800200  00001790  00001824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001790  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  0080024e  0080024e  00001872  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001872  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d8  00000000  00000000  000018ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ee1  00000000  00000000  00001aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009f3  00000000  00000000  00003987  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012ea  00000000  00000000  0000437a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000474  00000000  00000000  00005664  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000700  00000000  00000000  00005ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011ce  00000000  00000000  000061d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  000073a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	3c c4       	rjmp	.+2168   	; 0x886 <__vector_3>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	1c c1       	rjmp	.+568    	; 0x2d6 <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	86 01       	movw	r16, r12
      e6:	d8 01       	movw	r26, r16
      e8:	d8 01       	movw	r26, r16
      ea:	d8 01       	movw	r26, r16
      ec:	d8 01       	movw	r26, r16
      ee:	d8 01       	movw	r26, r16
      f0:	d8 01       	movw	r26, r16
      f2:	d8 01       	movw	r26, r16
      f4:	86 01       	movw	r16, r12
      f6:	d8 01       	movw	r26, r16
      f8:	d8 01       	movw	r26, r16
      fa:	d8 01       	movw	r26, r16
      fc:	d8 01       	movw	r26, r16
      fe:	d8 01       	movw	r26, r16
     100:	d8 01       	movw	r26, r16
     102:	d8 01       	movw	r26, r16
     104:	88 01       	movw	r16, r16
     106:	d8 01       	movw	r26, r16
     108:	d8 01       	movw	r26, r16
     10a:	d8 01       	movw	r26, r16
     10c:	d8 01       	movw	r26, r16
     10e:	d8 01       	movw	r26, r16
     110:	d8 01       	movw	r26, r16
     112:	d8 01       	movw	r26, r16
     114:	d8 01       	movw	r26, r16
     116:	d8 01       	movw	r26, r16
     118:	d8 01       	movw	r26, r16
     11a:	d8 01       	movw	r26, r16
     11c:	d8 01       	movw	r26, r16
     11e:	d8 01       	movw	r26, r16
     120:	d8 01       	movw	r26, r16
     122:	d8 01       	movw	r26, r16
     124:	88 01       	movw	r16, r16
     126:	d8 01       	movw	r26, r16
     128:	d8 01       	movw	r26, r16
     12a:	d8 01       	movw	r26, r16
     12c:	d8 01       	movw	r26, r16
     12e:	d8 01       	movw	r26, r16
     130:	d8 01       	movw	r26, r16
     132:	d8 01       	movw	r26, r16
     134:	d8 01       	movw	r26, r16
     136:	d8 01       	movw	r26, r16
     138:	d8 01       	movw	r26, r16
     13a:	d8 01       	movw	r26, r16
     13c:	d8 01       	movw	r26, r16
     13e:	d8 01       	movw	r26, r16
     140:	d8 01       	movw	r26, r16
     142:	d8 01       	movw	r26, r16
     144:	d4 01       	movw	r26, r8
     146:	d8 01       	movw	r26, r16
     148:	d8 01       	movw	r26, r16
     14a:	d8 01       	movw	r26, r16
     14c:	d8 01       	movw	r26, r16
     14e:	d8 01       	movw	r26, r16
     150:	d8 01       	movw	r26, r16
     152:	d8 01       	movw	r26, r16
     154:	b1 01       	movw	r22, r2
     156:	d8 01       	movw	r26, r16
     158:	d8 01       	movw	r26, r16
     15a:	d8 01       	movw	r26, r16
     15c:	d8 01       	movw	r26, r16
     15e:	d8 01       	movw	r26, r16
     160:	d8 01       	movw	r26, r16
     162:	d8 01       	movw	r26, r16
     164:	d8 01       	movw	r26, r16
     166:	d8 01       	movw	r26, r16
     168:	d8 01       	movw	r26, r16
     16a:	d8 01       	movw	r26, r16
     16c:	d8 01       	movw	r26, r16
     16e:	d8 01       	movw	r26, r16
     170:	d8 01       	movw	r26, r16
     172:	d8 01       	movw	r26, r16
     174:	a5 01       	movw	r20, r10
     176:	d8 01       	movw	r26, r16
     178:	d8 01       	movw	r26, r16
     17a:	d8 01       	movw	r26, r16
     17c:	d8 01       	movw	r26, r16
     17e:	d8 01       	movw	r26, r16
     180:	d8 01       	movw	r26, r16
     182:	d8 01       	movw	r26, r16
     184:	c3 01       	movw	r24, r6

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	e0 e9       	ldi	r30, 0x90	; 144
     19e:	f7 e1       	ldi	r31, 0x17	; 23
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	ae 34       	cpi	r26, 0x4E	; 78
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	ae e4       	ldi	r26, 0x4E	; 78
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	ac 36       	cpi	r26, 0x6C	; 108
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	8f d3       	rcall	.+1822   	; 0x8e0 <main>
     1c2:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <adc_init>:
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void adc_init(void)
{
	DDRF &=~(1<<PF0);												//edited for IR!!!!
     1c8:	80 98       	cbi	0x10, 0	; 16
	ADMUX |=(1<<REFS0);												//internal AVCC as reference, channel 0 is selected as default
     1ca:	ec e7       	ldi	r30, 0x7C	; 124
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	80 64       	ori	r24, 0x40	; 64
     1d2:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);		//enable internal ADC, pre-scalar for clock is 128!!!
     1d4:	ea e7       	ldi	r30, 0x7A	; 122
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	87 68       	ori	r24, 0x87	; 135
     1dc:	80 83       	st	Z, r24
     1de:	08 95       	ret

000001e0 <adc_read>:
	
}

int adc_read(void)
{
	ADCSRA|=(1<<ADSC);				//start conversion
     1e0:	ea e7       	ldi	r30, 0x7A	; 122
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	80 64       	ori	r24, 0x40	; 64
     1e8:	80 83       	st	Z, r24
	while(!(ADCSRA & (ADIF)))		//wait for interrupt to occur i.e. conversion complete	
     1ea:	80 81       	ld	r24, Z
     1ec:	82 ff       	sbrs	r24, 2
     1ee:	fd cf       	rjmp	.-6      	; 0x1ea <adc_read+0xa>
	 ;
	 ADCSRA &=~(1<<ADIF);			//clear flag
     1f0:	ea e7       	ldi	r30, 0x7A	; 122
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	8f 7e       	andi	r24, 0xEF	; 239
     1f8:	80 83       	st	Z, r24
	 return ADC;
     1fa:	80 91 78 00 	lds	r24, 0x0078
     1fe:	90 91 79 00 	lds	r25, 0x0079
	
     202:	08 95       	ret

00000204 <twi_master_initialise>:
			return FALSE; //fail
		default:
			return TRUE; //success
	}
	
}	
     204:	80 e4       	ldi	r24, 0x40	; 64
     206:	80 93 b8 00 	sts	0x00B8, r24
     20a:	10 92 b9 00 	sts	0x00B9, r1
     20e:	8f ef       	ldi	r24, 0xFF	; 255
     210:	80 93 bb 00 	sts	0x00BB, r24
     214:	84 e0       	ldi	r24, 0x04	; 4
     216:	80 93 bc 00 	sts	0x00BC, r24
     21a:	08 95       	ret

0000021c <twi_get_state_info>:
     21c:	ec eb       	ldi	r30, 0xBC	; 188
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	80 fd       	sbrc	r24, 0
     224:	fd cf       	rjmp	.-6      	; 0x220 <twi_get_state_info+0x4>
     226:	80 91 00 02 	lds	r24, 0x0200
     22a:	08 95       	ret

0000022c <twi_start_transceiver_with_data>:
     22c:	ec eb       	ldi	r30, 0xBC	; 188
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	30 81       	ld	r19, Z
     232:	30 fd       	sbrc	r19, 0
     234:	fd cf       	rjmp	.-6      	; 0x230 <twi_start_transceiver_with_data+0x4>
     236:	32 e0       	ldi	r19, 0x02	; 2
     238:	36 0f       	add	r19, r22
     23a:	30 93 50 02 	sts	0x0250, r19
     23e:	40 93 51 02 	sts	0x0251, r20
     242:	20 93 52 02 	sts	0x0252, r18
     246:	40 fd       	sbrc	r20, 0
     248:	1b c0       	rjmp	.+54     	; 0x280 <twi_start_transceiver_with_data+0x54>
     24a:	66 23       	and	r22, r22
     24c:	c9 f0       	breq	.+50     	; 0x280 <twi_start_transceiver_with_data+0x54>
     24e:	46 2f       	mov	r20, r22
     250:	50 e0       	ldi	r21, 0x00	; 0
     252:	4e 5f       	subi	r20, 0xFE	; 254
     254:	5f 4f       	sbci	r21, 0xFF	; 255
     256:	43 30       	cpi	r20, 0x03	; 3
     258:	51 05       	cpc	r21, r1
     25a:	94 f0       	brlt	.+36     	; 0x280 <twi_start_transceiver_with_data+0x54>
     25c:	22 e0       	ldi	r18, 0x02	; 2
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	62 e0       	ldi	r22, 0x02	; 2
     262:	d9 01       	movw	r26, r18
     264:	af 5a       	subi	r26, 0xAF	; 175
     266:	bd 4f       	sbci	r27, 0xFD	; 253
     268:	fc 01       	movw	r30, r24
     26a:	e6 0f       	add	r30, r22
     26c:	f1 1d       	adc	r31, r1
     26e:	32 97       	sbiw	r30, 0x02	; 2
     270:	70 81       	ld	r23, Z
     272:	7c 93       	st	X, r23
     274:	6f 5f       	subi	r22, 0xFF	; 255
     276:	26 2f       	mov	r18, r22
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	24 17       	cp	r18, r20
     27c:	35 07       	cpc	r19, r21
     27e:	8c f3       	brlt	.-30     	; 0x262 <twi_start_transceiver_with_data+0x36>
     280:	10 92 4f 02 	sts	0x024F, r1
     284:	88 ef       	ldi	r24, 0xF8	; 248
     286:	80 93 00 02 	sts	0x0200, r24
     28a:	85 ea       	ldi	r24, 0xA5	; 165
     28c:	80 93 bc 00 	sts	0x00BC, r24
     290:	08 95       	ret

00000292 <atmel_led_drvr_init>:
     292:	b8 df       	rcall	.-144    	; 0x204 <twi_master_initialise>
     294:	78 94       	sei
     296:	08 95       	ret

00000298 <atmel_led_drvr_writeregister>:
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	1f 92       	push	r1
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	26 2f       	mov	r18, r22
     2a4:	49 83       	std	Y+1, r20	; 0x01
     2a6:	48 2f       	mov	r20, r24
     2a8:	44 0f       	add	r20, r20
     2aa:	61 e0       	ldi	r22, 0x01	; 1
     2ac:	ce 01       	movw	r24, r28
     2ae:	01 96       	adiw	r24, 0x01	; 1
     2b0:	bd df       	rcall	.-134    	; 0x22c <twi_start_transceiver_with_data>
     2b2:	b4 df       	rcall	.-152    	; 0x21c <twi_get_state_info>
     2b4:	80 32       	cpi	r24, 0x20	; 32
     2b6:	41 f0       	breq	.+16     	; 0x2c8 <atmel_led_drvr_writeregister+0x30>
     2b8:	18 f4       	brcc	.+6      	; 0x2c0 <atmel_led_drvr_writeregister+0x28>
     2ba:	81 11       	cpse	r24, r1
     2bc:	07 c0       	rjmp	.+14     	; 0x2cc <atmel_led_drvr_writeregister+0x34>
     2be:	04 c0       	rjmp	.+8      	; 0x2c8 <atmel_led_drvr_writeregister+0x30>
     2c0:	80 33       	cpi	r24, 0x30	; 48
     2c2:	11 f0       	breq	.+4      	; 0x2c8 <atmel_led_drvr_writeregister+0x30>
     2c4:	88 34       	cpi	r24, 0x48	; 72
     2c6:	11 f4       	brne	.+4      	; 0x2cc <atmel_led_drvr_writeregister+0x34>
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	01 c0       	rjmp	.+2      	; 0x2ce <atmel_led_drvr_writeregister+0x36>
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	0f 90       	pop	r0
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <__vector_39>:
/*! \brief This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
* that is whenever a TWI event has occurred. This function should not be called directly from the main
* application.
*/
ISR(TWI_vect)
{
     2d6:	1f 92       	push	r1
     2d8:	0f 92       	push	r0
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	0f 92       	push	r0
     2de:	11 24       	eor	r1, r1
     2e0:	0b b6       	in	r0, 0x3b	; 59
     2e2:	0f 92       	push	r0
     2e4:	2f 93       	push	r18
     2e6:	3f 93       	push	r19
     2e8:	8f 93       	push	r24
     2ea:	9f 93       	push	r25
     2ec:	af 93       	push	r26
     2ee:	bf 93       	push	r27
     2f0:	ef 93       	push	r30
     2f2:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
     2f4:	80 91 b9 00 	lds	r24, 0x00B9
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	fc 01       	movw	r30, r24
     2fc:	38 97       	sbiw	r30, 0x08	; 8
     2fe:	e1 35       	cpi	r30, 0x51	; 81
     300:	f1 05       	cpc	r31, r1
     302:	08 f0       	brcs	.+2      	; 0x306 <__vector_39+0x30>
     304:	55 c0       	rjmp	.+170    	; 0x3b0 <__vector_39+0xda>
     306:	ee 58       	subi	r30, 0x8E	; 142
     308:	ff 4f       	sbci	r31, 0xFF	; 255
     30a:	66 c5       	rjmp	.+2764   	; 0xdd8 <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
     30c:	10 92 4e 02 	sts	0x024E, r1
    case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
     310:	e0 91 4e 02 	lds	r30, 0x024E
     314:	80 91 50 02 	lds	r24, 0x0250
     318:	e8 17       	cp	r30, r24
     31a:	70 f4       	brcc	.+28     	; 0x338 <__vector_39+0x62>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	8e 0f       	add	r24, r30
     320:	80 93 4e 02 	sts	0x024E, r24
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	ef 5a       	subi	r30, 0xAF	; 175
     328:	fd 4f       	sbci	r31, 0xFD	; 253
     32a:	80 81       	ld	r24, Z
     32c:	80 93 bb 00 	sts	0x00BB, r24
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     330:	85 e8       	ldi	r24, 0x85	; 133
     332:	80 93 bc 00 	sts	0x00BC, r24
     336:	43 c0       	rjmp	.+134    	; 0x3be <__vector_39+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
     338:	80 91 4f 02 	lds	r24, 0x024F
     33c:	81 60       	ori	r24, 0x01	; 1
     33e:	80 93 4f 02 	sts	0x024F, r24
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     342:	84 e9       	ldi	r24, 0x94	; 148
     344:	80 93 bc 00 	sts	0x00BC, r24
     348:	3a c0       	rjmp	.+116    	; 0x3be <__vector_39+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
     34a:	e0 91 4e 02 	lds	r30, 0x024E
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	8e 0f       	add	r24, r30
     352:	80 93 4e 02 	sts	0x024E, r24
     356:	80 91 bb 00 	lds	r24, 0x00BB
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	ef 5a       	subi	r30, 0xAF	; 175
     35e:	fd 4f       	sbci	r31, 0xFD	; 253
     360:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
     362:	20 91 4e 02 	lds	r18, 0x024E
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	80 91 50 02 	lds	r24, 0x0250
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	28 17       	cp	r18, r24
     372:	39 07       	cpc	r19, r25
     374:	24 f4       	brge	.+8      	; 0x37e <__vector_39+0xa8>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     376:	85 ec       	ldi	r24, 0xC5	; 197
     378:	80 93 bc 00 	sts	0x00BC, r24
     37c:	20 c0       	rjmp	.+64     	; 0x3be <__vector_39+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     37e:	85 e8       	ldi	r24, 0x85	; 133
     380:	80 93 bc 00 	sts	0x00BC, r24
     384:	1c c0       	rjmp	.+56     	; 0x3be <__vector_39+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
      TWI_buf[TWI_bufPtr] = TWDR;
     386:	80 91 bb 00 	lds	r24, 0x00BB
     38a:	e0 91 4e 02 	lds	r30, 0x024E
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	ef 5a       	subi	r30, 0xAF	; 175
     392:	fd 4f       	sbci	r31, 0xFD	; 253
     394:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
     396:	80 91 4f 02 	lds	r24, 0x024F
     39a:	81 60       	ori	r24, 0x01	; 1
     39c:	80 93 4f 02 	sts	0x024F, r24
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     3a0:	84 e9       	ldi	r24, 0x94	; 148
     3a2:	80 93 bc 00 	sts	0x00BC, r24
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
     3a6:	0b c0       	rjmp	.+22     	; 0x3be <__vector_39+0xe8>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     3a8:	85 ea       	ldi	r24, 0xA5	; 165
     3aa:	80 93 bc 00 	sts	0x00BC, r24
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
     3ae:	07 c0       	rjmp	.+14     	; 0x3be <__vector_39+0xe8>
    case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
//    case TWI_NO_STATE              // No relevant state information available; TWINT = �0�
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     3b0:	80 91 b9 00 	lds	r24, 0x00B9
     3b4:	80 93 00 02 	sts	0x0200, r24
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     3b8:	84 e0       	ldi	r24, 0x04	; 4
     3ba:	80 93 bc 00 	sts	0x00BC, r24
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
     3be:	ff 91       	pop	r31
     3c0:	ef 91       	pop	r30
     3c2:	bf 91       	pop	r27
     3c4:	af 91       	pop	r26
     3c6:	9f 91       	pop	r25
     3c8:	8f 91       	pop	r24
     3ca:	3f 91       	pop	r19
     3cc:	2f 91       	pop	r18
     3ce:	0f 90       	pop	r0
     3d0:	0b be       	out	0x3b, r0	; 59
     3d2:	0f 90       	pop	r0
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	0f 90       	pop	r0
     3d8:	1f 90       	pop	r1
     3da:	18 95       	reti

000003dc <spi_config>:
	spi_chipselect(ENABLE);
	spi_tx_rx(READ_CMD);
	spi_tx_rx(addr);
	data=spi_tx_rx(0);
	return data;
}
     3dc:	84 b1       	in	r24, 0x04	; 4
     3de:	87 60       	ori	r24, 0x07	; 7
     3e0:	84 b9       	out	0x04, r24	; 4
     3e2:	28 9a       	sbi	0x05, 0	; 5
     3e4:	8c b5       	in	r24, 0x2c	; 44
     3e6:	80 65       	ori	r24, 0x50	; 80
     3e8:	8c bd       	out	0x2c, r24	; 44
     3ea:	08 95       	ret

000003ec <spi_chipselect>:
     3ec:	81 30       	cpi	r24, 0x01	; 1
     3ee:	11 f4       	brne	.+4      	; 0x3f4 <spi_chipselect+0x8>
     3f0:	28 98       	cbi	0x05, 0	; 5
     3f2:	08 95       	ret
     3f4:	28 9a       	sbi	0x05, 0	; 5
     3f6:	08 95       	ret

000003f8 <spi_tx_rx>:
     3f8:	8e bd       	out	0x2e, r24	; 46
     3fa:	0d b4       	in	r0, 0x2d	; 45
     3fc:	07 fe       	sbrs	r0, 7
     3fe:	fd cf       	rjmp	.-6      	; 0x3fa <spi_tx_rx+0x2>
     400:	8e b5       	in	r24, 0x2e	; 46
     402:	08 95       	ret

00000404 <can_reset>:
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	f2 df       	rcall	.-28     	; 0x3ec <spi_chipselect>
     408:	80 ec       	ldi	r24, 0xC0	; 192
     40a:	f6 df       	rcall	.-20     	; 0x3f8 <spi_tx_rx>
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	ee cf       	rjmp	.-36     	; 0x3ec <spi_chipselect>
     410:	08 95       	ret

00000412 <can_rx_if_clear>:
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	eb df       	rcall	.-42     	; 0x3ec <spi_chipselect>
     416:	85 e0       	ldi	r24, 0x05	; 5
     418:	ef df       	rcall	.-34     	; 0x3f8 <spi_tx_rx>
     41a:	8c e2       	ldi	r24, 0x2C	; 44
     41c:	ed df       	rcall	.-38     	; 0x3f8 <spi_tx_rx>
     41e:	8f ef       	ldi	r24, 0xFF	; 255
     420:	eb df       	rcall	.-42     	; 0x3f8 <spi_tx_rx>
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	e9 df       	rcall	.-46     	; 0x3f8 <spi_tx_rx>
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	e1 cf       	rjmp	.-62     	; 0x3ec <spi_chipselect>
     42a:	08 95       	ret

0000042c <can_transmit>:
     42c:	df 92       	push	r13
     42e:	ef 92       	push	r14
     430:	ff 92       	push	r15
     432:	0f 93       	push	r16
     434:	1f 93       	push	r17
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	18 2f       	mov	r17, r24
     43c:	d6 2f       	mov	r29, r22
     43e:	f4 2e       	mov	r15, r20
     440:	d2 2e       	mov	r13, r18
     442:	e3 2e       	mov	r14, r19
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	d2 df       	rcall	.-92     	; 0x3ec <spi_chipselect>
     448:	83 e0       	ldi	r24, 0x03	; 3
     44a:	d6 df       	rcall	.-84     	; 0x3f8 <spi_tx_rx>
     44c:	01 2f       	mov	r16, r17
     44e:	02 95       	swap	r16
     450:	00 7f       	andi	r16, 0xF0	; 240
     452:	00 5d       	subi	r16, 0xD0	; 208
     454:	80 2f       	mov	r24, r16
     456:	d0 df       	rcall	.-96     	; 0x3f8 <spi_tx_rx>
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	ce df       	rcall	.-100    	; 0x3f8 <spi_tx_rx>
     45c:	83 ff       	sbrs	r24, 3
     45e:	0d c0       	rjmp	.+26     	; 0x47a <can_transmit+0x4e>
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	c4 df       	rcall	.-120    	; 0x3ec <spi_chipselect>
     464:	83 e0       	ldi	r24, 0x03	; 3
     466:	c8 df       	rcall	.-112    	; 0x3f8 <spi_tx_rx>
     468:	80 2f       	mov	r24, r16
     46a:	c6 df       	rcall	.-116    	; 0x3f8 <spi_tx_rx>
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	c4 df       	rcall	.-120    	; 0x3f8 <spi_tx_rx>
     470:	c8 2f       	mov	r28, r24
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	bb df       	rcall	.-138    	; 0x3ec <spi_chipselect>
     476:	c3 fd       	sbrc	r28, 3
     478:	f3 cf       	rjmp	.-26     	; 0x460 <can_transmit+0x34>
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	b7 df       	rcall	.-146    	; 0x3ec <spi_chipselect>
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	b5 df       	rcall	.-150    	; 0x3ec <spi_chipselect>
     482:	82 e0       	ldi	r24, 0x02	; 2
     484:	b9 df       	rcall	.-142    	; 0x3f8 <spi_tx_rx>
     486:	80 2f       	mov	r24, r16
     488:	b7 df       	rcall	.-146    	; 0x3f8 <spi_tx_rx>
     48a:	83 e0       	ldi	r24, 0x03	; 3
     48c:	b5 df       	rcall	.-150    	; 0x3f8 <spi_tx_rx>
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	ad df       	rcall	.-166    	; 0x3ec <spi_chipselect>
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	ab df       	rcall	.-170    	; 0x3ec <spi_chipselect>
     496:	82 e0       	ldi	r24, 0x02	; 2
     498:	af df       	rcall	.-162    	; 0x3f8 <spi_tx_rx>
     49a:	c1 2f       	mov	r28, r17
     49c:	c2 95       	swap	r28
     49e:	c0 7f       	andi	r28, 0xF0	; 240
     4a0:	81 e3       	ldi	r24, 0x31	; 49
     4a2:	8c 0f       	add	r24, r28
     4a4:	a9 df       	rcall	.-174    	; 0x3f8 <spi_tx_rx>
     4a6:	8d 2f       	mov	r24, r29
     4a8:	86 95       	lsr	r24
     4aa:	86 95       	lsr	r24
     4ac:	86 95       	lsr	r24
     4ae:	a4 df       	rcall	.-184    	; 0x3f8 <spi_tx_rx>
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	9c df       	rcall	.-200    	; 0x3ec <spi_chipselect>
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	9a df       	rcall	.-204    	; 0x3ec <spi_chipselect>
     4b8:	82 e0       	ldi	r24, 0x02	; 2
     4ba:	9e df       	rcall	.-196    	; 0x3f8 <spi_tx_rx>
     4bc:	82 e3       	ldi	r24, 0x32	; 50
     4be:	8c 0f       	add	r24, r28
     4c0:	9b df       	rcall	.-202    	; 0x3f8 <spi_tx_rx>
     4c2:	8d 2f       	mov	r24, r29
     4c4:	82 95       	swap	r24
     4c6:	88 0f       	add	r24, r24
     4c8:	80 7e       	andi	r24, 0xE0	; 224
     4ca:	96 df       	rcall	.-212    	; 0x3f8 <spi_tx_rx>
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	8e df       	rcall	.-228    	; 0x3ec <spi_chipselect>
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	8c df       	rcall	.-232    	; 0x3ec <spi_chipselect>
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	90 df       	rcall	.-224    	; 0x3f8 <spi_tx_rx>
     4d8:	85 e3       	ldi	r24, 0x35	; 53
     4da:	8c 0f       	add	r24, r28
     4dc:	8d df       	rcall	.-230    	; 0x3f8 <spi_tx_rx>
     4de:	8f 2d       	mov	r24, r15
     4e0:	8f 70       	andi	r24, 0x0F	; 15
     4e2:	8a df       	rcall	.-236    	; 0x3f8 <spi_tx_rx>
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	82 df       	rcall	.-252    	; 0x3ec <spi_chipselect>
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	80 df       	rcall	.-256    	; 0x3ec <spi_chipselect>
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	84 df       	rcall	.-248    	; 0x3f8 <spi_tx_rx>
     4f0:	86 e3       	ldi	r24, 0x36	; 54
     4f2:	8c 0f       	add	r24, r28
     4f4:	81 df       	rcall	.-254    	; 0x3f8 <spi_tx_rx>
     4f6:	ff 20       	and	r15, r15
     4f8:	41 f0       	breq	.+16     	; 0x50a <can_transmit+0xde>
     4fa:	cd 2d       	mov	r28, r13
     4fc:	de 2d       	mov	r29, r14
     4fe:	10 e0       	ldi	r17, 0x00	; 0
     500:	89 91       	ld	r24, Y+
     502:	7a df       	rcall	.-268    	; 0x3f8 <spi_tx_rx>
     504:	1f 5f       	subi	r17, 0xFF	; 255
     506:	1f 11       	cpse	r17, r15
     508:	fb cf       	rjmp	.-10     	; 0x500 <can_transmit+0xd4>
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	6f df       	rcall	.-290    	; 0x3ec <spi_chipselect>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	6d df       	rcall	.-294    	; 0x3ec <spi_chipselect>
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	71 df       	rcall	.-286    	; 0x3f8 <spi_tx_rx>
     516:	80 2f       	mov	r24, r16
     518:	6f df       	rcall	.-290    	; 0x3f8 <spi_tx_rx>
     51a:	88 e0       	ldi	r24, 0x08	; 8
     51c:	6d df       	rcall	.-294    	; 0x3f8 <spi_tx_rx>
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	65 df       	rcall	.-310    	; 0x3ec <spi_chipselect>
     522:	77 df       	rcall	.-274    	; 0x412 <can_rx_if_clear>
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	1f 91       	pop	r17
     52a:	0f 91       	pop	r16
     52c:	ff 90       	pop	r15
     52e:	ef 90       	pop	r14
     530:	df 90       	pop	r13
     532:	08 95       	ret

00000534 <can_write_reg>:
     534:	cf 93       	push	r28
     536:	c6 2f       	mov	r28, r22
     538:	5f df       	rcall	.-322    	; 0x3f8 <spi_tx_rx>
     53a:	8c 2f       	mov	r24, r28
     53c:	5d df       	rcall	.-326    	; 0x3f8 <spi_tx_rx>
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <can_receive>:
     542:	8f 92       	push	r8
     544:	9f 92       	push	r9
     546:	af 92       	push	r10
     548:	bf 92       	push	r11
     54a:	cf 92       	push	r12
     54c:	df 92       	push	r13
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
     55e:	2e 97       	sbiw	r28, 0x0e	; 14
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	de bf       	out	0x3e, r29	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	cd bf       	out	0x3d, r28	; 61
     56a:	6c 01       	movw	r12, r24
     56c:	5b 01       	movw	r10, r22
     56e:	84 2e       	mov	r8, r20
     570:	95 2e       	mov	r9, r21
     572:	8e 01       	movw	r16, r28
     574:	0f 5f       	subi	r16, 0xFF	; 255
     576:	1f 4f       	sbci	r17, 0xFF	; 255
     578:	8e e0       	ldi	r24, 0x0E	; 14
     57a:	f8 01       	movw	r30, r16
     57c:	11 92       	st	Z+, r1
     57e:	8a 95       	dec	r24
     580:	e9 f7       	brne	.-6      	; 0x57c <can_receive+0x3a>
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	33 df       	rcall	.-410    	; 0x3ec <spi_chipselect>
     586:	80 eb       	ldi	r24, 0xB0	; 176
     588:	37 df       	rcall	.-402    	; 0x3f8 <spi_tx_rx>
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	35 df       	rcall	.-406    	; 0x3f8 <spi_tx_rx>
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	33 df       	rcall	.-410    	; 0x3f8 <spi_tx_rx>
     592:	f8 2e       	mov	r15, r24
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	2a df       	rcall	.-428    	; 0x3ec <spi_chipselect>
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	28 df       	rcall	.-432    	; 0x3ec <spi_chipselect>
     59c:	83 e0       	ldi	r24, 0x03	; 3
     59e:	2c df       	rcall	.-424    	; 0x3f8 <spi_tx_rx>
     5a0:	8f 2d       	mov	r24, r15
     5a2:	82 95       	swap	r24
     5a4:	86 95       	lsr	r24
     5a6:	86 95       	lsr	r24
     5a8:	83 70       	andi	r24, 0x03	; 3
     5aa:	81 5a       	subi	r24, 0xA1	; 161
     5ac:	25 df       	rcall	.-438    	; 0x3f8 <spi_tx_rx>
     5ae:	7e 01       	movw	r14, r28
     5b0:	ff e0       	ldi	r31, 0x0F	; 15
     5b2:	ef 0e       	add	r14, r31
     5b4:	f1 1c       	adc	r15, r1
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	1f df       	rcall	.-450    	; 0x3f8 <spi_tx_rx>
     5ba:	f8 01       	movw	r30, r16
     5bc:	81 93       	st	Z+, r24
     5be:	8f 01       	movw	r16, r30
     5c0:	ee 15       	cp	r30, r14
     5c2:	ff 05       	cpc	r31, r15
     5c4:	c1 f7       	brne	.-16     	; 0x5b6 <can_receive+0x74>
     5c6:	8a 81       	ldd	r24, Y+2	; 0x02
     5c8:	88 0f       	add	r24, r24
     5ca:	88 0f       	add	r24, r24
     5cc:	88 0f       	add	r24, r24
     5ce:	f6 01       	movw	r30, r12
     5d0:	80 83       	st	Z, r24
     5d2:	8b 81       	ldd	r24, Y+3	; 0x03
     5d4:	82 95       	swap	r24
     5d6:	86 95       	lsr	r24
     5d8:	87 70       	andi	r24, 0x07	; 7
     5da:	81 83       	std	Z+1, r24	; 0x01
     5dc:	8e 81       	ldd	r24, Y+6	; 0x06
     5de:	f5 01       	movw	r30, r10
     5e0:	80 83       	st	Z, r24
     5e2:	fe 01       	movw	r30, r28
     5e4:	37 96       	adiw	r30, 0x07	; 7
     5e6:	a8 2d       	mov	r26, r8
     5e8:	b9 2d       	mov	r27, r9
     5ea:	81 91       	ld	r24, Z+
     5ec:	8d 93       	st	X+, r24
     5ee:	ee 16       	cp	r14, r30
     5f0:	ff 06       	cpc	r15, r31
     5f2:	d9 f7       	brne	.-10     	; 0x5ea <can_receive+0xa8>
     5f4:	0e df       	rcall	.-484    	; 0x412 <can_rx_if_clear>
     5f6:	2e 96       	adiw	r28, 0x0e	; 14
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	f8 94       	cli
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	cd bf       	out	0x3d, r28	; 61
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	df 90       	pop	r13
     610:	cf 90       	pop	r12
     612:	bf 90       	pop	r11
     614:	af 90       	pop	r10
     616:	9f 90       	pop	r9
     618:	8f 90       	pop	r8
     61a:	08 95       	ret

0000061c <can_read_status>:


char can_read_status(void)
{
	char data=0;
	spi_chipselect(ENABLE);
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	e6 de       	rcall	.-564    	; 0x3ec <spi_chipselect>
	spi_tx_rx(READ_CMD);
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	ea de       	rcall	.-556    	; 0x3f8 <spi_tx_rx>
	spi_tx_rx(0xFE);		//address of data register
     624:	8e ef       	ldi	r24, 0xFE	; 254
     626:	e8 de       	rcall	.-560    	; 0x3f8 <spi_tx_rx>
	data=spi_tx_rx(0);		//upper 3 bits are mode of operation, bit 1 till 3 are for interrupt 
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	e6 ce       	rjmp	.-564    	; 0x3f8 <spi_tx_rx>
	return data;			//for mode, shift by 5, for interrupt, and with 0b00001110 and shift by 1
     62c:	08 95       	ret

0000062e <can_config>:
	can_rx_if_clear();

}

void can_config(int mode)
{
     62e:	cf 93       	push	r28
     630:	c8 2f       	mov	r28, r24
	can_reset();		//reset mcp
     632:	e8 de       	rcall	.-560    	; 0x404 <can_reset>

	spi_chipselect(ENABLE);		//enable slave
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	da de       	rcall	.-588    	; 0x3ec <spi_chipselect>

	spi_tx_rx(WRITE_CMD);
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	de de       	rcall	.-580    	; 0x3f8 <spi_tx_rx>

            //Send address of CAN CONTROL registerxFF because 0xXFH is mentioned
			//0b10000000 to enter config mode
			//be aware of potential delay while setting config_mode
			
    can_write_reg(0xFF,0x80);			//check config mode is achieved or not
     63c:	60 e8       	ldi	r22, 0x80	; 128
     63e:	8f ef       	ldi	r24, 0xFF	; 255
     640:	79 df       	rcall	.-270    	; 0x534 <can_write_reg>
	
	spi_chipselect(DISABLE);
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	d3 de       	rcall	.-602    	; 0x3ec <spi_chipselect>
	
	if(can_read_status()>>5 !=0x04)
     646:	ea df       	rcall	.-44     	; 0x61c <can_read_status>
     648:	82 95       	swap	r24
     64a:	86 95       	lsr	r24
     64c:	87 70       	andi	r24, 0x07	; 7
     64e:	84 30       	cpi	r24, 0x04	; 4
     650:	41 f0       	breq	.+16     	; 0x662 <can_config+0x34>
	{
		printf("\n\rERROR UNABLE TO ENTER CONFIG MODE\n\r");
     652:	2d e0       	ldi	r18, 0x0D	; 13
     654:	32 e0       	ldi	r19, 0x02	; 2
     656:	3f 93       	push	r19
     658:	2f 93       	push	r18
     65a:	f3 d5       	rcall	.+3046   	; 0x1242 <printf>
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	07 c0       	rjmp	.+14     	; 0x670 <can_config+0x42>
	}	
	
	else 
	{
		printf("\n\r CONFIG MODE ACHIEVED\n\r");
     662:	23 e3       	ldi	r18, 0x33	; 51
     664:	32 e0       	ldi	r19, 0x02	; 2
     666:	3f 93       	push	r19
     668:	2f 93       	push	r18
     66a:	eb d5       	rcall	.+3030   	; 0x1242 <printf>
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     670:	8f e9       	ldi	r24, 0x9F	; 159
     672:	9f e0       	ldi	r25, 0x0F	; 15
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <can_config+0x46>
     678:	00 c0       	rjmp	.+0      	; 0x67a <can_config+0x4c>
     67a:	00 00       	nop

        //send 0x00 to enable all messages
		_delay_us(1000); // TODO remove this test
		

	spi_chipselect(ENABLE);		//enable slave
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	b6 de       	rcall	.-660    	; 0x3ec <spi_chipselect>
	spi_tx_rx(WRITE_CMD);
     680:	82 e0       	ldi	r24, 0x02	; 2
     682:	ba de       	rcall	.-652    	; 0x3f8 <spi_tx_rx>
    can_write_reg(0x20,0x00);
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	80 e2       	ldi	r24, 0x20	; 32
     688:	55 df       	rcall	.-342    	; 0x534 <can_write_reg>
	spi_chipselect(DISABLE);
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	af de       	rcall	.-674    	; 0x3ec <spi_chipselect>
     68e:	8f e9       	ldi	r24, 0x9F	; 159
     690:	9f e0       	ldi	r25, 0x0F	; 15
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	f1 f7       	brne	.-4      	; 0x692 <can_config+0x64>
     696:	00 c0       	rjmp	.+0      	; 0x698 <can_config+0x6a>
     698:	00 00       	nop

	_delay_us(1000); // TODO remove this test

	spi_chipselect(ENABLE);		//enable slave
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	a7 de       	rcall	.-690    	; 0x3ec <spi_chipselect>
	spi_tx_rx(WRITE_CMD);
     69e:	82 e0       	ldi	r24, 0x02	; 2
     6a0:	ab de       	rcall	.-682    	; 0x3f8 <spi_tx_rx>
	can_write_reg(0x24,0x00);
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	84 e2       	ldi	r24, 0x24	; 36
     6a6:	46 df       	rcall	.-372    	; 0x534 <can_write_reg>
	spi_chipselect(DISABLE);
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	a0 de       	rcall	.-704    	; 0x3ec <spi_chipselect>
     6ac:	8f e9       	ldi	r24, 0x9F	; 159
     6ae:	9f e0       	ldi	r25, 0x0F	; 15
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	f1 f7       	brne	.-4      	; 0x6b0 <can_config+0x82>
     6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <can_config+0x88>
     6b6:	00 00       	nop
	
	_delay_us(1000); // TODO remove this test
	
	spi_chipselect(ENABLE);		//enable slave
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	98 de       	rcall	.-720    	; 0x3ec <spi_chipselect>
	spi_tx_rx(WRITE_CMD);
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	9c de       	rcall	.-712    	; 0x3f8 <spi_tx_rx>
	can_write_reg(0x21,0x00);
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	81 e2       	ldi	r24, 0x21	; 33
     6c4:	37 df       	rcall	.-402    	; 0x534 <can_write_reg>
	spi_chipselect(DISABLE);
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	91 de       	rcall	.-734    	; 0x3ec <spi_chipselect>
     6ca:	8f e9       	ldi	r24, 0x9F	; 159
     6cc:	9f e0       	ldi	r25, 0x0F	; 15
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	f1 f7       	brne	.-4      	; 0x6ce <can_config+0xa0>
     6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <can_config+0xa6>
     6d4:	00 00       	nop
	
	_delay_us(1000); // TODO remove this test
	
	spi_chipselect(ENABLE);		//enable slave
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	89 de       	rcall	.-750    	; 0x3ec <spi_chipselect>
	spi_tx_rx(WRITE_CMD);
     6da:	82 e0       	ldi	r24, 0x02	; 2
     6dc:	8d de       	rcall	.-742    	; 0x3f8 <spi_tx_rx>
	can_write_reg(0x25,0x00);
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	85 e2       	ldi	r24, 0x25	; 37
     6e2:	28 df       	rcall	.-432    	; 0x534 <can_write_reg>
	spi_chipselect(DISABLE);
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	82 de       	rcall	.-764    	; 0x3ec <spi_chipselect>
     6e8:	8f e9       	ldi	r24, 0x9F	; 159
     6ea:	9f e0       	ldi	r25, 0x0F	; 15
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <can_config+0xbe>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <can_config+0xc4>
     6f2:	00 00       	nop
	//Enable interrupts for reception

	//address of CAN Interrupt register

	//enable RX0 and RX1 interrupt only!!!!
    spi_chipselect(ENABLE);		//enable slave
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	7a de       	rcall	.-780    	; 0x3ec <spi_chipselect>
    spi_tx_rx(WRITE_CMD);
     6f8:	82 e0       	ldi	r24, 0x02	; 2
     6fa:	7e de       	rcall	.-772    	; 0x3f8 <spi_tx_rx>
	can_write_reg(0x2B,0x03);
     6fc:	63 e0       	ldi	r22, 0x03	; 3
     6fe:	8b e2       	ldi	r24, 0x2B	; 43
     700:	19 df       	rcall	.-462    	; 0x534 <can_write_reg>
	spi_chipselect(DISABLE);
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	73 de       	rcall	.-794    	; 0x3ec <spi_chipselect>
     706:	8f e9       	ldi	r24, 0x9F	; 159
     708:	9f e0       	ldi	r25, 0x0F	; 15
     70a:	01 97       	sbiw	r24, 0x01	; 1
     70c:	f1 f7       	brne	.-4      	; 0x70a <can_config+0xdc>
     70e:	00 c0       	rjmp	.+0      	; 0x710 <can_config+0xe2>
     710:	00 00       	nop
}
return 0;
}
*/

 spi_chipselect(ENABLE);		//enable slave
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	6b de       	rcall	.-810    	; 0x3ec <spi_chipselect>
 spi_tx_rx(WRITE_CMD);
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	6f de       	rcall	.-802    	; 0x3f8 <spi_tx_rx>
 can_write_reg(CNF1,BRP_value);
     71a:	63 e0       	ldi	r22, 0x03	; 3
     71c:	8a e2       	ldi	r24, 0x2A	; 42
     71e:	0a df       	rcall	.-492    	; 0x534 <can_write_reg>
 spi_chipselect(DISABLE);
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	64 de       	rcall	.-824    	; 0x3ec <spi_chipselect>
     724:	8f e9       	ldi	r24, 0x9F	; 159
     726:	9f e0       	ldi	r25, 0x0F	; 15
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <can_config+0xfa>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <can_config+0x100>
     72e:	00 00       	nop
 
 	_delay_us(1000); // TODO remove this test
 
 spi_chipselect(ENABLE);		//enable slave
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	5c de       	rcall	.-840    	; 0x3ec <spi_chipselect>
 spi_tx_rx(WRITE_CMD);
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	60 de       	rcall	.-832    	; 0x3f8 <spi_tx_rx>
 can_write_reg(CNF2,PH1_PRP_value);
     738:	61 ed       	ldi	r22, 0xD1	; 209
     73a:	89 e2       	ldi	r24, 0x29	; 41
     73c:	fb de       	rcall	.-522    	; 0x534 <can_write_reg>
 spi_chipselect(DISABLE);
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	55 de       	rcall	.-854    	; 0x3ec <spi_chipselect>
     742:	8f e9       	ldi	r24, 0x9F	; 159
     744:	9f e0       	ldi	r25, 0x0F	; 15
     746:	01 97       	sbiw	r24, 0x01	; 1
     748:	f1 f7       	brne	.-4      	; 0x746 <can_config+0x118>
     74a:	00 c0       	rjmp	.+0      	; 0x74c <can_config+0x11e>
     74c:	00 00       	nop
 
 	_delay_us(1000); // TODO remove this test
  
 spi_chipselect(ENABLE);		//enable slave
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	4d de       	rcall	.-870    	; 0x3ec <spi_chipselect>
 spi_tx_rx(WRITE_CMD);
     752:	82 e0       	ldi	r24, 0x02	; 2
     754:	51 de       	rcall	.-862    	; 0x3f8 <spi_tx_rx>
 can_write_reg(CNF3,PH2_value);
     756:	61 e4       	ldi	r22, 0x41	; 65
     758:	88 e2       	ldi	r24, 0x28	; 40
     75a:	ec de       	rcall	.-552    	; 0x534 <can_write_reg>
 spi_chipselect(DISABLE);
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	46 de       	rcall	.-884    	; 0x3ec <spi_chipselect>
     760:	8f e9       	ldi	r24, 0x9F	; 159
     762:	9f e0       	ldi	r25, 0x0F	; 15
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <can_config+0x136>
     768:	00 c0       	rjmp	.+0      	; 0x76a <can_config+0x13c>
     76a:	00 00       	nop

	//goto normal mode
			//Send address of CAN CONTROL registerxFF because 0xXFH is mentioned

			//mode, to shift bytes  to higher nibble enter normal mode
	spi_chipselect(ENABLE);		//enable slave
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	3e de       	rcall	.-900    	; 0x3ec <spi_chipselect>
	spi_tx_rx(WRITE_CMD);			
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	42 de       	rcall	.-892    	; 0x3f8 <spi_tx_rx>
    can_write_reg(0xFF,(mode<<5));			//mode should be sent as 0,1 and 2 from main since it is left shifted here by 5
     774:	6c 2f       	mov	r22, r28
     776:	62 95       	swap	r22
     778:	66 0f       	add	r22, r22
     77a:	60 7e       	andi	r22, 0xE0	; 224
     77c:	8f ef       	ldi	r24, 0xFF	; 255
     77e:	da de       	rcall	.-588    	; 0x534 <can_write_reg>
	spi_chipselect(DISABLE);
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	34 de       	rcall	.-920    	; 0x3ec <spi_chipselect>

}
     784:	cf 91       	pop	r28
     786:	08 95       	ret

00000788 <encoder_read>:
#define LOW_BYTE				(PORTF |=(1<<PF4))		//SEL is high to get low byte



void encoder_read(char *upper_byte,char *lower_byte)
{
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29

	
	int temp_1=0,temp_2=0,loop_var=0;
	uint8_t read;
	 
	ENABLE_ENCODER;
     794:	8a 98       	cbi	0x11, 2	; 17
	
			//read upper byte and process
			
	HIGH_BYTE;
     796:	8c 98       	cbi	0x11, 4	; 17
     798:	00 ea       	ldi	r16, 0xA0	; 160
     79a:	0a 95       	dec	r16
     79c:	f1 f7       	brne	.-4      	; 0x79a <encoder_read+0x12>
	
	_delay_us(30);
	
	temp_1=PINK;
     79e:	10 91 06 01 	lds	r17, 0x0106
     7a2:	28 e0       	ldi	r18, 0x08	; 8
     7a4:	30 e0       	ldi	r19, 0x00	; 0

void encoder_read(char *upper_byte,char *lower_byte)
{

	
	int temp_1=0,temp_2=0,loop_var=0;
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	c8 e0       	ldi	r28, 0x08	; 8
     7ac:	d0 e0       	ldi	r29, 0x00	; 0
	
	temp_1=PINK;
	
	for(loop_var=0;loop_var<= 7;loop_var++)
	{
		read = temp_1 & (1<<loop_var);
     7ae:	e1 e0       	ldi	r30, 0x01	; 1
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	de 01       	movw	r26, r28
     7b4:	a2 1b       	sub	r26, r18
     7b6:	b3 0b       	sbc	r27, r19
     7b8:	7f 01       	movw	r14, r30
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <encoder_read+0x38>
     7bc:	ee 0c       	add	r14, r14
     7be:	ff 1c       	adc	r15, r15
     7c0:	aa 95       	dec	r26
     7c2:	e2 f7       	brpl	.-8      	; 0x7bc <encoder_read+0x34>
     7c4:	d7 01       	movw	r26, r14
     7c6:	a1 23       	and	r26, r17
		if(read){
     7c8:	51 f0       	breq	.+20     	; 0x7de <encoder_read+0x56>
			temp_2 |=  1<< (8-loop_var);
     7ca:	df 01       	movw	r26, r30
     7cc:	02 2e       	mov	r0, r18
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <encoder_read+0x4c>
     7d0:	aa 0f       	add	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	0a 94       	dec	r0
     7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <encoder_read+0x48>
     7d8:	4a 2b       	or	r20, r26
     7da:	5b 2b       	or	r21, r27
     7dc:	0b c0       	rjmp	.+22     	; 0x7f4 <encoder_read+0x6c>
		} else
		{
		temp_2 &= ~((1<<(8-loop_var)));
     7de:	df 01       	movw	r26, r30
     7e0:	02 2e       	mov	r0, r18
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <encoder_read+0x60>
     7e4:	aa 0f       	add	r26, r26
     7e6:	bb 1f       	adc	r27, r27
     7e8:	0a 94       	dec	r0
     7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <encoder_read+0x5c>
     7ec:	a0 95       	com	r26
     7ee:	b0 95       	com	r27
     7f0:	4a 23       	and	r20, r26
     7f2:	5b 23       	and	r21, r27
     7f4:	21 50       	subi	r18, 0x01	; 1
     7f6:	31 09       	sbc	r19, r1
	
	_delay_us(30);
	
	temp_1=PINK;
	
	for(loop_var=0;loop_var<= 7;loop_var++)
     7f8:	21 15       	cp	r18, r1
     7fa:	31 05       	cpc	r19, r1
     7fc:	d1 f6       	brne	.-76     	; 0x7b2 <encoder_read+0x2a>
		temp_2 &= ~((1<<(8-loop_var)));
		}
	
	}
	
	*upper_byte=temp_2;
     7fe:	fc 01       	movw	r30, r24
     800:	40 83       	st	Z, r20
	
			//read lower byte and process
	
	LOW_BYTE;					
     802:	8c 9a       	sbi	0x11, 4	; 17
     804:	f0 ea       	ldi	r31, 0xA0	; 160
     806:	fa 95       	dec	r31
     808:	f1 f7       	brne	.-4      	; 0x806 <encoder_read+0x7e>
	
	_delay_us(30);
	
	temp_1=PINK;
     80a:	c0 91 06 01 	lds	r28, 0x0106
     80e:	88 e0       	ldi	r24, 0x08	; 8
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	a8 e0       	ldi	r26, 0x08	; 8
     814:	b0 e0       	ldi	r27, 0x00	; 0
	
	for(loop_var=0;loop_var<= 7;loop_var++)
	{
		read = temp_1 & (1<<loop_var);
     816:	21 e0       	ldi	r18, 0x01	; 1
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	fd 01       	movw	r30, r26
     81c:	e8 1b       	sub	r30, r24
     81e:	f9 0b       	sbc	r31, r25
     820:	79 01       	movw	r14, r18
     822:	02 c0       	rjmp	.+4      	; 0x828 <encoder_read+0xa0>
     824:	ee 0c       	add	r14, r14
     826:	ff 1c       	adc	r15, r15
     828:	ea 95       	dec	r30
     82a:	e2 f7       	brpl	.-8      	; 0x824 <encoder_read+0x9c>
     82c:	f7 01       	movw	r30, r14
     82e:	ec 23       	and	r30, r28
		if(read){
     830:	51 f0       	breq	.+20     	; 0x846 <encoder_read+0xbe>
			temp_2 |=  1<< (8-loop_var);
     832:	f9 01       	movw	r30, r18
     834:	08 2e       	mov	r0, r24
     836:	02 c0       	rjmp	.+4      	; 0x83c <encoder_read+0xb4>
     838:	ee 0f       	add	r30, r30
     83a:	ff 1f       	adc	r31, r31
     83c:	0a 94       	dec	r0
     83e:	e2 f7       	brpl	.-8      	; 0x838 <encoder_read+0xb0>
     840:	4e 2b       	or	r20, r30
     842:	5f 2b       	or	r21, r31
     844:	0b c0       	rjmp	.+22     	; 0x85c <encoder_read+0xd4>
		} else
		{
			temp_2 &= ~((1<<(8-loop_var)));
     846:	f9 01       	movw	r30, r18
     848:	08 2e       	mov	r0, r24
     84a:	02 c0       	rjmp	.+4      	; 0x850 <encoder_read+0xc8>
     84c:	ee 0f       	add	r30, r30
     84e:	ff 1f       	adc	r31, r31
     850:	0a 94       	dec	r0
     852:	e2 f7       	brpl	.-8      	; 0x84c <encoder_read+0xc4>
     854:	e0 95       	com	r30
     856:	f0 95       	com	r31
     858:	4e 23       	and	r20, r30
     85a:	5f 23       	and	r21, r31
     85c:	01 97       	sbiw	r24, 0x01	; 1
	
	_delay_us(30);
	
	temp_1=PINK;
	
	for(loop_var=0;loop_var<= 7;loop_var++)
     85e:	00 97       	sbiw	r24, 0x00	; 0
     860:	e1 f6       	brne	.-72     	; 0x81a <encoder_read+0x92>
			temp_2 &= ~((1<<(8-loop_var)));
		}
	
	}
	
	*lower_byte=temp_2;
     862:	fb 01       	movw	r30, r22
     864:	40 83       	st	Z, r20
	
	//RESET_ENCODER;
	
	//NORMAL_ENCODER;		//toggle for resetting
	
	NORMAL_ENCODER;		//Ensure reset is high at end of function
     866:	8b 9a       	sbi	0x11, 3	; 17
	
	DISABLE_ENCODER;	//Disable for further reading......
     868:	8a 9a       	sbi	0x11, 2	; 17
	
	}
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	08 95       	ret

00000878 <encoder_init>:
	
	void encoder_init()
	{

				//RESET at extreme end
		ENABLE_ENCODER;
     878:	8a 98       	cbi	0x11, 2	; 17
				
		RESET_ENCODER;
     87a:	8b 98       	cbi	0x11, 3	; 17
		
		NORMAL_ENCODER;		//toggle for resetting
     87c:	8b 9a       	sbi	0x11, 3	; 17
		
		RESET_ENCODER;		
     87e:	8b 98       	cbi	0x11, 3	; 17
		
		NORMAL_ENCODER;		//Ensure reset is high at end of function
     880:	8b 9a       	sbi	0x11, 3	; 17
		
		DISABLE_ENCODER;	//Disable for further reading....
     882:	8a 9a       	sbi	0x11, 2	; 17
     884:	08 95       	ret

00000886 <__vector_3>:
/************************************************************************/

void position(char *x_val,char *y_val)
{
	*x_val=(signed char) ((*x_val)*100/128);
	*y_val=(signed char) ((*y_val)*100/128);
     886:	1f 92       	push	r1
     888:	0f 92       	push	r0
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	0f 92       	push	r0
     88e:	11 24       	eor	r1, r1
     890:	8f 93       	push	r24
     892:	9f 93       	push	r25
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	90 93 65 02 	sts	0x0265, r25
     89c:	80 93 64 02 	sts	0x0264, r24
     8a0:	e2 98       	cbi	0x1c, 2	; 28
     8a2:	9f 91       	pop	r25
     8a4:	8f 91       	pop	r24
     8a6:	0f 90       	pop	r0
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	0f 90       	pop	r0
     8ac:	1f 90       	pop	r1
     8ae:	18 95       	reti

000008b0 <adc_filter_read>:
/************************************************************************/
/*			NODE 2 ADC (IR) FILTER FUNCTION							    */
/************************************************************************/

uint8_t adc_filter_read(void)
{
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	ca e0       	ldi	r28, 0x0A	; 10
     8ba:	d0 e0       	ldi	r29, 0x00	; 0
	int i,mean = 0;
     8bc:	00 e0       	ldi	r16, 0x00	; 0
     8be:	10 e0       	ldi	r17, 0x00	; 0
	
	for(i = 0; i < 10; i++)
	
	{
		mean += adc_read();
     8c0:	8f dc       	rcall	.-1762   	; 0x1e0 <adc_read>
     8c2:	08 0f       	add	r16, r24
     8c4:	19 1f       	adc	r17, r25
     8c6:	21 97       	sbiw	r28, 0x01	; 1

uint8_t adc_filter_read(void)
{
	int i,mean = 0;
	
	for(i = 0; i < 10; i++)
     8c8:	20 97       	sbiw	r28, 0x00	; 0
     8ca:	d1 f7       	brne	.-12     	; 0x8c0 <adc_filter_read+0x10>
	{
		mean += adc_read();
		//_delay_ms(5);
	}
	
	return (uint8_t)(mean/10);
     8cc:	c8 01       	movw	r24, r16
     8ce:	6a e0       	ldi	r22, 0x0A	; 10
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	6f d2       	rcall	.+1246   	; 0xdb2 <__divmodhi4>
     8d4:	86 2f       	mov	r24, r22
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	08 95       	ret

000008e0 <main>:
float Kd =  0.05;



int main(void)
{
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	ae 97       	sbiw	r28, 0x2e	; 46
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
int i;	
	//INTERRUPT CONFIGURATION (INT2)
	
	
	sei();						//Enable Global Interrupts
     8f4:	78 94       	sei
	EIMSK |= (1<<INT2);			//Enable INT_2
     8f6:	ea 9a       	sbi	0x1d, 2	; 29
	EICRA  |= (1<<ISC21);		//Falling Edge
     8f8:	e9 e6       	ldi	r30, 0x69	; 105
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	80 62       	ori	r24, 0x20	; 32
     900:	80 83       	st	Z, r24
	
	
	
	//PWM, Internal ADC, TWI, SPI and CAN initialization functions

	pwm_config();
     902:	39 d2       	rcall	.+1138   	; 0xd76 <pwm_config>

	adc_init();
     904:	61 dc       	rcall	.-1854   	; 0x1c8 <adc_init>

	spi_config();
     906:	6a dd       	rcall	.-1324   	; 0x3dc <spi_config>
	
	can_reset();
     908:	7d dd       	rcall	.-1286   	; 0x404 <can_reset>
	
	//Test
	//unsigned char Data[16];
	//unsigned char receivedData [16];
	//! Initialize the driver
	atmel_led_drvr_init();
     90a:	c3 dc       	rcall	.-1658   	; 0x292 <atmel_led_drvr_init>
	
	
		//CAN configuration function (normal mode)
			
	can_config(NORMAL);		//configure in loop back mode
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	8e de       	rcall	.-740    	; 0x62e <can_config>
	*/
	
	
			//Ports for encoder
			
	DDRF|=(1<<PF2) |(1<<PF3) |(1<<PF4) |(1<<PF5) |(1<<PF6);		//output port bits for encoder values
     912:	80 b3       	in	r24, 0x10	; 16
     914:	8c 67       	ori	r24, 0x7C	; 124
     916:	80 bb       	out	0x10, r24	; 16
	
	DDRH |= (1<<PH1);											//MAKE PH 1 OUTPUT FOR TOGGLE AND TIMING
     918:	e1 e0       	ldi	r30, 0x01	; 1
     91a:	f1 e0       	ldi	r31, 0x01	; 1
     91c:	80 81       	ld	r24, Z
     91e:	82 60       	ori	r24, 0x02	; 2
     920:	80 83       	st	Z, r24

	DDRK=0x00;		//input port
     922:	10 92 07 01 	sts	0x0107, r1
	

	
	
	
	MOTOR_ENABLE;
     926:	8d 9a       	sbi	0x11, 5	; 17
	DIR_LEFT;
     928:	8e 9a       	sbi	0x11, 6	; 17
	atmel_led_drvr_writeregister(SLAVE_ADDRESS, DAC_CMD, 120);
     92a:	48 e7       	ldi	r20, 0x78	; 120
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	88 e2       	ldi	r24, 0x28	; 40
     930:	b3 dc       	rcall	.-1690   	; 0x298 <atmel_led_drvr_writeregister>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     932:	2f ef       	ldi	r18, 0xFF	; 255
     934:	37 ea       	ldi	r19, 0xA7	; 167
     936:	81 e6       	ldi	r24, 0x61	; 97
     938:	21 50       	subi	r18, 0x01	; 1
     93a:	30 40       	sbci	r19, 0x00	; 0
     93c:	80 40       	sbci	r24, 0x00	; 0
     93e:	e1 f7       	brne	.-8      	; 0x938 <main+0x58>
     940:	00 c0       	rjmp	.+0      	; 0x942 <main+0x62>
     942:	00 00       	nop
	_delay_ms(2000);
	MOTOR_DISABLE;
     944:	8d 98       	cbi	0x11, 5	; 17
	PORTH &=~(1<<PH1);
     946:	e2 e0       	ldi	r30, 0x02	; 2
     948:	f1 e0       	ldi	r31, 0x01	; 1
     94a:	80 81       	ld	r24, Z
     94c:	8d 7f       	andi	r24, 0xFD	; 253
     94e:	80 83       	st	Z, r24
     950:	02 e3       	ldi	r16, 0x32	; 50
     952:	10 e0       	ldi	r17, 0x00	; 0
	
	for(i=0;i<50;i++)
	{
		encoder_init();
     954:	91 df       	rcall	.-222    	; 0x878 <encoder_init>
     956:	01 50       	subi	r16, 0x01	; 1
     958:	11 09       	sbc	r17, r1
	atmel_led_drvr_writeregister(SLAVE_ADDRESS, DAC_CMD, 120);
	_delay_ms(2000);
	MOTOR_DISABLE;
	PORTH &=~(1<<PH1);
	
	for(i=0;i<50;i++)
     95a:	01 15       	cp	r16, r1
     95c:	11 05       	cpc	r17, r1
     95e:	d1 f7       	brne	.-12     	; 0x954 <main+0x74>
	
//	can_transmit(0,0x05,8,tx_data);
		
	
	
	MOTOR_ENABLE;
     960:	8d 9a       	sbi	0x11, 5	; 17
	DIR_RIGHT;
     962:	8e 98       	cbi	0x11, 6	; 17
	atmel_led_drvr_writeregister(SLAVE_ADDRESS, DAC_CMD, 120);
     964:	48 e7       	ldi	r20, 0x78	; 120
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	88 e2       	ldi	r24, 0x28	; 40
     96a:	96 dc       	rcall	.-1748   	; 0x298 <atmel_led_drvr_writeregister>
     96c:	9f ef       	ldi	r25, 0xFF	; 255
     96e:	a7 ea       	ldi	r26, 0xA7	; 167
     970:	b1 e6       	ldi	r27, 0x61	; 97
     972:	91 50       	subi	r25, 0x01	; 1
     974:	a0 40       	sbci	r26, 0x00	; 0
     976:	b0 40       	sbci	r27, 0x00	; 0
     978:	e1 f7       	brne	.-8      	; 0x972 <main+0x92>
     97a:	00 c0       	rjmp	.+0      	; 0x97c <main+0x9c>
     97c:	00 00       	nop
	_delay_ms(2000);
	MOTOR_DISABLE;
     97e:	8d 98       	cbi	0x11, 5	; 17
     980:	0f 2e       	mov	r0, r31
     982:	fa e0       	ldi	r31, 0x0A	; 10
     984:	ef 2e       	mov	r14, r31
     986:	f1 2c       	mov	r15, r1
     988:	f0 2d       	mov	r31, r0
	float control_output=0;
	
	//Encoder Variables
	int16_t encoder_value=0;			//Variable for Mathematical calculations

	int16_t encoder_current=0,encoder_start=0,encoder_end=0,encoder_range=0;		//Variables for reading encoder;
     98a:	00 e0       	ldi	r16, 0x00	; 0
     98c:	10 e0       	ldi	r17, 0x00	; 0
	
	
	
	for(i=0;i<10;i++)
	{
		encoder_read(&enc_upper,&enc_lower);
     98e:	be 01       	movw	r22, r28
     990:	6b 5e       	subi	r22, 0xEB	; 235
     992:	7f 4f       	sbci	r23, 0xFF	; 255
     994:	ce 01       	movw	r24, r28
     996:	44 96       	adiw	r24, 0x14	; 20
     998:	f7 de       	rcall	.-530    	; 0x788 <encoder_read>
		encoder_end+=(enc_upper*0x100)+enc_lower;
     99a:	8c 89       	ldd	r24, Y+20	; 0x14
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	98 2f       	mov	r25, r24
     9a0:	88 27       	eor	r24, r24
     9a2:	2d 89       	ldd	r18, Y+21	; 0x15
     9a4:	82 0f       	add	r24, r18
     9a6:	91 1d       	adc	r25, r1
     9a8:	08 0f       	add	r16, r24
     9aa:	19 1f       	adc	r17, r25
     9ac:	e1 e0       	ldi	r30, 0x01	; 1
     9ae:	ee 1a       	sub	r14, r30
     9b0:	f1 08       	sbc	r15, r1
	_delay_ms(2000);
	MOTOR_DISABLE;
	
	
	
	for(i=0;i<10;i++)
     9b2:	e1 14       	cp	r14, r1
     9b4:	f1 04       	cpc	r15, r1
     9b6:	59 f7       	brne	.-42     	; 0x98e <main+0xae>
	{
		encoder_read(&enc_upper,&enc_lower);
		encoder_end+=(enc_upper*0x100)+enc_lower;
	}
	
	encoder_end=encoder_end/10;					//average 10 values!!!
     9b8:	c8 01       	movw	r24, r16
     9ba:	6a e0       	ldi	r22, 0x0A	; 10
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	f9 d1       	rcall	.+1010   	; 0xdb2 <__divmodhi4>
     9c0:	7a a7       	std	Y+42, r23	; 0x2a
     9c2:	69 a7       	std	Y+41, r22	; 0x29
	
	
	//PI controller part
	uint8_t sp_var_1=0;
	int16_t set_point = 0;
	int16_t error_p=0,error_int=0,error_d=0,error_current=0,error_last=0;
     9c4:	18 a6       	std	Y+40, r1	; 0x28
     9c6:	1f a2       	std	Y+39, r1	; 0x27
     9c8:	1e 8e       	std	Y+30, r1	; 0x1e
     9ca:	1d 8e       	std	Y+29, r1	; 0x1d
	
	
	
	//PI controller part
	uint8_t sp_var_1=0;
	int16_t set_point = 0;
     9cc:	18 8e       	std	Y+24, r1	; 0x18
     9ce:	1f 8a       	std	Y+23, r1	; 0x17
	
	char rx_data[8];				//CAN RX data
	char tx_data[8];				//CAN TX data
	uint8_t rx_id[2], rx_length;	//CAN control field
	uint8_t servo_pwm_value=0;		//SERVO and PWM variables
	uint8_t score=0;				//IR and Score variables
     9d0:	1e 8a       	std	Y+22, r1	; 0x16

    while(1)
    {	
		
		
		PORTH |= (1<<(PH1));
     9d2:	68 94       	set
     9d4:	22 24       	eor	r2, r2
     9d6:	21 f8       	bld	r2, 1
     9d8:	33 24       	eor	r3, r3
     9da:	33 94       	inc	r3
		
		error_last=error_current;
		#define RANGE_A 0.168
		#define RANGE_B 0.6
		//control_output= (Kp*error_p) + (Ki*error_int) + (Kd*error_d);
		if(abs(error_p) < 0.1*abs(encoder_range)){
     9dc:	f9 a5       	ldd	r31, Y+41	; 0x29
     9de:	fb a7       	std	Y+43, r31	; 0x2b
     9e0:	2a a5       	ldd	r18, Y+42	; 0x2a
     9e2:	2c a7       	std	Y+44, r18	; 0x2c
     9e4:	cb 01       	movw	r24, r22
     9e6:	91 95       	neg	r25
     9e8:	81 95       	neg	r24
     9ea:	91 09       	sbc	r25, r1
     9ec:	9e a7       	std	Y+46, r25	; 0x2e
     9ee:	8d a7       	std	Y+45, r24	; 0x2d

    while(1)
    {	
		
		
		PORTH |= (1<<(PH1));
     9f0:	d1 01       	movw	r26, r2
     9f2:	8c 91       	ld	r24, X
     9f4:	82 60       	ori	r24, 0x02	; 2
     9f6:	8c 93       	st	X, r24
		
		encoder_value=encoder_value/4;
		*/
		
		
		encoder_read(&enc_upper,&enc_lower);
     9f8:	be 01       	movw	r22, r28
     9fa:	6b 5e       	subi	r22, 0xEB	; 235
     9fc:	7f 4f       	sbci	r23, 0xFF	; 255
     9fe:	ce 01       	movw	r24, r28
     a00:	44 96       	adiw	r24, 0x14	; 20
     a02:	c2 de       	rcall	.-636    	; 0x788 <encoder_read>
		
		encoder_current=((enc_upper*0x100)+enc_lower);
     a04:	0c 89       	ldd	r16, Y+20	; 0x14
     a06:	1d 89       	ldd	r17, Y+21	; 0x15
		
		encoder_value=(encoder_current);		//convert to percentage 0 to 100 is range of encoder value
		
		
		
		uint8_t val = adc_filter_read();
     a08:	53 df       	rcall	.-346    	; 0x8b0 <adc_filter_read>
		
		if(val < IR_TH && val > 12)
     a0a:	8d 50       	subi	r24, 0x0D	; 13
     a0c:	8b 31       	cpi	r24, 0x1B	; 27
     a0e:	40 f4       	brcc	.+16     	; 0xa20 <main+0x140>
		{
			score_count ++;
     a10:	80 91 63 02 	lds	r24, 0x0263
     a14:	8f 5f       	subi	r24, 0xFF	; 255
     a16:	80 93 63 02 	sts	0x0263, r24
		
		/*if(score_count > 50){
			is_score = 1;
		}else is_score = 0;
		*/
		if(score_count>20){
     a1a:	85 31       	cpi	r24, 0x15	; 21
     a1c:	20 f4       	brcc	.+8      	; 0xa26 <main+0x146>
     a1e:	08 c0       	rjmp	.+16     	; 0xa30 <main+0x150>
		if(val < IR_TH && val > 12)
		{
			score_count ++;
			//_delay_ms(2);
			
		}else score_count = 0;
     a20:	10 92 63 02 	sts	0x0263, r1
     a24:	05 c0       	rjmp	.+10     	; 0xa30 <main+0x150>
		/*if(score_count > 50){
			is_score = 1;
		}else is_score = 0;
		*/
		if(score_count>20){
			score_count = 0;
     a26:	10 92 63 02 	sts	0x0263, r1
			score++;
     a2a:	be 89       	ldd	r27, Y+22	; 0x16
     a2c:	bf 5f       	subi	r27, 0xFF	; 255
     a2e:	be 8b       	std	Y+22, r27	; 0x16
		}
		if(rx_flag)
     a30:	80 91 64 02 	lds	r24, 0x0264
     a34:	90 91 65 02 	lds	r25, 0x0265
     a38:	89 2b       	or	r24, r25
     a3a:	09 f4       	brne	.+2      	; 0xa3e <main+0x15e>
     a3c:	96 c1       	rjmp	.+812    	; 0xd6a <main+0x48a>
		{
			can_rx_if_clear();
     a3e:	e9 dc       	rcall	.-1582   	; 0x412 <can_rx_if_clear>
			rx_flag=0;
     a40:	10 92 65 02 	sts	0x0265, r1
     a44:	10 92 64 02 	sts	0x0264, r1
			can_receive(rx_id,&rx_length,rx_data);
     a48:	ae 01       	movw	r20, r28
     a4a:	4f 5f       	subi	r20, 0xFF	; 255
     a4c:	5f 4f       	sbci	r21, 0xFF	; 255
     a4e:	be 01       	movw	r22, r28
     a50:	6d 5e       	subi	r22, 0xED	; 237
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
     a54:	ce 01       	movw	r24, r28
     a56:	41 96       	adiw	r24, 0x11	; 17
     a58:	74 dd       	rcall	.-1304   	; 0x542 <can_receive>
			can_rx_if_clear();
     a5a:	db dc       	rcall	.-1610   	; 0x412 <can_rx_if_clear>
					100 is added at node 2, so subtract here!!!
					2 is offset (physical observation) so subtracted 
						  			 							                    */
			/************************************************************************/
			
			int16_t pos_x = (uint8_t)rx_data[2] - 117;
     a5c:	6b 81       	ldd	r22, Y+3	; 0x03
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	65 57       	subi	r22, 0x75	; 117
     a62:	71 09       	sbc	r23, r1
     a64:	6e 37       	cpi	r22, 0x7E	; 126
     a66:	71 05       	cpc	r23, r1
     a68:	14 f0       	brlt	.+4      	; 0xa6e <main+0x18e>
     a6a:	6d e7       	ldi	r22, 0x7D	; 125
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	63 38       	cpi	r22, 0x83	; 131
     a70:	ef ef       	ldi	r30, 0xFF	; 255
     a72:	7e 07       	cpc	r23, r30
     a74:	14 f4       	brge	.+4      	; 0xa7a <main+0x19a>
     a76:	63 e8       	ldi	r22, 0x83	; 131
     a78:	7f ef       	ldi	r23, 0xFF	; 255
			}
			if (pos_x<-125)
			{
				pos_x = -125;
			}
			if( -3 < pos_x && pos_x < 3 )
     a7a:	cb 01       	movw	r24, r22
     a7c:	02 96       	adiw	r24, 0x02	; 2
     a7e:	05 97       	sbiw	r24, 0x05	; 5
     a80:	10 f4       	brcc	.+4      	; 0xa86 <main+0x1a6>
				pos_x = 0;
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	70 e0       	ldi	r23, 0x00	; 0
			servo_pwm_value = (PWM_MIN_DUTY + PWM_MIN_DUTY)/2 - ((PWM_MAX_DUTY - PWM_MIN_DUTY)*(pos_x/256.0)) + 5;
     a86:	88 27       	eor	r24, r24
     a88:	77 fd       	sbrc	r23, 7
     a8a:	80 95       	com	r24
     a8c:	98 2f       	mov	r25, r24
     a8e:	c2 d2       	rcall	.+1412   	; 0x1014 <__floatsisf>
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e8       	ldi	r20, 0x80	; 128
     a96:	5b e3       	ldi	r21, 0x3B	; 59
     a98:	71 d3       	rcall	.+1762   	; 0x117c <__mulsf3>
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	51 e4       	ldi	r21, 0x41	; 65
     aa2:	6c d3       	rcall	.+1752   	; 0x117c <__mulsf3>
     aa4:	9b 01       	movw	r18, r22
     aa6:	ac 01       	movw	r20, r24
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	91 e4       	ldi	r25, 0x41	; 65
     ab0:	ad d1       	rcall	.+858    	; 0xe0c <__subsf3>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 ea       	ldi	r20, 0xA0	; 160
     ab8:	50 e4       	ldi	r21, 0x40	; 64
     aba:	a9 d1       	rcall	.+850    	; 0xe0e <__addsf3>
     abc:	7d d2       	rcall	.+1274   	; 0xfb8 <__fixunssfsi>
     abe:	f6 2e       	mov	r15, r22
		
			pwm_funct(servo_pwm_value);
     ac0:	86 2f       	mov	r24, r22
     ac2:	6c d1       	rcall	.+728    	; 0xd9c <pwm_funct>
			/************************************************************************/
			/*  dynamic tuning pid                                                  */
			/************************************************************************/
			Kp = rx_data[4]/1000.0;
     ac4:	6d 81       	ldd	r22, Y+5	; 0x05
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a3 d2       	rcall	.+1350   	; 0x1014 <__floatsisf>
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	4a e7       	ldi	r20, 0x7A	; 122
     ad4:	54 e4       	ldi	r21, 0x44	; 68
     ad6:	03 d2       	rcall	.+1030   	; 0xede <__divsf3>
     ad8:	2b 01       	movw	r4, r22
     ada:	3c 01       	movw	r6, r24
     adc:	60 93 09 02 	sts	0x0209, r22
     ae0:	70 93 0a 02 	sts	0x020A, r23
     ae4:	80 93 0b 02 	sts	0x020B, r24
     ae8:	90 93 0c 02 	sts	0x020C, r25
			Ki = rx_data[5]/1000.0;
     aec:	6e 81       	ldd	r22, Y+6	; 0x06
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	8f d2       	rcall	.+1310   	; 0x1014 <__floatsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	4a e7       	ldi	r20, 0x7A	; 122
     afc:	54 e4       	ldi	r21, 0x44	; 68
     afe:	ef d1       	rcall	.+990    	; 0xede <__divsf3>
     b00:	6f 8f       	std	Y+31, r22	; 0x1f
     b02:	78 a3       	std	Y+32, r23	; 0x20
     b04:	89 a3       	std	Y+33, r24	; 0x21
     b06:	9a a3       	std	Y+34, r25	; 0x22
     b08:	60 93 05 02 	sts	0x0205, r22
     b0c:	70 93 06 02 	sts	0x0206, r23
     b10:	80 93 07 02 	sts	0x0207, r24
     b14:	90 93 08 02 	sts	0x0208, r25
			Kd = rx_data[6]/100.0;
     b18:	6f 81       	ldd	r22, Y+7	; 0x07
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	79 d2       	rcall	.+1266   	; 0x1014 <__floatsisf>
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	48 ec       	ldi	r20, 0xC8	; 200
     b28:	52 e4       	ldi	r21, 0x42	; 66
     b2a:	d9 d1       	rcall	.+946    	; 0xede <__divsf3>
     b2c:	69 8f       	std	Y+25, r22	; 0x19
     b2e:	7a 8f       	std	Y+26, r23	; 0x1a
     b30:	8b 8f       	std	Y+27, r24	; 0x1b
     b32:	9c 8f       	std	Y+28, r25	; 0x1c
     b34:	60 93 01 02 	sts	0x0201, r22
     b38:	70 93 02 02 	sts	0x0202, r23
     b3c:	80 93 03 02 	sts	0x0203, r24
     b40:	90 93 04 02 	sts	0x0204, r25
			/************************************************************************/
			
			tx_data[0] =servo_pwm_value;					//invert pattern, always remains constant
     b44:	f9 86       	std	Y+9, r15	; 0x09
			tx_data[1] =score;							//SCORE (changed from DIODE VALUE val)
     b46:	fe 89       	ldd	r31, Y+22	; 0x16
     b48:	fa 87       	std	Y+10, r31	; 0x0a
			tx_data[2] =rx_data[2];						//X 
     b4a:	8b 81       	ldd	r24, Y+3	; 0x03
     b4c:	8b 87       	std	Y+11, r24	; 0x0b
			//tx_data[3] =rx_data[3];						//Y
			//tx_data[3] = data_to_send;
			//tx_data[4] =servo_pwm_value;				//servo value
 			tx_data[5]=enc_upper;						//encoder upper byte
     b4e:	8c 89       	ldd	r24, Y+20	; 0x14
     b50:	8e 87       	std	Y+14, r24	; 0x0e
			tx_data[6]=enc_lower;						//encoder lower byte
     b52:	8d 89       	ldd	r24, Y+21	; 0x15
     b54:	8f 87       	std	Y+15, r24	; 0x0f
			tx_data[3]=set_point/0x100;
     b56:	88 8d       	ldd	r24, Y+24	; 0x18
     b58:	8c 87       	std	Y+12, r24	; 0x0c
			tx_data[4]=set_point%0x100;
     b5a:	8f 89       	ldd	r24, Y+23	; 0x17
     b5c:	98 8d       	ldd	r25, Y+24	; 0x18
     b5e:	90 78       	andi	r25, 0x80	; 128
     b60:	8d 87       	std	Y+13, r24	; 0x0d
			}*/
			sp_var_1=(uint8_t)rx_data[3];
			
			//sp_var_2=(60*sp_var_1);				//convert in percentage (0 to 100 is value)!!!
			
			set_point=60*sp_var_1;
     b62:	8c 81       	ldd	r24, Y+4	; 0x04
     b64:	3c e3       	ldi	r19, 0x3C	; 60
     b66:	38 9f       	mul	r19, r24
     b68:	90 01       	movw	r18, r0
     b6a:	11 24       	eor	r1, r1
     b6c:	38 8f       	std	Y+24, r19	; 0x18
     b6e:	2f 8b       	std	Y+23, r18	; 0x17
		*/
		
		
		encoder_read(&enc_upper,&enc_lower);
		
		encoder_current=((enc_upper*0x100)+enc_lower);
     b70:	80 2f       	mov	r24, r16
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	98 2f       	mov	r25, r24
     b76:	88 27       	eor	r24, r24
     b78:	dc 01       	movw	r26, r24
     b7a:	a1 0f       	add	r26, r17
     b7c:	b1 1d       	adc	r27, r1
			control_output = -200;
			
			//
			*/
		
		error_p=set_point-encoder_value;
     b7e:	2a 1b       	sub	r18, r26
     b80:	3b 0b       	sbc	r19, r27
     b82:	89 01       	movw	r16, r18
		
		error_current=error_p;
		
		error_int+=error_p;					//Integral effect
     b84:	ed 8d       	ldd	r30, Y+29	; 0x1d
     b86:	fe 8d       	ldd	r31, Y+30	; 0x1e
     b88:	e2 0f       	add	r30, r18
     b8a:	f3 1f       	adc	r31, r19
     b8c:	fe 8f       	std	Y+30, r31	; 0x1e
     b8e:	ed 8f       	std	Y+29, r30	; 0x1d
		
		error_last=error_current;
		#define RANGE_A 0.168
		#define RANGE_B 0.6
		//control_output= (Kp*error_p) + (Ki*error_int) + (Kd*error_d);
		if(abs(error_p) < 0.1*abs(encoder_range)){
     b90:	b9 01       	movw	r22, r18
     b92:	33 23       	and	r19, r19
     b94:	24 f4       	brge	.+8      	; 0xb9e <main+0x2be>
     b96:	66 27       	eor	r22, r22
     b98:	77 27       	eor	r23, r23
     b9a:	62 1b       	sub	r22, r18
     b9c:	73 0b       	sbc	r23, r19
     b9e:	88 27       	eor	r24, r24
     ba0:	77 fd       	sbrc	r23, 7
     ba2:	80 95       	com	r24
     ba4:	98 2f       	mov	r25, r24
     ba6:	36 d2       	rcall	.+1132   	; 0x1014 <__floatsisf>
     ba8:	6b 01       	movw	r12, r22
     baa:	7c 01       	movw	r14, r24
     bac:	6b a5       	ldd	r22, Y+43	; 0x2b
     bae:	7c a5       	ldd	r23, Y+44	; 0x2c
     bb0:	29 a5       	ldd	r18, Y+41	; 0x29
     bb2:	3a a5       	ldd	r19, Y+42	; 0x2a
     bb4:	33 23       	and	r19, r19
     bb6:	14 f4       	brge	.+4      	; 0xbbc <main+0x2dc>
     bb8:	6d a5       	ldd	r22, Y+45	; 0x2d
     bba:	7e a5       	ldd	r23, Y+46	; 0x2e
     bbc:	88 27       	eor	r24, r24
     bbe:	77 fd       	sbrc	r23, 7
     bc0:	80 95       	com	r24
     bc2:	98 2f       	mov	r25, r24
     bc4:	27 d2       	rcall	.+1102   	; 0x1014 <__floatsisf>
     bc6:	6b a3       	std	Y+35, r22	; 0x23
     bc8:	7c a3       	std	Y+36, r23	; 0x24
     bca:	8d a3       	std	Y+37, r24	; 0x25
     bcc:	9e a3       	std	Y+38, r25	; 0x26
     bce:	2d ec       	ldi	r18, 0xCD	; 205
     bd0:	3c ec       	ldi	r19, 0xCC	; 204
     bd2:	4c ec       	ldi	r20, 0xCC	; 204
     bd4:	5d e3       	ldi	r21, 0x3D	; 61
     bd6:	d2 d2       	rcall	.+1444   	; 0x117c <__mulsf3>
     bd8:	4b 01       	movw	r8, r22
     bda:	5c 01       	movw	r10, r24
     bdc:	9b 01       	movw	r18, r22
     bde:	ac 01       	movw	r20, r24
     be0:	c7 01       	movw	r24, r14
     be2:	b6 01       	movw	r22, r12
     be4:	78 d1       	rcall	.+752    	; 0xed6 <__cmpsf2>
     be6:	88 23       	and	r24, r24
     be8:	34 f5       	brge	.+76     	; 0xc36 <main+0x356>
			control_output= (Kp*error_p) + (Kd*error_d);
     bea:	b8 01       	movw	r22, r16
     bec:	88 27       	eor	r24, r24
     bee:	77 fd       	sbrc	r23, 7
     bf0:	80 95       	com	r24
     bf2:	98 2f       	mov	r25, r24
     bf4:	0f d2       	rcall	.+1054   	; 0x1014 <__floatsisf>
     bf6:	9b 01       	movw	r18, r22
     bf8:	ac 01       	movw	r20, r24
     bfa:	c3 01       	movw	r24, r6
     bfc:	b2 01       	movw	r22, r4
     bfe:	be d2       	rcall	.+1404   	; 0x117c <__mulsf3>
     c00:	6b 01       	movw	r12, r22
     c02:	7c 01       	movw	r14, r24
		
		error_current=error_p;
		
		error_int+=error_p;					//Integral effect
		
		error_d=error_current-error_last;
     c04:	b8 01       	movw	r22, r16
     c06:	8f a1       	ldd	r24, Y+39	; 0x27
     c08:	98 a5       	ldd	r25, Y+40	; 0x28
     c0a:	68 1b       	sub	r22, r24
     c0c:	79 0b       	sbc	r23, r25
		error_last=error_current;
		#define RANGE_A 0.168
		#define RANGE_B 0.6
		//control_output= (Kp*error_p) + (Ki*error_int) + (Kd*error_d);
		if(abs(error_p) < 0.1*abs(encoder_range)){
			control_output= (Kp*error_p) + (Kd*error_d);
     c0e:	88 27       	eor	r24, r24
     c10:	77 fd       	sbrc	r23, 7
     c12:	80 95       	com	r24
     c14:	98 2f       	mov	r25, r24
     c16:	fe d1       	rcall	.+1020   	; 0x1014 <__floatsisf>
     c18:	9b 01       	movw	r18, r22
     c1a:	ac 01       	movw	r20, r24
     c1c:	69 8d       	ldd	r22, Y+25	; 0x19
     c1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c20:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c22:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c24:	ab d2       	rcall	.+1366   	; 0x117c <__mulsf3>
     c26:	9b 01       	movw	r18, r22
     c28:	ac 01       	movw	r20, r24
     c2a:	c7 01       	movw	r24, r14
     c2c:	b6 01       	movw	r22, r12
     c2e:	ef d0       	rcall	.+478    	; 0xe0e <__addsf3>
     c30:	6b 01       	movw	r12, r22
     c32:	7c 01       	movw	r14, r24
     c34:	48 c0       	rjmp	.+144    	; 0xcc6 <main+0x3e6>
		}else if((abs(error_p) >= 0.1*abs(encoder_range))&&(abs(error_p) < 0.6*abs(encoder_range))){
     c36:	a5 01       	movw	r20, r10
     c38:	94 01       	movw	r18, r8
     c3a:	c7 01       	movw	r24, r14
     c3c:	b6 01       	movw	r22, r12
     c3e:	9a d2       	rcall	.+1332   	; 0x1174 <__gesf2>
     c40:	88 23       	and	r24, r24
     c42:	f4 f0       	brlt	.+60     	; 0xc80 <main+0x3a0>
     c44:	2a e9       	ldi	r18, 0x9A	; 154
     c46:	39 e9       	ldi	r19, 0x99	; 153
     c48:	49 e1       	ldi	r20, 0x19	; 25
     c4a:	5f e3       	ldi	r21, 0x3F	; 63
     c4c:	6b a1       	ldd	r22, Y+35	; 0x23
     c4e:	7c a1       	ldd	r23, Y+36	; 0x24
     c50:	8d a1       	ldd	r24, Y+37	; 0x25
     c52:	9e a1       	ldd	r25, Y+38	; 0x26
     c54:	93 d2       	rcall	.+1318   	; 0x117c <__mulsf3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	c7 01       	movw	r24, r14
     c5c:	b6 01       	movw	r22, r12
     c5e:	3b d1       	rcall	.+630    	; 0xed6 <__cmpsf2>
     c60:	88 23       	and	r24, r24
     c62:	74 f4       	brge	.+28     	; 0xc80 <main+0x3a0>
			control_output= (Kp*error_p) ;
     c64:	b8 01       	movw	r22, r16
     c66:	88 27       	eor	r24, r24
     c68:	77 fd       	sbrc	r23, 7
     c6a:	80 95       	com	r24
     c6c:	98 2f       	mov	r25, r24
     c6e:	d2 d1       	rcall	.+932    	; 0x1014 <__floatsisf>
     c70:	9b 01       	movw	r18, r22
     c72:	ac 01       	movw	r20, r24
     c74:	c3 01       	movw	r24, r6
     c76:	b2 01       	movw	r22, r4
     c78:	81 d2       	rcall	.+1282   	; 0x117c <__mulsf3>
     c7a:	6b 01       	movw	r12, r22
     c7c:	7c 01       	movw	r14, r24
     c7e:	23 c0       	rjmp	.+70     	; 0xcc6 <main+0x3e6>
		}else{
			control_output= (Kp*error_p) + (Ki*error_int);
     c80:	b8 01       	movw	r22, r16
     c82:	88 27       	eor	r24, r24
     c84:	77 fd       	sbrc	r23, 7
     c86:	80 95       	com	r24
     c88:	98 2f       	mov	r25, r24
     c8a:	c4 d1       	rcall	.+904    	; 0x1014 <__floatsisf>
     c8c:	9b 01       	movw	r18, r22
     c8e:	ac 01       	movw	r20, r24
     c90:	c3 01       	movw	r24, r6
     c92:	b2 01       	movw	r22, r4
     c94:	73 d2       	rcall	.+1254   	; 0x117c <__mulsf3>
     c96:	6b 01       	movw	r12, r22
     c98:	7c 01       	movw	r14, r24
     c9a:	ad 8d       	ldd	r26, Y+29	; 0x1d
     c9c:	be 8d       	ldd	r27, Y+30	; 0x1e
     c9e:	bd 01       	movw	r22, r26
     ca0:	88 27       	eor	r24, r24
     ca2:	77 fd       	sbrc	r23, 7
     ca4:	80 95       	com	r24
     ca6:	98 2f       	mov	r25, r24
     ca8:	b5 d1       	rcall	.+874    	; 0x1014 <__floatsisf>
     caa:	9b 01       	movw	r18, r22
     cac:	ac 01       	movw	r20, r24
     cae:	6f 8d       	ldd	r22, Y+31	; 0x1f
     cb0:	78 a1       	ldd	r23, Y+32	; 0x20
     cb2:	89 a1       	ldd	r24, Y+33	; 0x21
     cb4:	9a a1       	ldd	r25, Y+34	; 0x22
     cb6:	62 d2       	rcall	.+1220   	; 0x117c <__mulsf3>
     cb8:	9b 01       	movw	r18, r22
     cba:	ac 01       	movw	r20, r24
     cbc:	c7 01       	movw	r24, r14
     cbe:	b6 01       	movw	r22, r12
     cc0:	a6 d0       	rcall	.+332    	; 0xe0e <__addsf3>
     cc2:	6b 01       	movw	r12, r22
     cc4:	7c 01       	movw	r14, r24
		}
		
		//control_output=set_point-120;				//at center, it should be zero and at extreme (left or right but when ADC =0 ) its should be maximum/high enough (120)
		if(control_output>0)
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	a9 01       	movw	r20, r18
     ccc:	c7 01       	movw	r24, r14
     cce:	b6 01       	movw	r22, r12
     cd0:	51 d2       	rcall	.+1186   	; 0x1174 <__gesf2>
     cd2:	18 16       	cp	r1, r24
     cd4:	1c f4       	brge	.+6      	; 0xcdc <main+0x3fc>
		{
			MOTOR_ENABLE;
     cd6:	8d 9a       	sbi	0x11, 5	; 17
			DIR_RIGHT;
     cd8:	8e 98       	cbi	0x11, 6	; 17
     cda:	0c c0       	rjmp	.+24     	; 0xcf4 <main+0x414>
			
		}
		else if (control_output<0)
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	a9 01       	movw	r20, r18
     ce2:	c7 01       	movw	r24, r14
     ce4:	b6 01       	movw	r22, r12
     ce6:	f7 d0       	rcall	.+494    	; 0xed6 <__cmpsf2>
     ce8:	88 23       	and	r24, r24
     cea:	1c f4       	brge	.+6      	; 0xcf2 <main+0x412>
		{
		MOTOR_ENABLE;
     cec:	8d 9a       	sbi	0x11, 5	; 17
		DIR_LEFT;
     cee:	8e 9a       	sbi	0x11, 6	; 17
     cf0:	01 c0       	rjmp	.+2      	; 0xcf4 <main+0x414>
		}
		else 
		{
		MOTOR_DISABLE;	
     cf2:	8d 98       	cbi	0x11, 5	; 17
		}
		
		if(control_output >150 || control_output <-150)
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	46 e1       	ldi	r20, 0x16	; 22
     cfa:	53 e4       	ldi	r21, 0x43	; 67
     cfc:	c7 01       	movw	r24, r14
     cfe:	b6 01       	movw	r22, r12
     d00:	39 d2       	rcall	.+1138   	; 0x1174 <__gesf2>
     d02:	18 16       	cp	r1, r24
     d04:	54 f0       	brlt	.+20     	; 0xd1a <main+0x43a>
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	46 e1       	ldi	r20, 0x16	; 22
     d0c:	53 ec       	ldi	r21, 0xC3	; 195
     d0e:	c7 01       	movw	r24, r14
     d10:	b6 01       	movw	r22, r12
     d12:	e1 d0       	rcall	.+450    	; 0xed6 <__cmpsf2>
     d14:	88 23       	and	r24, r24
     d16:	54 f0       	brlt	.+20     	; 0xd2c <main+0x44c>
     d18:	11 c0       	rjmp	.+34     	; 0xd3c <main+0x45c>
		{
		control_output=150;	
     d1a:	0f 2e       	mov	r0, r31
     d1c:	c1 2c       	mov	r12, r1
     d1e:	d1 2c       	mov	r13, r1
     d20:	f6 e1       	ldi	r31, 0x16	; 22
     d22:	ef 2e       	mov	r14, r31
     d24:	f3 e4       	ldi	r31, 0x43	; 67
     d26:	ff 2e       	mov	r15, r31
     d28:	f0 2d       	mov	r31, r0
     d2a:	08 c0       	rjmp	.+16     	; 0xd3c <main+0x45c>
     d2c:	0f 2e       	mov	r0, r31
     d2e:	c1 2c       	mov	r12, r1
     d30:	d1 2c       	mov	r13, r1
     d32:	f6 e1       	ldi	r31, 0x16	; 22
     d34:	ef 2e       	mov	r14, r31
     d36:	f3 e4       	ldi	r31, 0x43	; 67
     d38:	ff 2e       	mov	r15, r31
     d3a:	f0 2d       	mov	r31, r0
		}
		
			data_to_send = (uint8_t)abs(control_output);
     d3c:	c7 01       	movw	r24, r14
     d3e:	b6 01       	movw	r22, r12
     d40:	36 d1       	rcall	.+620    	; 0xfae <__fixsfsi>
     d42:	ab 01       	movw	r20, r22
     d44:	77 23       	and	r23, r23
     d46:	24 f4       	brge	.+8      	; 0xd50 <main+0x470>
     d48:	44 27       	eor	r20, r20
     d4a:	55 27       	eor	r21, r21
     d4c:	46 1b       	sub	r20, r22
     d4e:	57 0b       	sbc	r21, r23
			
			atmel_led_drvr_writeregister(SLAVE_ADDRESS, DAC_CMD, data_to_send);
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	88 e2       	ldi	r24, 0x28	; 40
     d54:	a1 da       	rcall	.-2750   	; 0x298 <atmel_led_drvr_writeregister>
			 //
			 can_transmit(0,0x05,8,tx_data);			//BUFFER 0, ID 0x05, 8 data bytes and data=stored string
     d56:	9e 01       	movw	r18, r28
     d58:	27 5f       	subi	r18, 0xF7	; 247
     d5a:	3f 4f       	sbci	r19, 0xFF	; 255
     d5c:	48 e0       	ldi	r20, 0x08	; 8
     d5e:	65 e0       	ldi	r22, 0x05	; 5
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	64 db       	rcall	.-2360   	; 0x42c <can_transmit>
			can_rx_if_clear();
     d64:	56 db       	rcall	.-2388   	; 0x412 <can_rx_if_clear>
		
		error_int+=error_p;					//Integral effect
		
		error_d=error_current-error_last;
		
		error_last=error_current;
     d66:	18 a7       	std	Y+40, r17	; 0x28
     d68:	0f a3       	std	Y+39, r16	; 0x27
			 //
			 can_transmit(0,0x05,8,tx_data);			//BUFFER 0, ID 0x05, 8 data bytes and data=stored string
			can_rx_if_clear();
		}
		
		can_rx_if_clear();	
     d6a:	53 db       	rcall	.-2394   	; 0x412 <can_rx_if_clear>
		
		
		
	PORTH &= ~(1<<(PH1));
     d6c:	f1 01       	movw	r30, r2
     d6e:	80 81       	ld	r24, Z
     d70:	8d 7f       	andi	r24, 0xFD	; 253
     d72:	80 83       	st	Z, r24
	}
     d74:	3d ce       	rjmp	.-902    	; 0x9f0 <main+0x110>

00000d76 <pwm_config>:
	/************************************************************************/
	
	
void pwm_config()
{
	DDRH |= (1<<PH6);												//MAKE OCR2B as output
     d76:	e1 e0       	ldi	r30, 0x01	; 1
     d78:	f1 e0       	ldi	r31, 0x01	; 1
     d7a:	80 81       	ld	r24, Z
     d7c:	80 64       	ori	r24, 0x40	; 64
     d7e:	80 83       	st	Z, r24
	TCCR2A|= (1<<COM2B1) | (1<<WGM20) ;								//non-inverted PWM, Phase correct mode
     d80:	e0 eb       	ldi	r30, 0xB0	; 176
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	81 62       	ori	r24, 0x21	; 33
     d88:	80 83       	st	Z, r24
	TCCR2B |= (1<< CS22) | (1<< CS21) | (1<< CS20) | (1<< WGM22);	//pre scalar is 1024, TOP is defined by OCR2A	
     d8a:	e1 eb       	ldi	r30, 0xB1	; 177
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	8f 60       	ori	r24, 0x0F	; 15
     d92:	80 83       	st	Z, r24
	FREQUENCY = 156;													//50,08Hz frequency value
     d94:	8c e9       	ldi	r24, 0x9C	; 156
     d96:	80 93 b3 00 	sts	0x00B3, r24
     d9a:	08 95       	ret

00000d9c <pwm_funct>:
}

void pwm_funct(uint8_t duty)
{

if(duty> PWM_MAX_DUTY || duty<PWM_MIN_DUTY)
     d9c:	98 ef       	ldi	r25, 0xF8	; 248
     d9e:	98 0f       	add	r25, r24
     da0:	99 30       	cpi	r25, 0x09	; 9
     da2:	20 f0       	brcs	.+8      	; 0xdac <pwm_funct+0x10>
	{
	DUTY=PWM_MIN_DUTY;
     da4:	88 e0       	ldi	r24, 0x08	; 8
     da6:	80 93 b4 00 	sts	0x00B4, r24
     daa:	08 95       	ret
	}	
	else
	DUTY=duty;
     dac:	80 93 b4 00 	sts	0x00B4, r24
     db0:	08 95       	ret

00000db2 <__divmodhi4>:
     db2:	97 fb       	bst	r25, 7
     db4:	07 2e       	mov	r0, r23
     db6:	16 f4       	brtc	.+4      	; 0xdbc <__divmodhi4+0xa>
     db8:	00 94       	com	r0
     dba:	06 d0       	rcall	.+12     	; 0xdc8 <__divmodhi4_neg1>
     dbc:	77 fd       	sbrc	r23, 7
     dbe:	08 d0       	rcall	.+16     	; 0xdd0 <__divmodhi4_neg2>
     dc0:	11 d0       	rcall	.+34     	; 0xde4 <__udivmodhi4>
     dc2:	07 fc       	sbrc	r0, 7
     dc4:	05 d0       	rcall	.+10     	; 0xdd0 <__divmodhi4_neg2>
     dc6:	3e f4       	brtc	.+14     	; 0xdd6 <__divmodhi4_exit>

00000dc8 <__divmodhi4_neg1>:
     dc8:	90 95       	com	r25
     dca:	81 95       	neg	r24
     dcc:	9f 4f       	sbci	r25, 0xFF	; 255
     dce:	08 95       	ret

00000dd0 <__divmodhi4_neg2>:
     dd0:	70 95       	com	r23
     dd2:	61 95       	neg	r22
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255

00000dd6 <__divmodhi4_exit>:
     dd6:	08 95       	ret

00000dd8 <__tablejump2__>:
     dd8:	ee 0f       	add	r30, r30
     dda:	ff 1f       	adc	r31, r31

00000ddc <__tablejump__>:
     ddc:	05 90       	lpm	r0, Z+
     dde:	f4 91       	lpm	r31, Z
     de0:	e0 2d       	mov	r30, r0
     de2:	19 94       	eijmp

00000de4 <__udivmodhi4>:
     de4:	aa 1b       	sub	r26, r26
     de6:	bb 1b       	sub	r27, r27
     de8:	51 e1       	ldi	r21, 0x11	; 17
     dea:	07 c0       	rjmp	.+14     	; 0xdfa <__udivmodhi4_ep>

00000dec <__udivmodhi4_loop>:
     dec:	aa 1f       	adc	r26, r26
     dee:	bb 1f       	adc	r27, r27
     df0:	a6 17       	cp	r26, r22
     df2:	b7 07       	cpc	r27, r23
     df4:	10 f0       	brcs	.+4      	; 0xdfa <__udivmodhi4_ep>
     df6:	a6 1b       	sub	r26, r22
     df8:	b7 0b       	sbc	r27, r23

00000dfa <__udivmodhi4_ep>:
     dfa:	88 1f       	adc	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	5a 95       	dec	r21
     e00:	a9 f7       	brne	.-22     	; 0xdec <__udivmodhi4_loop>
     e02:	80 95       	com	r24
     e04:	90 95       	com	r25
     e06:	bc 01       	movw	r22, r24
     e08:	cd 01       	movw	r24, r26
     e0a:	08 95       	ret

00000e0c <__subsf3>:
     e0c:	50 58       	subi	r21, 0x80	; 128

00000e0e <__addsf3>:
     e0e:	bb 27       	eor	r27, r27
     e10:	aa 27       	eor	r26, r26
     e12:	0e d0       	rcall	.+28     	; 0xe30 <__addsf3x>
     e14:	75 c1       	rjmp	.+746    	; 0x1100 <__fp_round>
     e16:	66 d1       	rcall	.+716    	; 0x10e4 <__fp_pscA>
     e18:	30 f0       	brcs	.+12     	; 0xe26 <__addsf3+0x18>
     e1a:	6b d1       	rcall	.+726    	; 0x10f2 <__fp_pscB>
     e1c:	20 f0       	brcs	.+8      	; 0xe26 <__addsf3+0x18>
     e1e:	31 f4       	brne	.+12     	; 0xe2c <__addsf3+0x1e>
     e20:	9f 3f       	cpi	r25, 0xFF	; 255
     e22:	11 f4       	brne	.+4      	; 0xe28 <__addsf3+0x1a>
     e24:	1e f4       	brtc	.+6      	; 0xe2c <__addsf3+0x1e>
     e26:	5b c1       	rjmp	.+694    	; 0x10de <__fp_nan>
     e28:	0e f4       	brtc	.+2      	; 0xe2c <__addsf3+0x1e>
     e2a:	e0 95       	com	r30
     e2c:	e7 fb       	bst	r30, 7
     e2e:	51 c1       	rjmp	.+674    	; 0x10d2 <__fp_inf>

00000e30 <__addsf3x>:
     e30:	e9 2f       	mov	r30, r25
     e32:	77 d1       	rcall	.+750    	; 0x1122 <__fp_split3>
     e34:	80 f3       	brcs	.-32     	; 0xe16 <__addsf3+0x8>
     e36:	ba 17       	cp	r27, r26
     e38:	62 07       	cpc	r22, r18
     e3a:	73 07       	cpc	r23, r19
     e3c:	84 07       	cpc	r24, r20
     e3e:	95 07       	cpc	r25, r21
     e40:	18 f0       	brcs	.+6      	; 0xe48 <__addsf3x+0x18>
     e42:	71 f4       	brne	.+28     	; 0xe60 <__addsf3x+0x30>
     e44:	9e f5       	brtc	.+102    	; 0xeac <__addsf3x+0x7c>
     e46:	8f c1       	rjmp	.+798    	; 0x1166 <__fp_zero>
     e48:	0e f4       	brtc	.+2      	; 0xe4c <__addsf3x+0x1c>
     e4a:	e0 95       	com	r30
     e4c:	0b 2e       	mov	r0, r27
     e4e:	ba 2f       	mov	r27, r26
     e50:	a0 2d       	mov	r26, r0
     e52:	0b 01       	movw	r0, r22
     e54:	b9 01       	movw	r22, r18
     e56:	90 01       	movw	r18, r0
     e58:	0c 01       	movw	r0, r24
     e5a:	ca 01       	movw	r24, r20
     e5c:	a0 01       	movw	r20, r0
     e5e:	11 24       	eor	r1, r1
     e60:	ff 27       	eor	r31, r31
     e62:	59 1b       	sub	r21, r25
     e64:	99 f0       	breq	.+38     	; 0xe8c <__addsf3x+0x5c>
     e66:	59 3f       	cpi	r21, 0xF9	; 249
     e68:	50 f4       	brcc	.+20     	; 0xe7e <__addsf3x+0x4e>
     e6a:	50 3e       	cpi	r21, 0xE0	; 224
     e6c:	68 f1       	brcs	.+90     	; 0xec8 <__addsf3x+0x98>
     e6e:	1a 16       	cp	r1, r26
     e70:	f0 40       	sbci	r31, 0x00	; 0
     e72:	a2 2f       	mov	r26, r18
     e74:	23 2f       	mov	r18, r19
     e76:	34 2f       	mov	r19, r20
     e78:	44 27       	eor	r20, r20
     e7a:	58 5f       	subi	r21, 0xF8	; 248
     e7c:	f3 cf       	rjmp	.-26     	; 0xe64 <__addsf3x+0x34>
     e7e:	46 95       	lsr	r20
     e80:	37 95       	ror	r19
     e82:	27 95       	ror	r18
     e84:	a7 95       	ror	r26
     e86:	f0 40       	sbci	r31, 0x00	; 0
     e88:	53 95       	inc	r21
     e8a:	c9 f7       	brne	.-14     	; 0xe7e <__addsf3x+0x4e>
     e8c:	7e f4       	brtc	.+30     	; 0xeac <__addsf3x+0x7c>
     e8e:	1f 16       	cp	r1, r31
     e90:	ba 0b       	sbc	r27, r26
     e92:	62 0b       	sbc	r22, r18
     e94:	73 0b       	sbc	r23, r19
     e96:	84 0b       	sbc	r24, r20
     e98:	ba f0       	brmi	.+46     	; 0xec8 <__addsf3x+0x98>
     e9a:	91 50       	subi	r25, 0x01	; 1
     e9c:	a1 f0       	breq	.+40     	; 0xec6 <__addsf3x+0x96>
     e9e:	ff 0f       	add	r31, r31
     ea0:	bb 1f       	adc	r27, r27
     ea2:	66 1f       	adc	r22, r22
     ea4:	77 1f       	adc	r23, r23
     ea6:	88 1f       	adc	r24, r24
     ea8:	c2 f7       	brpl	.-16     	; 0xe9a <__addsf3x+0x6a>
     eaa:	0e c0       	rjmp	.+28     	; 0xec8 <__addsf3x+0x98>
     eac:	ba 0f       	add	r27, r26
     eae:	62 1f       	adc	r22, r18
     eb0:	73 1f       	adc	r23, r19
     eb2:	84 1f       	adc	r24, r20
     eb4:	48 f4       	brcc	.+18     	; 0xec8 <__addsf3x+0x98>
     eb6:	87 95       	ror	r24
     eb8:	77 95       	ror	r23
     eba:	67 95       	ror	r22
     ebc:	b7 95       	ror	r27
     ebe:	f7 95       	ror	r31
     ec0:	9e 3f       	cpi	r25, 0xFE	; 254
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <__addsf3x+0x96>
     ec4:	b3 cf       	rjmp	.-154    	; 0xe2c <__addsf3+0x1e>
     ec6:	93 95       	inc	r25
     ec8:	88 0f       	add	r24, r24
     eca:	08 f0       	brcs	.+2      	; 0xece <__addsf3x+0x9e>
     ecc:	99 27       	eor	r25, r25
     ece:	ee 0f       	add	r30, r30
     ed0:	97 95       	ror	r25
     ed2:	87 95       	ror	r24
     ed4:	08 95       	ret

00000ed6 <__cmpsf2>:
     ed6:	d9 d0       	rcall	.+434    	; 0x108a <__fp_cmp>
     ed8:	08 f4       	brcc	.+2      	; 0xedc <__cmpsf2+0x6>
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	08 95       	ret

00000ede <__divsf3>:
     ede:	0c d0       	rcall	.+24     	; 0xef8 <__divsf3x>
     ee0:	0f c1       	rjmp	.+542    	; 0x1100 <__fp_round>
     ee2:	07 d1       	rcall	.+526    	; 0x10f2 <__fp_pscB>
     ee4:	40 f0       	brcs	.+16     	; 0xef6 <__divsf3+0x18>
     ee6:	fe d0       	rcall	.+508    	; 0x10e4 <__fp_pscA>
     ee8:	30 f0       	brcs	.+12     	; 0xef6 <__divsf3+0x18>
     eea:	21 f4       	brne	.+8      	; 0xef4 <__divsf3+0x16>
     eec:	5f 3f       	cpi	r21, 0xFF	; 255
     eee:	19 f0       	breq	.+6      	; 0xef6 <__divsf3+0x18>
     ef0:	f0 c0       	rjmp	.+480    	; 0x10d2 <__fp_inf>
     ef2:	51 11       	cpse	r21, r1
     ef4:	39 c1       	rjmp	.+626    	; 0x1168 <__fp_szero>
     ef6:	f3 c0       	rjmp	.+486    	; 0x10de <__fp_nan>

00000ef8 <__divsf3x>:
     ef8:	14 d1       	rcall	.+552    	; 0x1122 <__fp_split3>
     efa:	98 f3       	brcs	.-26     	; 0xee2 <__divsf3+0x4>

00000efc <__divsf3_pse>:
     efc:	99 23       	and	r25, r25
     efe:	c9 f3       	breq	.-14     	; 0xef2 <__divsf3+0x14>
     f00:	55 23       	and	r21, r21
     f02:	b1 f3       	breq	.-20     	; 0xef0 <__divsf3+0x12>
     f04:	95 1b       	sub	r25, r21
     f06:	55 0b       	sbc	r21, r21
     f08:	bb 27       	eor	r27, r27
     f0a:	aa 27       	eor	r26, r26
     f0c:	62 17       	cp	r22, r18
     f0e:	73 07       	cpc	r23, r19
     f10:	84 07       	cpc	r24, r20
     f12:	38 f0       	brcs	.+14     	; 0xf22 <__divsf3_pse+0x26>
     f14:	9f 5f       	subi	r25, 0xFF	; 255
     f16:	5f 4f       	sbci	r21, 0xFF	; 255
     f18:	22 0f       	add	r18, r18
     f1a:	33 1f       	adc	r19, r19
     f1c:	44 1f       	adc	r20, r20
     f1e:	aa 1f       	adc	r26, r26
     f20:	a9 f3       	breq	.-22     	; 0xf0c <__divsf3_pse+0x10>
     f22:	33 d0       	rcall	.+102    	; 0xf8a <__divsf3_pse+0x8e>
     f24:	0e 2e       	mov	r0, r30
     f26:	3a f0       	brmi	.+14     	; 0xf36 <__divsf3_pse+0x3a>
     f28:	e0 e8       	ldi	r30, 0x80	; 128
     f2a:	30 d0       	rcall	.+96     	; 0xf8c <__divsf3_pse+0x90>
     f2c:	91 50       	subi	r25, 0x01	; 1
     f2e:	50 40       	sbci	r21, 0x00	; 0
     f30:	e6 95       	lsr	r30
     f32:	00 1c       	adc	r0, r0
     f34:	ca f7       	brpl	.-14     	; 0xf28 <__divsf3_pse+0x2c>
     f36:	29 d0       	rcall	.+82     	; 0xf8a <__divsf3_pse+0x8e>
     f38:	fe 2f       	mov	r31, r30
     f3a:	27 d0       	rcall	.+78     	; 0xf8a <__divsf3_pse+0x8e>
     f3c:	66 0f       	add	r22, r22
     f3e:	77 1f       	adc	r23, r23
     f40:	88 1f       	adc	r24, r24
     f42:	bb 1f       	adc	r27, r27
     f44:	26 17       	cp	r18, r22
     f46:	37 07       	cpc	r19, r23
     f48:	48 07       	cpc	r20, r24
     f4a:	ab 07       	cpc	r26, r27
     f4c:	b0 e8       	ldi	r27, 0x80	; 128
     f4e:	09 f0       	breq	.+2      	; 0xf52 <__divsf3_pse+0x56>
     f50:	bb 0b       	sbc	r27, r27
     f52:	80 2d       	mov	r24, r0
     f54:	bf 01       	movw	r22, r30
     f56:	ff 27       	eor	r31, r31
     f58:	93 58       	subi	r25, 0x83	; 131
     f5a:	5f 4f       	sbci	r21, 0xFF	; 255
     f5c:	2a f0       	brmi	.+10     	; 0xf68 <__divsf3_pse+0x6c>
     f5e:	9e 3f       	cpi	r25, 0xFE	; 254
     f60:	51 05       	cpc	r21, r1
     f62:	68 f0       	brcs	.+26     	; 0xf7e <__divsf3_pse+0x82>
     f64:	b6 c0       	rjmp	.+364    	; 0x10d2 <__fp_inf>
     f66:	00 c1       	rjmp	.+512    	; 0x1168 <__fp_szero>
     f68:	5f 3f       	cpi	r21, 0xFF	; 255
     f6a:	ec f3       	brlt	.-6      	; 0xf66 <__divsf3_pse+0x6a>
     f6c:	98 3e       	cpi	r25, 0xE8	; 232
     f6e:	dc f3       	brlt	.-10     	; 0xf66 <__divsf3_pse+0x6a>
     f70:	86 95       	lsr	r24
     f72:	77 95       	ror	r23
     f74:	67 95       	ror	r22
     f76:	b7 95       	ror	r27
     f78:	f7 95       	ror	r31
     f7a:	9f 5f       	subi	r25, 0xFF	; 255
     f7c:	c9 f7       	brne	.-14     	; 0xf70 <__divsf3_pse+0x74>
     f7e:	88 0f       	add	r24, r24
     f80:	91 1d       	adc	r25, r1
     f82:	96 95       	lsr	r25
     f84:	87 95       	ror	r24
     f86:	97 f9       	bld	r25, 7
     f88:	08 95       	ret
     f8a:	e1 e0       	ldi	r30, 0x01	; 1
     f8c:	66 0f       	add	r22, r22
     f8e:	77 1f       	adc	r23, r23
     f90:	88 1f       	adc	r24, r24
     f92:	bb 1f       	adc	r27, r27
     f94:	62 17       	cp	r22, r18
     f96:	73 07       	cpc	r23, r19
     f98:	84 07       	cpc	r24, r20
     f9a:	ba 07       	cpc	r27, r26
     f9c:	20 f0       	brcs	.+8      	; 0xfa6 <__divsf3_pse+0xaa>
     f9e:	62 1b       	sub	r22, r18
     fa0:	73 0b       	sbc	r23, r19
     fa2:	84 0b       	sbc	r24, r20
     fa4:	ba 0b       	sbc	r27, r26
     fa6:	ee 1f       	adc	r30, r30
     fa8:	88 f7       	brcc	.-30     	; 0xf8c <__divsf3_pse+0x90>
     faa:	e0 95       	com	r30
     fac:	08 95       	ret

00000fae <__fixsfsi>:
     fae:	04 d0       	rcall	.+8      	; 0xfb8 <__fixunssfsi>
     fb0:	68 94       	set
     fb2:	b1 11       	cpse	r27, r1
     fb4:	d9 c0       	rjmp	.+434    	; 0x1168 <__fp_szero>
     fb6:	08 95       	ret

00000fb8 <__fixunssfsi>:
     fb8:	bc d0       	rcall	.+376    	; 0x1132 <__fp_splitA>
     fba:	88 f0       	brcs	.+34     	; 0xfde <__fixunssfsi+0x26>
     fbc:	9f 57       	subi	r25, 0x7F	; 127
     fbe:	90 f0       	brcs	.+36     	; 0xfe4 <__fixunssfsi+0x2c>
     fc0:	b9 2f       	mov	r27, r25
     fc2:	99 27       	eor	r25, r25
     fc4:	b7 51       	subi	r27, 0x17	; 23
     fc6:	a0 f0       	brcs	.+40     	; 0xff0 <__fixunssfsi+0x38>
     fc8:	d1 f0       	breq	.+52     	; 0xffe <__fixunssfsi+0x46>
     fca:	66 0f       	add	r22, r22
     fcc:	77 1f       	adc	r23, r23
     fce:	88 1f       	adc	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	1a f0       	brmi	.+6      	; 0xfda <__fixunssfsi+0x22>
     fd4:	ba 95       	dec	r27
     fd6:	c9 f7       	brne	.-14     	; 0xfca <__fixunssfsi+0x12>
     fd8:	12 c0       	rjmp	.+36     	; 0xffe <__fixunssfsi+0x46>
     fda:	b1 30       	cpi	r27, 0x01	; 1
     fdc:	81 f0       	breq	.+32     	; 0xffe <__fixunssfsi+0x46>
     fde:	c3 d0       	rcall	.+390    	; 0x1166 <__fp_zero>
     fe0:	b1 e0       	ldi	r27, 0x01	; 1
     fe2:	08 95       	ret
     fe4:	c0 c0       	rjmp	.+384    	; 0x1166 <__fp_zero>
     fe6:	67 2f       	mov	r22, r23
     fe8:	78 2f       	mov	r23, r24
     fea:	88 27       	eor	r24, r24
     fec:	b8 5f       	subi	r27, 0xF8	; 248
     fee:	39 f0       	breq	.+14     	; 0xffe <__fixunssfsi+0x46>
     ff0:	b9 3f       	cpi	r27, 0xF9	; 249
     ff2:	cc f3       	brlt	.-14     	; 0xfe6 <__fixunssfsi+0x2e>
     ff4:	86 95       	lsr	r24
     ff6:	77 95       	ror	r23
     ff8:	67 95       	ror	r22
     ffa:	b3 95       	inc	r27
     ffc:	d9 f7       	brne	.-10     	; 0xff4 <__fixunssfsi+0x3c>
     ffe:	3e f4       	brtc	.+14     	; 0x100e <__fixunssfsi+0x56>
    1000:	90 95       	com	r25
    1002:	80 95       	com	r24
    1004:	70 95       	com	r23
    1006:	61 95       	neg	r22
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	8f 4f       	sbci	r24, 0xFF	; 255
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	08 95       	ret

00001010 <__floatunsisf>:
    1010:	e8 94       	clt
    1012:	09 c0       	rjmp	.+18     	; 0x1026 <__floatsisf+0x12>

00001014 <__floatsisf>:
    1014:	97 fb       	bst	r25, 7
    1016:	3e f4       	brtc	.+14     	; 0x1026 <__floatsisf+0x12>
    1018:	90 95       	com	r25
    101a:	80 95       	com	r24
    101c:	70 95       	com	r23
    101e:	61 95       	neg	r22
    1020:	7f 4f       	sbci	r23, 0xFF	; 255
    1022:	8f 4f       	sbci	r24, 0xFF	; 255
    1024:	9f 4f       	sbci	r25, 0xFF	; 255
    1026:	99 23       	and	r25, r25
    1028:	a9 f0       	breq	.+42     	; 0x1054 <__floatsisf+0x40>
    102a:	f9 2f       	mov	r31, r25
    102c:	96 e9       	ldi	r25, 0x96	; 150
    102e:	bb 27       	eor	r27, r27
    1030:	93 95       	inc	r25
    1032:	f6 95       	lsr	r31
    1034:	87 95       	ror	r24
    1036:	77 95       	ror	r23
    1038:	67 95       	ror	r22
    103a:	b7 95       	ror	r27
    103c:	f1 11       	cpse	r31, r1
    103e:	f8 cf       	rjmp	.-16     	; 0x1030 <__floatsisf+0x1c>
    1040:	fa f4       	brpl	.+62     	; 0x1080 <__floatsisf+0x6c>
    1042:	bb 0f       	add	r27, r27
    1044:	11 f4       	brne	.+4      	; 0x104a <__floatsisf+0x36>
    1046:	60 ff       	sbrs	r22, 0
    1048:	1b c0       	rjmp	.+54     	; 0x1080 <__floatsisf+0x6c>
    104a:	6f 5f       	subi	r22, 0xFF	; 255
    104c:	7f 4f       	sbci	r23, 0xFF	; 255
    104e:	8f 4f       	sbci	r24, 0xFF	; 255
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	16 c0       	rjmp	.+44     	; 0x1080 <__floatsisf+0x6c>
    1054:	88 23       	and	r24, r24
    1056:	11 f0       	breq	.+4      	; 0x105c <__floatsisf+0x48>
    1058:	96 e9       	ldi	r25, 0x96	; 150
    105a:	11 c0       	rjmp	.+34     	; 0x107e <__floatsisf+0x6a>
    105c:	77 23       	and	r23, r23
    105e:	21 f0       	breq	.+8      	; 0x1068 <__floatsisf+0x54>
    1060:	9e e8       	ldi	r25, 0x8E	; 142
    1062:	87 2f       	mov	r24, r23
    1064:	76 2f       	mov	r23, r22
    1066:	05 c0       	rjmp	.+10     	; 0x1072 <__floatsisf+0x5e>
    1068:	66 23       	and	r22, r22
    106a:	71 f0       	breq	.+28     	; 0x1088 <__floatsisf+0x74>
    106c:	96 e8       	ldi	r25, 0x86	; 134
    106e:	86 2f       	mov	r24, r22
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	2a f0       	brmi	.+10     	; 0x1080 <__floatsisf+0x6c>
    1076:	9a 95       	dec	r25
    1078:	66 0f       	add	r22, r22
    107a:	77 1f       	adc	r23, r23
    107c:	88 1f       	adc	r24, r24
    107e:	da f7       	brpl	.-10     	; 0x1076 <__floatsisf+0x62>
    1080:	88 0f       	add	r24, r24
    1082:	96 95       	lsr	r25
    1084:	87 95       	ror	r24
    1086:	97 f9       	bld	r25, 7
    1088:	08 95       	ret

0000108a <__fp_cmp>:
    108a:	99 0f       	add	r25, r25
    108c:	00 08       	sbc	r0, r0
    108e:	55 0f       	add	r21, r21
    1090:	aa 0b       	sbc	r26, r26
    1092:	e0 e8       	ldi	r30, 0x80	; 128
    1094:	fe ef       	ldi	r31, 0xFE	; 254
    1096:	16 16       	cp	r1, r22
    1098:	17 06       	cpc	r1, r23
    109a:	e8 07       	cpc	r30, r24
    109c:	f9 07       	cpc	r31, r25
    109e:	c0 f0       	brcs	.+48     	; 0x10d0 <__fp_cmp+0x46>
    10a0:	12 16       	cp	r1, r18
    10a2:	13 06       	cpc	r1, r19
    10a4:	e4 07       	cpc	r30, r20
    10a6:	f5 07       	cpc	r31, r21
    10a8:	98 f0       	brcs	.+38     	; 0x10d0 <__fp_cmp+0x46>
    10aa:	62 1b       	sub	r22, r18
    10ac:	73 0b       	sbc	r23, r19
    10ae:	84 0b       	sbc	r24, r20
    10b0:	95 0b       	sbc	r25, r21
    10b2:	39 f4       	brne	.+14     	; 0x10c2 <__fp_cmp+0x38>
    10b4:	0a 26       	eor	r0, r26
    10b6:	61 f0       	breq	.+24     	; 0x10d0 <__fp_cmp+0x46>
    10b8:	23 2b       	or	r18, r19
    10ba:	24 2b       	or	r18, r20
    10bc:	25 2b       	or	r18, r21
    10be:	21 f4       	brne	.+8      	; 0x10c8 <__fp_cmp+0x3e>
    10c0:	08 95       	ret
    10c2:	0a 26       	eor	r0, r26
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <__fp_cmp+0x3e>
    10c6:	a1 40       	sbci	r26, 0x01	; 1
    10c8:	a6 95       	lsr	r26
    10ca:	8f ef       	ldi	r24, 0xFF	; 255
    10cc:	81 1d       	adc	r24, r1
    10ce:	81 1d       	adc	r24, r1
    10d0:	08 95       	ret

000010d2 <__fp_inf>:
    10d2:	97 f9       	bld	r25, 7
    10d4:	9f 67       	ori	r25, 0x7F	; 127
    10d6:	80 e8       	ldi	r24, 0x80	; 128
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	08 95       	ret

000010de <__fp_nan>:
    10de:	9f ef       	ldi	r25, 0xFF	; 255
    10e0:	80 ec       	ldi	r24, 0xC0	; 192
    10e2:	08 95       	ret

000010e4 <__fp_pscA>:
    10e4:	00 24       	eor	r0, r0
    10e6:	0a 94       	dec	r0
    10e8:	16 16       	cp	r1, r22
    10ea:	17 06       	cpc	r1, r23
    10ec:	18 06       	cpc	r1, r24
    10ee:	09 06       	cpc	r0, r25
    10f0:	08 95       	ret

000010f2 <__fp_pscB>:
    10f2:	00 24       	eor	r0, r0
    10f4:	0a 94       	dec	r0
    10f6:	12 16       	cp	r1, r18
    10f8:	13 06       	cpc	r1, r19
    10fa:	14 06       	cpc	r1, r20
    10fc:	05 06       	cpc	r0, r21
    10fe:	08 95       	ret

00001100 <__fp_round>:
    1100:	09 2e       	mov	r0, r25
    1102:	03 94       	inc	r0
    1104:	00 0c       	add	r0, r0
    1106:	11 f4       	brne	.+4      	; 0x110c <__fp_round+0xc>
    1108:	88 23       	and	r24, r24
    110a:	52 f0       	brmi	.+20     	; 0x1120 <__fp_round+0x20>
    110c:	bb 0f       	add	r27, r27
    110e:	40 f4       	brcc	.+16     	; 0x1120 <__fp_round+0x20>
    1110:	bf 2b       	or	r27, r31
    1112:	11 f4       	brne	.+4      	; 0x1118 <__fp_round+0x18>
    1114:	60 ff       	sbrs	r22, 0
    1116:	04 c0       	rjmp	.+8      	; 0x1120 <__fp_round+0x20>
    1118:	6f 5f       	subi	r22, 0xFF	; 255
    111a:	7f 4f       	sbci	r23, 0xFF	; 255
    111c:	8f 4f       	sbci	r24, 0xFF	; 255
    111e:	9f 4f       	sbci	r25, 0xFF	; 255
    1120:	08 95       	ret

00001122 <__fp_split3>:
    1122:	57 fd       	sbrc	r21, 7
    1124:	90 58       	subi	r25, 0x80	; 128
    1126:	44 0f       	add	r20, r20
    1128:	55 1f       	adc	r21, r21
    112a:	59 f0       	breq	.+22     	; 0x1142 <__fp_splitA+0x10>
    112c:	5f 3f       	cpi	r21, 0xFF	; 255
    112e:	71 f0       	breq	.+28     	; 0x114c <__fp_splitA+0x1a>
    1130:	47 95       	ror	r20

00001132 <__fp_splitA>:
    1132:	88 0f       	add	r24, r24
    1134:	97 fb       	bst	r25, 7
    1136:	99 1f       	adc	r25, r25
    1138:	61 f0       	breq	.+24     	; 0x1152 <__fp_splitA+0x20>
    113a:	9f 3f       	cpi	r25, 0xFF	; 255
    113c:	79 f0       	breq	.+30     	; 0x115c <__fp_splitA+0x2a>
    113e:	87 95       	ror	r24
    1140:	08 95       	ret
    1142:	12 16       	cp	r1, r18
    1144:	13 06       	cpc	r1, r19
    1146:	14 06       	cpc	r1, r20
    1148:	55 1f       	adc	r21, r21
    114a:	f2 cf       	rjmp	.-28     	; 0x1130 <__fp_split3+0xe>
    114c:	46 95       	lsr	r20
    114e:	f1 df       	rcall	.-30     	; 0x1132 <__fp_splitA>
    1150:	08 c0       	rjmp	.+16     	; 0x1162 <__fp_splitA+0x30>
    1152:	16 16       	cp	r1, r22
    1154:	17 06       	cpc	r1, r23
    1156:	18 06       	cpc	r1, r24
    1158:	99 1f       	adc	r25, r25
    115a:	f1 cf       	rjmp	.-30     	; 0x113e <__fp_splitA+0xc>
    115c:	86 95       	lsr	r24
    115e:	71 05       	cpc	r23, r1
    1160:	61 05       	cpc	r22, r1
    1162:	08 94       	sec
    1164:	08 95       	ret

00001166 <__fp_zero>:
    1166:	e8 94       	clt

00001168 <__fp_szero>:
    1168:	bb 27       	eor	r27, r27
    116a:	66 27       	eor	r22, r22
    116c:	77 27       	eor	r23, r23
    116e:	cb 01       	movw	r24, r22
    1170:	97 f9       	bld	r25, 7
    1172:	08 95       	ret

00001174 <__gesf2>:
    1174:	8a df       	rcall	.-236    	; 0x108a <__fp_cmp>
    1176:	08 f4       	brcc	.+2      	; 0x117a <__gesf2+0x6>
    1178:	8f ef       	ldi	r24, 0xFF	; 255
    117a:	08 95       	ret

0000117c <__mulsf3>:
    117c:	0b d0       	rcall	.+22     	; 0x1194 <__mulsf3x>
    117e:	c0 cf       	rjmp	.-128    	; 0x1100 <__fp_round>
    1180:	b1 df       	rcall	.-158    	; 0x10e4 <__fp_pscA>
    1182:	28 f0       	brcs	.+10     	; 0x118e <__mulsf3+0x12>
    1184:	b6 df       	rcall	.-148    	; 0x10f2 <__fp_pscB>
    1186:	18 f0       	brcs	.+6      	; 0x118e <__mulsf3+0x12>
    1188:	95 23       	and	r25, r21
    118a:	09 f0       	breq	.+2      	; 0x118e <__mulsf3+0x12>
    118c:	a2 cf       	rjmp	.-188    	; 0x10d2 <__fp_inf>
    118e:	a7 cf       	rjmp	.-178    	; 0x10de <__fp_nan>
    1190:	11 24       	eor	r1, r1
    1192:	ea cf       	rjmp	.-44     	; 0x1168 <__fp_szero>

00001194 <__mulsf3x>:
    1194:	c6 df       	rcall	.-116    	; 0x1122 <__fp_split3>
    1196:	a0 f3       	brcs	.-24     	; 0x1180 <__mulsf3+0x4>

00001198 <__mulsf3_pse>:
    1198:	95 9f       	mul	r25, r21
    119a:	d1 f3       	breq	.-12     	; 0x1190 <__mulsf3+0x14>
    119c:	95 0f       	add	r25, r21
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	55 1f       	adc	r21, r21
    11a2:	62 9f       	mul	r22, r18
    11a4:	f0 01       	movw	r30, r0
    11a6:	72 9f       	mul	r23, r18
    11a8:	bb 27       	eor	r27, r27
    11aa:	f0 0d       	add	r31, r0
    11ac:	b1 1d       	adc	r27, r1
    11ae:	63 9f       	mul	r22, r19
    11b0:	aa 27       	eor	r26, r26
    11b2:	f0 0d       	add	r31, r0
    11b4:	b1 1d       	adc	r27, r1
    11b6:	aa 1f       	adc	r26, r26
    11b8:	64 9f       	mul	r22, r20
    11ba:	66 27       	eor	r22, r22
    11bc:	b0 0d       	add	r27, r0
    11be:	a1 1d       	adc	r26, r1
    11c0:	66 1f       	adc	r22, r22
    11c2:	82 9f       	mul	r24, r18
    11c4:	22 27       	eor	r18, r18
    11c6:	b0 0d       	add	r27, r0
    11c8:	a1 1d       	adc	r26, r1
    11ca:	62 1f       	adc	r22, r18
    11cc:	73 9f       	mul	r23, r19
    11ce:	b0 0d       	add	r27, r0
    11d0:	a1 1d       	adc	r26, r1
    11d2:	62 1f       	adc	r22, r18
    11d4:	83 9f       	mul	r24, r19
    11d6:	a0 0d       	add	r26, r0
    11d8:	61 1d       	adc	r22, r1
    11da:	22 1f       	adc	r18, r18
    11dc:	74 9f       	mul	r23, r20
    11de:	33 27       	eor	r19, r19
    11e0:	a0 0d       	add	r26, r0
    11e2:	61 1d       	adc	r22, r1
    11e4:	23 1f       	adc	r18, r19
    11e6:	84 9f       	mul	r24, r20
    11e8:	60 0d       	add	r22, r0
    11ea:	21 1d       	adc	r18, r1
    11ec:	82 2f       	mov	r24, r18
    11ee:	76 2f       	mov	r23, r22
    11f0:	6a 2f       	mov	r22, r26
    11f2:	11 24       	eor	r1, r1
    11f4:	9f 57       	subi	r25, 0x7F	; 127
    11f6:	50 40       	sbci	r21, 0x00	; 0
    11f8:	8a f0       	brmi	.+34     	; 0x121c <__mulsf3_pse+0x84>
    11fa:	e1 f0       	breq	.+56     	; 0x1234 <__mulsf3_pse+0x9c>
    11fc:	88 23       	and	r24, r24
    11fe:	4a f0       	brmi	.+18     	; 0x1212 <__mulsf3_pse+0x7a>
    1200:	ee 0f       	add	r30, r30
    1202:	ff 1f       	adc	r31, r31
    1204:	bb 1f       	adc	r27, r27
    1206:	66 1f       	adc	r22, r22
    1208:	77 1f       	adc	r23, r23
    120a:	88 1f       	adc	r24, r24
    120c:	91 50       	subi	r25, 0x01	; 1
    120e:	50 40       	sbci	r21, 0x00	; 0
    1210:	a9 f7       	brne	.-22     	; 0x11fc <__mulsf3_pse+0x64>
    1212:	9e 3f       	cpi	r25, 0xFE	; 254
    1214:	51 05       	cpc	r21, r1
    1216:	70 f0       	brcs	.+28     	; 0x1234 <__mulsf3_pse+0x9c>
    1218:	5c cf       	rjmp	.-328    	; 0x10d2 <__fp_inf>
    121a:	a6 cf       	rjmp	.-180    	; 0x1168 <__fp_szero>
    121c:	5f 3f       	cpi	r21, 0xFF	; 255
    121e:	ec f3       	brlt	.-6      	; 0x121a <__mulsf3_pse+0x82>
    1220:	98 3e       	cpi	r25, 0xE8	; 232
    1222:	dc f3       	brlt	.-10     	; 0x121a <__mulsf3_pse+0x82>
    1224:	86 95       	lsr	r24
    1226:	77 95       	ror	r23
    1228:	67 95       	ror	r22
    122a:	b7 95       	ror	r27
    122c:	f7 95       	ror	r31
    122e:	e7 95       	ror	r30
    1230:	9f 5f       	subi	r25, 0xFF	; 255
    1232:	c1 f7       	brne	.-16     	; 0x1224 <__mulsf3_pse+0x8c>
    1234:	fe 2b       	or	r31, r30
    1236:	88 0f       	add	r24, r24
    1238:	91 1d       	adc	r25, r1
    123a:	96 95       	lsr	r25
    123c:	87 95       	ror	r24
    123e:	97 f9       	bld	r25, 7
    1240:	08 95       	ret

00001242 <printf>:
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	fe 01       	movw	r30, r28
    124c:	36 96       	adiw	r30, 0x06	; 6
    124e:	61 91       	ld	r22, Z+
    1250:	71 91       	ld	r23, Z+
    1252:	af 01       	movw	r20, r30
    1254:	80 91 68 02 	lds	r24, 0x0268
    1258:	90 91 69 02 	lds	r25, 0x0269
    125c:	03 d0       	rcall	.+6      	; 0x1264 <vfprintf>
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret

00001264 <vfprintf>:
    1264:	2f 92       	push	r2
    1266:	3f 92       	push	r3
    1268:	4f 92       	push	r4
    126a:	5f 92       	push	r5
    126c:	6f 92       	push	r6
    126e:	7f 92       	push	r7
    1270:	8f 92       	push	r8
    1272:	9f 92       	push	r9
    1274:	af 92       	push	r10
    1276:	bf 92       	push	r11
    1278:	cf 92       	push	r12
    127a:	df 92       	push	r13
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	2c 97       	sbiw	r28, 0x0c	; 12
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	7c 01       	movw	r14, r24
    129a:	6b 01       	movw	r12, r22
    129c:	8a 01       	movw	r16, r20
    129e:	fc 01       	movw	r30, r24
    12a0:	17 82       	std	Z+7, r1	; 0x07
    12a2:	16 82       	std	Z+6, r1	; 0x06
    12a4:	83 81       	ldd	r24, Z+3	; 0x03
    12a6:	81 ff       	sbrs	r24, 1
    12a8:	b0 c1       	rjmp	.+864    	; 0x160a <vfprintf+0x3a6>
    12aa:	ce 01       	movw	r24, r28
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	4c 01       	movw	r8, r24
    12b0:	f7 01       	movw	r30, r14
    12b2:	93 81       	ldd	r25, Z+3	; 0x03
    12b4:	f6 01       	movw	r30, r12
    12b6:	93 fd       	sbrc	r25, 3
    12b8:	85 91       	lpm	r24, Z+
    12ba:	93 ff       	sbrs	r25, 3
    12bc:	81 91       	ld	r24, Z+
    12be:	6f 01       	movw	r12, r30
    12c0:	88 23       	and	r24, r24
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <vfprintf+0x62>
    12c4:	9e c1       	rjmp	.+828    	; 0x1602 <vfprintf+0x39e>
    12c6:	85 32       	cpi	r24, 0x25	; 37
    12c8:	39 f4       	brne	.+14     	; 0x12d8 <vfprintf+0x74>
    12ca:	93 fd       	sbrc	r25, 3
    12cc:	85 91       	lpm	r24, Z+
    12ce:	93 ff       	sbrs	r25, 3
    12d0:	81 91       	ld	r24, Z+
    12d2:	6f 01       	movw	r12, r30
    12d4:	85 32       	cpi	r24, 0x25	; 37
    12d6:	21 f4       	brne	.+8      	; 0x12e0 <vfprintf+0x7c>
    12d8:	b7 01       	movw	r22, r14
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	c7 d1       	rcall	.+910    	; 0x166c <fputc>
    12de:	e8 cf       	rjmp	.-48     	; 0x12b0 <vfprintf+0x4c>
    12e0:	51 2c       	mov	r5, r1
    12e2:	31 2c       	mov	r3, r1
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	20 32       	cpi	r18, 0x20	; 32
    12e8:	a0 f4       	brcc	.+40     	; 0x1312 <vfprintf+0xae>
    12ea:	8b 32       	cpi	r24, 0x2B	; 43
    12ec:	69 f0       	breq	.+26     	; 0x1308 <vfprintf+0xa4>
    12ee:	30 f4       	brcc	.+12     	; 0x12fc <vfprintf+0x98>
    12f0:	80 32       	cpi	r24, 0x20	; 32
    12f2:	59 f0       	breq	.+22     	; 0x130a <vfprintf+0xa6>
    12f4:	83 32       	cpi	r24, 0x23	; 35
    12f6:	69 f4       	brne	.+26     	; 0x1312 <vfprintf+0xae>
    12f8:	20 61       	ori	r18, 0x10	; 16
    12fa:	2c c0       	rjmp	.+88     	; 0x1354 <vfprintf+0xf0>
    12fc:	8d 32       	cpi	r24, 0x2D	; 45
    12fe:	39 f0       	breq	.+14     	; 0x130e <vfprintf+0xaa>
    1300:	80 33       	cpi	r24, 0x30	; 48
    1302:	39 f4       	brne	.+14     	; 0x1312 <vfprintf+0xae>
    1304:	21 60       	ori	r18, 0x01	; 1
    1306:	26 c0       	rjmp	.+76     	; 0x1354 <vfprintf+0xf0>
    1308:	22 60       	ori	r18, 0x02	; 2
    130a:	24 60       	ori	r18, 0x04	; 4
    130c:	23 c0       	rjmp	.+70     	; 0x1354 <vfprintf+0xf0>
    130e:	28 60       	ori	r18, 0x08	; 8
    1310:	21 c0       	rjmp	.+66     	; 0x1354 <vfprintf+0xf0>
    1312:	27 fd       	sbrc	r18, 7
    1314:	27 c0       	rjmp	.+78     	; 0x1364 <vfprintf+0x100>
    1316:	30 ed       	ldi	r19, 0xD0	; 208
    1318:	38 0f       	add	r19, r24
    131a:	3a 30       	cpi	r19, 0x0A	; 10
    131c:	78 f4       	brcc	.+30     	; 0x133c <vfprintf+0xd8>
    131e:	26 ff       	sbrs	r18, 6
    1320:	06 c0       	rjmp	.+12     	; 0x132e <vfprintf+0xca>
    1322:	fa e0       	ldi	r31, 0x0A	; 10
    1324:	5f 9e       	mul	r5, r31
    1326:	30 0d       	add	r19, r0
    1328:	11 24       	eor	r1, r1
    132a:	53 2e       	mov	r5, r19
    132c:	13 c0       	rjmp	.+38     	; 0x1354 <vfprintf+0xf0>
    132e:	8a e0       	ldi	r24, 0x0A	; 10
    1330:	38 9e       	mul	r3, r24
    1332:	30 0d       	add	r19, r0
    1334:	11 24       	eor	r1, r1
    1336:	33 2e       	mov	r3, r19
    1338:	20 62       	ori	r18, 0x20	; 32
    133a:	0c c0       	rjmp	.+24     	; 0x1354 <vfprintf+0xf0>
    133c:	8e 32       	cpi	r24, 0x2E	; 46
    133e:	21 f4       	brne	.+8      	; 0x1348 <vfprintf+0xe4>
    1340:	26 fd       	sbrc	r18, 6
    1342:	5f c1       	rjmp	.+702    	; 0x1602 <vfprintf+0x39e>
    1344:	20 64       	ori	r18, 0x40	; 64
    1346:	06 c0       	rjmp	.+12     	; 0x1354 <vfprintf+0xf0>
    1348:	8c 36       	cpi	r24, 0x6C	; 108
    134a:	11 f4       	brne	.+4      	; 0x1350 <vfprintf+0xec>
    134c:	20 68       	ori	r18, 0x80	; 128
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <vfprintf+0xf0>
    1350:	88 36       	cpi	r24, 0x68	; 104
    1352:	41 f4       	brne	.+16     	; 0x1364 <vfprintf+0x100>
    1354:	f6 01       	movw	r30, r12
    1356:	93 fd       	sbrc	r25, 3
    1358:	85 91       	lpm	r24, Z+
    135a:	93 ff       	sbrs	r25, 3
    135c:	81 91       	ld	r24, Z+
    135e:	6f 01       	movw	r12, r30
    1360:	81 11       	cpse	r24, r1
    1362:	c1 cf       	rjmp	.-126    	; 0x12e6 <vfprintf+0x82>
    1364:	98 2f       	mov	r25, r24
    1366:	9f 7d       	andi	r25, 0xDF	; 223
    1368:	95 54       	subi	r25, 0x45	; 69
    136a:	93 30       	cpi	r25, 0x03	; 3
    136c:	28 f4       	brcc	.+10     	; 0x1378 <vfprintf+0x114>
    136e:	0c 5f       	subi	r16, 0xFC	; 252
    1370:	1f 4f       	sbci	r17, 0xFF	; 255
    1372:	ff e3       	ldi	r31, 0x3F	; 63
    1374:	f9 83       	std	Y+1, r31	; 0x01
    1376:	0d c0       	rjmp	.+26     	; 0x1392 <vfprintf+0x12e>
    1378:	83 36       	cpi	r24, 0x63	; 99
    137a:	31 f0       	breq	.+12     	; 0x1388 <vfprintf+0x124>
    137c:	83 37       	cpi	r24, 0x73	; 115
    137e:	71 f0       	breq	.+28     	; 0x139c <vfprintf+0x138>
    1380:	83 35       	cpi	r24, 0x53	; 83
    1382:	09 f0       	breq	.+2      	; 0x1386 <vfprintf+0x122>
    1384:	57 c0       	rjmp	.+174    	; 0x1434 <vfprintf+0x1d0>
    1386:	21 c0       	rjmp	.+66     	; 0x13ca <vfprintf+0x166>
    1388:	f8 01       	movw	r30, r16
    138a:	80 81       	ld	r24, Z
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	0e 5f       	subi	r16, 0xFE	; 254
    1390:	1f 4f       	sbci	r17, 0xFF	; 255
    1392:	44 24       	eor	r4, r4
    1394:	43 94       	inc	r4
    1396:	51 2c       	mov	r5, r1
    1398:	54 01       	movw	r10, r8
    139a:	14 c0       	rjmp	.+40     	; 0x13c4 <vfprintf+0x160>
    139c:	38 01       	movw	r6, r16
    139e:	f2 e0       	ldi	r31, 0x02	; 2
    13a0:	6f 0e       	add	r6, r31
    13a2:	71 1c       	adc	r7, r1
    13a4:	f8 01       	movw	r30, r16
    13a6:	a0 80       	ld	r10, Z
    13a8:	b1 80       	ldd	r11, Z+1	; 0x01
    13aa:	26 ff       	sbrs	r18, 6
    13ac:	03 c0       	rjmp	.+6      	; 0x13b4 <vfprintf+0x150>
    13ae:	65 2d       	mov	r22, r5
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <vfprintf+0x154>
    13b4:	6f ef       	ldi	r22, 0xFF	; 255
    13b6:	7f ef       	ldi	r23, 0xFF	; 255
    13b8:	c5 01       	movw	r24, r10
    13ba:	2c 87       	std	Y+12, r18	; 0x0c
    13bc:	4c d1       	rcall	.+664    	; 0x1656 <strnlen>
    13be:	2c 01       	movw	r4, r24
    13c0:	83 01       	movw	r16, r6
    13c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    13c4:	2f 77       	andi	r18, 0x7F	; 127
    13c6:	22 2e       	mov	r2, r18
    13c8:	16 c0       	rjmp	.+44     	; 0x13f6 <vfprintf+0x192>
    13ca:	38 01       	movw	r6, r16
    13cc:	f2 e0       	ldi	r31, 0x02	; 2
    13ce:	6f 0e       	add	r6, r31
    13d0:	71 1c       	adc	r7, r1
    13d2:	f8 01       	movw	r30, r16
    13d4:	a0 80       	ld	r10, Z
    13d6:	b1 80       	ldd	r11, Z+1	; 0x01
    13d8:	26 ff       	sbrs	r18, 6
    13da:	03 c0       	rjmp	.+6      	; 0x13e2 <vfprintf+0x17e>
    13dc:	65 2d       	mov	r22, r5
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <vfprintf+0x182>
    13e2:	6f ef       	ldi	r22, 0xFF	; 255
    13e4:	7f ef       	ldi	r23, 0xFF	; 255
    13e6:	c5 01       	movw	r24, r10
    13e8:	2c 87       	std	Y+12, r18	; 0x0c
    13ea:	2a d1       	rcall	.+596    	; 0x1640 <strnlen_P>
    13ec:	2c 01       	movw	r4, r24
    13ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    13f0:	20 68       	ori	r18, 0x80	; 128
    13f2:	22 2e       	mov	r2, r18
    13f4:	83 01       	movw	r16, r6
    13f6:	23 fc       	sbrc	r2, 3
    13f8:	19 c0       	rjmp	.+50     	; 0x142c <vfprintf+0x1c8>
    13fa:	83 2d       	mov	r24, r3
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	48 16       	cp	r4, r24
    1400:	59 06       	cpc	r5, r25
    1402:	a0 f4       	brcc	.+40     	; 0x142c <vfprintf+0x1c8>
    1404:	b7 01       	movw	r22, r14
    1406:	80 e2       	ldi	r24, 0x20	; 32
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	30 d1       	rcall	.+608    	; 0x166c <fputc>
    140c:	3a 94       	dec	r3
    140e:	f5 cf       	rjmp	.-22     	; 0x13fa <vfprintf+0x196>
    1410:	f5 01       	movw	r30, r10
    1412:	27 fc       	sbrc	r2, 7
    1414:	85 91       	lpm	r24, Z+
    1416:	27 fe       	sbrs	r2, 7
    1418:	81 91       	ld	r24, Z+
    141a:	5f 01       	movw	r10, r30
    141c:	b7 01       	movw	r22, r14
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	25 d1       	rcall	.+586    	; 0x166c <fputc>
    1422:	31 10       	cpse	r3, r1
    1424:	3a 94       	dec	r3
    1426:	f1 e0       	ldi	r31, 0x01	; 1
    1428:	4f 1a       	sub	r4, r31
    142a:	51 08       	sbc	r5, r1
    142c:	41 14       	cp	r4, r1
    142e:	51 04       	cpc	r5, r1
    1430:	79 f7       	brne	.-34     	; 0x1410 <vfprintf+0x1ac>
    1432:	de c0       	rjmp	.+444    	; 0x15f0 <vfprintf+0x38c>
    1434:	84 36       	cpi	r24, 0x64	; 100
    1436:	11 f0       	breq	.+4      	; 0x143c <vfprintf+0x1d8>
    1438:	89 36       	cpi	r24, 0x69	; 105
    143a:	31 f5       	brne	.+76     	; 0x1488 <vfprintf+0x224>
    143c:	f8 01       	movw	r30, r16
    143e:	27 ff       	sbrs	r18, 7
    1440:	07 c0       	rjmp	.+14     	; 0x1450 <vfprintf+0x1ec>
    1442:	60 81       	ld	r22, Z
    1444:	71 81       	ldd	r23, Z+1	; 0x01
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	0c 5f       	subi	r16, 0xFC	; 252
    144c:	1f 4f       	sbci	r17, 0xFF	; 255
    144e:	08 c0       	rjmp	.+16     	; 0x1460 <vfprintf+0x1fc>
    1450:	60 81       	ld	r22, Z
    1452:	71 81       	ldd	r23, Z+1	; 0x01
    1454:	88 27       	eor	r24, r24
    1456:	77 fd       	sbrc	r23, 7
    1458:	80 95       	com	r24
    145a:	98 2f       	mov	r25, r24
    145c:	0e 5f       	subi	r16, 0xFE	; 254
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	2f 76       	andi	r18, 0x6F	; 111
    1462:	b2 2e       	mov	r11, r18
    1464:	97 ff       	sbrs	r25, 7
    1466:	09 c0       	rjmp	.+18     	; 0x147a <vfprintf+0x216>
    1468:	90 95       	com	r25
    146a:	80 95       	com	r24
    146c:	70 95       	com	r23
    146e:	61 95       	neg	r22
    1470:	7f 4f       	sbci	r23, 0xFF	; 255
    1472:	8f 4f       	sbci	r24, 0xFF	; 255
    1474:	9f 4f       	sbci	r25, 0xFF	; 255
    1476:	20 68       	ori	r18, 0x80	; 128
    1478:	b2 2e       	mov	r11, r18
    147a:	2a e0       	ldi	r18, 0x0A	; 10
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	a4 01       	movw	r20, r8
    1480:	27 d1       	rcall	.+590    	; 0x16d0 <__ultoa_invert>
    1482:	a8 2e       	mov	r10, r24
    1484:	a8 18       	sub	r10, r8
    1486:	43 c0       	rjmp	.+134    	; 0x150e <vfprintf+0x2aa>
    1488:	85 37       	cpi	r24, 0x75	; 117
    148a:	29 f4       	brne	.+10     	; 0x1496 <vfprintf+0x232>
    148c:	2f 7e       	andi	r18, 0xEF	; 239
    148e:	b2 2e       	mov	r11, r18
    1490:	2a e0       	ldi	r18, 0x0A	; 10
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	25 c0       	rjmp	.+74     	; 0x14e0 <vfprintf+0x27c>
    1496:	f2 2f       	mov	r31, r18
    1498:	f9 7f       	andi	r31, 0xF9	; 249
    149a:	bf 2e       	mov	r11, r31
    149c:	8f 36       	cpi	r24, 0x6F	; 111
    149e:	c1 f0       	breq	.+48     	; 0x14d0 <vfprintf+0x26c>
    14a0:	18 f4       	brcc	.+6      	; 0x14a8 <vfprintf+0x244>
    14a2:	88 35       	cpi	r24, 0x58	; 88
    14a4:	79 f0       	breq	.+30     	; 0x14c4 <vfprintf+0x260>
    14a6:	ad c0       	rjmp	.+346    	; 0x1602 <vfprintf+0x39e>
    14a8:	80 37       	cpi	r24, 0x70	; 112
    14aa:	19 f0       	breq	.+6      	; 0x14b2 <vfprintf+0x24e>
    14ac:	88 37       	cpi	r24, 0x78	; 120
    14ae:	21 f0       	breq	.+8      	; 0x14b8 <vfprintf+0x254>
    14b0:	a8 c0       	rjmp	.+336    	; 0x1602 <vfprintf+0x39e>
    14b2:	2f 2f       	mov	r18, r31
    14b4:	20 61       	ori	r18, 0x10	; 16
    14b6:	b2 2e       	mov	r11, r18
    14b8:	b4 fe       	sbrs	r11, 4
    14ba:	0d c0       	rjmp	.+26     	; 0x14d6 <vfprintf+0x272>
    14bc:	8b 2d       	mov	r24, r11
    14be:	84 60       	ori	r24, 0x04	; 4
    14c0:	b8 2e       	mov	r11, r24
    14c2:	09 c0       	rjmp	.+18     	; 0x14d6 <vfprintf+0x272>
    14c4:	24 ff       	sbrs	r18, 4
    14c6:	0a c0       	rjmp	.+20     	; 0x14dc <vfprintf+0x278>
    14c8:	9f 2f       	mov	r25, r31
    14ca:	96 60       	ori	r25, 0x06	; 6
    14cc:	b9 2e       	mov	r11, r25
    14ce:	06 c0       	rjmp	.+12     	; 0x14dc <vfprintf+0x278>
    14d0:	28 e0       	ldi	r18, 0x08	; 8
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	05 c0       	rjmp	.+10     	; 0x14e0 <vfprintf+0x27c>
    14d6:	20 e1       	ldi	r18, 0x10	; 16
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <vfprintf+0x27c>
    14dc:	20 e1       	ldi	r18, 0x10	; 16
    14de:	32 e0       	ldi	r19, 0x02	; 2
    14e0:	f8 01       	movw	r30, r16
    14e2:	b7 fe       	sbrs	r11, 7
    14e4:	07 c0       	rjmp	.+14     	; 0x14f4 <vfprintf+0x290>
    14e6:	60 81       	ld	r22, Z
    14e8:	71 81       	ldd	r23, Z+1	; 0x01
    14ea:	82 81       	ldd	r24, Z+2	; 0x02
    14ec:	93 81       	ldd	r25, Z+3	; 0x03
    14ee:	0c 5f       	subi	r16, 0xFC	; 252
    14f0:	1f 4f       	sbci	r17, 0xFF	; 255
    14f2:	06 c0       	rjmp	.+12     	; 0x1500 <vfprintf+0x29c>
    14f4:	60 81       	ld	r22, Z
    14f6:	71 81       	ldd	r23, Z+1	; 0x01
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 5f       	subi	r16, 0xFE	; 254
    14fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1500:	a4 01       	movw	r20, r8
    1502:	e6 d0       	rcall	.+460    	; 0x16d0 <__ultoa_invert>
    1504:	a8 2e       	mov	r10, r24
    1506:	a8 18       	sub	r10, r8
    1508:	fb 2d       	mov	r31, r11
    150a:	ff 77       	andi	r31, 0x7F	; 127
    150c:	bf 2e       	mov	r11, r31
    150e:	b6 fe       	sbrs	r11, 6
    1510:	0b c0       	rjmp	.+22     	; 0x1528 <vfprintf+0x2c4>
    1512:	2b 2d       	mov	r18, r11
    1514:	2e 7f       	andi	r18, 0xFE	; 254
    1516:	a5 14       	cp	r10, r5
    1518:	50 f4       	brcc	.+20     	; 0x152e <vfprintf+0x2ca>
    151a:	b4 fe       	sbrs	r11, 4
    151c:	0a c0       	rjmp	.+20     	; 0x1532 <vfprintf+0x2ce>
    151e:	b2 fc       	sbrc	r11, 2
    1520:	08 c0       	rjmp	.+16     	; 0x1532 <vfprintf+0x2ce>
    1522:	2b 2d       	mov	r18, r11
    1524:	2e 7e       	andi	r18, 0xEE	; 238
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <vfprintf+0x2ce>
    1528:	7a 2c       	mov	r7, r10
    152a:	2b 2d       	mov	r18, r11
    152c:	03 c0       	rjmp	.+6      	; 0x1534 <vfprintf+0x2d0>
    152e:	7a 2c       	mov	r7, r10
    1530:	01 c0       	rjmp	.+2      	; 0x1534 <vfprintf+0x2d0>
    1532:	75 2c       	mov	r7, r5
    1534:	24 ff       	sbrs	r18, 4
    1536:	0d c0       	rjmp	.+26     	; 0x1552 <vfprintf+0x2ee>
    1538:	fe 01       	movw	r30, r28
    153a:	ea 0d       	add	r30, r10
    153c:	f1 1d       	adc	r31, r1
    153e:	80 81       	ld	r24, Z
    1540:	80 33       	cpi	r24, 0x30	; 48
    1542:	11 f4       	brne	.+4      	; 0x1548 <vfprintf+0x2e4>
    1544:	29 7e       	andi	r18, 0xE9	; 233
    1546:	09 c0       	rjmp	.+18     	; 0x155a <vfprintf+0x2f6>
    1548:	22 ff       	sbrs	r18, 2
    154a:	06 c0       	rjmp	.+12     	; 0x1558 <vfprintf+0x2f4>
    154c:	73 94       	inc	r7
    154e:	73 94       	inc	r7
    1550:	04 c0       	rjmp	.+8      	; 0x155a <vfprintf+0x2f6>
    1552:	82 2f       	mov	r24, r18
    1554:	86 78       	andi	r24, 0x86	; 134
    1556:	09 f0       	breq	.+2      	; 0x155a <vfprintf+0x2f6>
    1558:	73 94       	inc	r7
    155a:	23 fd       	sbrc	r18, 3
    155c:	12 c0       	rjmp	.+36     	; 0x1582 <vfprintf+0x31e>
    155e:	20 ff       	sbrs	r18, 0
    1560:	06 c0       	rjmp	.+12     	; 0x156e <vfprintf+0x30a>
    1562:	5a 2c       	mov	r5, r10
    1564:	73 14       	cp	r7, r3
    1566:	18 f4       	brcc	.+6      	; 0x156e <vfprintf+0x30a>
    1568:	53 0c       	add	r5, r3
    156a:	57 18       	sub	r5, r7
    156c:	73 2c       	mov	r7, r3
    156e:	73 14       	cp	r7, r3
    1570:	60 f4       	brcc	.+24     	; 0x158a <vfprintf+0x326>
    1572:	b7 01       	movw	r22, r14
    1574:	80 e2       	ldi	r24, 0x20	; 32
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	2c 87       	std	Y+12, r18	; 0x0c
    157a:	78 d0       	rcall	.+240    	; 0x166c <fputc>
    157c:	73 94       	inc	r7
    157e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1580:	f6 cf       	rjmp	.-20     	; 0x156e <vfprintf+0x30a>
    1582:	73 14       	cp	r7, r3
    1584:	10 f4       	brcc	.+4      	; 0x158a <vfprintf+0x326>
    1586:	37 18       	sub	r3, r7
    1588:	01 c0       	rjmp	.+2      	; 0x158c <vfprintf+0x328>
    158a:	31 2c       	mov	r3, r1
    158c:	24 ff       	sbrs	r18, 4
    158e:	11 c0       	rjmp	.+34     	; 0x15b2 <vfprintf+0x34e>
    1590:	b7 01       	movw	r22, r14
    1592:	80 e3       	ldi	r24, 0x30	; 48
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	2c 87       	std	Y+12, r18	; 0x0c
    1598:	69 d0       	rcall	.+210    	; 0x166c <fputc>
    159a:	2c 85       	ldd	r18, Y+12	; 0x0c
    159c:	22 ff       	sbrs	r18, 2
    159e:	16 c0       	rjmp	.+44     	; 0x15cc <vfprintf+0x368>
    15a0:	21 ff       	sbrs	r18, 1
    15a2:	03 c0       	rjmp	.+6      	; 0x15aa <vfprintf+0x346>
    15a4:	88 e5       	ldi	r24, 0x58	; 88
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <vfprintf+0x34a>
    15aa:	88 e7       	ldi	r24, 0x78	; 120
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	b7 01       	movw	r22, r14
    15b0:	0c c0       	rjmp	.+24     	; 0x15ca <vfprintf+0x366>
    15b2:	82 2f       	mov	r24, r18
    15b4:	86 78       	andi	r24, 0x86	; 134
    15b6:	51 f0       	breq	.+20     	; 0x15cc <vfprintf+0x368>
    15b8:	21 fd       	sbrc	r18, 1
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <vfprintf+0x35c>
    15bc:	80 e2       	ldi	r24, 0x20	; 32
    15be:	01 c0       	rjmp	.+2      	; 0x15c2 <vfprintf+0x35e>
    15c0:	8b e2       	ldi	r24, 0x2B	; 43
    15c2:	27 fd       	sbrc	r18, 7
    15c4:	8d e2       	ldi	r24, 0x2D	; 45
    15c6:	b7 01       	movw	r22, r14
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	50 d0       	rcall	.+160    	; 0x166c <fputc>
    15cc:	a5 14       	cp	r10, r5
    15ce:	30 f4       	brcc	.+12     	; 0x15dc <vfprintf+0x378>
    15d0:	b7 01       	movw	r22, r14
    15d2:	80 e3       	ldi	r24, 0x30	; 48
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	4a d0       	rcall	.+148    	; 0x166c <fputc>
    15d8:	5a 94       	dec	r5
    15da:	f8 cf       	rjmp	.-16     	; 0x15cc <vfprintf+0x368>
    15dc:	aa 94       	dec	r10
    15de:	f4 01       	movw	r30, r8
    15e0:	ea 0d       	add	r30, r10
    15e2:	f1 1d       	adc	r31, r1
    15e4:	80 81       	ld	r24, Z
    15e6:	b7 01       	movw	r22, r14
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	40 d0       	rcall	.+128    	; 0x166c <fputc>
    15ec:	a1 10       	cpse	r10, r1
    15ee:	f6 cf       	rjmp	.-20     	; 0x15dc <vfprintf+0x378>
    15f0:	33 20       	and	r3, r3
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <vfprintf+0x392>
    15f4:	5d ce       	rjmp	.-838    	; 0x12b0 <vfprintf+0x4c>
    15f6:	b7 01       	movw	r22, r14
    15f8:	80 e2       	ldi	r24, 0x20	; 32
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	37 d0       	rcall	.+110    	; 0x166c <fputc>
    15fe:	3a 94       	dec	r3
    1600:	f7 cf       	rjmp	.-18     	; 0x15f0 <vfprintf+0x38c>
    1602:	f7 01       	movw	r30, r14
    1604:	86 81       	ldd	r24, Z+6	; 0x06
    1606:	97 81       	ldd	r25, Z+7	; 0x07
    1608:	02 c0       	rjmp	.+4      	; 0x160e <vfprintf+0x3aa>
    160a:	8f ef       	ldi	r24, 0xFF	; 255
    160c:	9f ef       	ldi	r25, 0xFF	; 255
    160e:	2c 96       	adiw	r28, 0x0c	; 12
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	ff 90       	pop	r15
    1624:	ef 90       	pop	r14
    1626:	df 90       	pop	r13
    1628:	cf 90       	pop	r12
    162a:	bf 90       	pop	r11
    162c:	af 90       	pop	r10
    162e:	9f 90       	pop	r9
    1630:	8f 90       	pop	r8
    1632:	7f 90       	pop	r7
    1634:	6f 90       	pop	r6
    1636:	5f 90       	pop	r5
    1638:	4f 90       	pop	r4
    163a:	3f 90       	pop	r3
    163c:	2f 90       	pop	r2
    163e:	08 95       	ret

00001640 <strnlen_P>:
    1640:	fc 01       	movw	r30, r24
    1642:	05 90       	lpm	r0, Z+
    1644:	61 50       	subi	r22, 0x01	; 1
    1646:	70 40       	sbci	r23, 0x00	; 0
    1648:	01 10       	cpse	r0, r1
    164a:	d8 f7       	brcc	.-10     	; 0x1642 <strnlen_P+0x2>
    164c:	80 95       	com	r24
    164e:	90 95       	com	r25
    1650:	8e 0f       	add	r24, r30
    1652:	9f 1f       	adc	r25, r31
    1654:	08 95       	ret

00001656 <strnlen>:
    1656:	fc 01       	movw	r30, r24
    1658:	61 50       	subi	r22, 0x01	; 1
    165a:	70 40       	sbci	r23, 0x00	; 0
    165c:	01 90       	ld	r0, Z+
    165e:	01 10       	cpse	r0, r1
    1660:	d8 f7       	brcc	.-10     	; 0x1658 <strnlen+0x2>
    1662:	80 95       	com	r24
    1664:	90 95       	com	r25
    1666:	8e 0f       	add	r24, r30
    1668:	9f 1f       	adc	r25, r31
    166a:	08 95       	ret

0000166c <fputc>:
    166c:	0f 93       	push	r16
    166e:	1f 93       	push	r17
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	18 2f       	mov	r17, r24
    1676:	09 2f       	mov	r16, r25
    1678:	eb 01       	movw	r28, r22
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	81 fd       	sbrc	r24, 1
    167e:	03 c0       	rjmp	.+6      	; 0x1686 <fputc+0x1a>
    1680:	8f ef       	ldi	r24, 0xFF	; 255
    1682:	9f ef       	ldi	r25, 0xFF	; 255
    1684:	20 c0       	rjmp	.+64     	; 0x16c6 <fputc+0x5a>
    1686:	82 ff       	sbrs	r24, 2
    1688:	10 c0       	rjmp	.+32     	; 0x16aa <fputc+0x3e>
    168a:	4e 81       	ldd	r20, Y+6	; 0x06
    168c:	5f 81       	ldd	r21, Y+7	; 0x07
    168e:	2c 81       	ldd	r18, Y+4	; 0x04
    1690:	3d 81       	ldd	r19, Y+5	; 0x05
    1692:	42 17       	cp	r20, r18
    1694:	53 07       	cpc	r21, r19
    1696:	7c f4       	brge	.+30     	; 0x16b6 <fputc+0x4a>
    1698:	e8 81       	ld	r30, Y
    169a:	f9 81       	ldd	r31, Y+1	; 0x01
    169c:	9f 01       	movw	r18, r30
    169e:	2f 5f       	subi	r18, 0xFF	; 255
    16a0:	3f 4f       	sbci	r19, 0xFF	; 255
    16a2:	39 83       	std	Y+1, r19	; 0x01
    16a4:	28 83       	st	Y, r18
    16a6:	10 83       	st	Z, r17
    16a8:	06 c0       	rjmp	.+12     	; 0x16b6 <fputc+0x4a>
    16aa:	e8 85       	ldd	r30, Y+8	; 0x08
    16ac:	f9 85       	ldd	r31, Y+9	; 0x09
    16ae:	81 2f       	mov	r24, r17
    16b0:	19 95       	eicall
    16b2:	89 2b       	or	r24, r25
    16b4:	29 f7       	brne	.-54     	; 0x1680 <fputc+0x14>
    16b6:	2e 81       	ldd	r18, Y+6	; 0x06
    16b8:	3f 81       	ldd	r19, Y+7	; 0x07
    16ba:	2f 5f       	subi	r18, 0xFF	; 255
    16bc:	3f 4f       	sbci	r19, 0xFF	; 255
    16be:	3f 83       	std	Y+7, r19	; 0x07
    16c0:	2e 83       	std	Y+6, r18	; 0x06
    16c2:	81 2f       	mov	r24, r17
    16c4:	90 2f       	mov	r25, r16
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	08 95       	ret

000016d0 <__ultoa_invert>:
    16d0:	fa 01       	movw	r30, r20
    16d2:	aa 27       	eor	r26, r26
    16d4:	28 30       	cpi	r18, 0x08	; 8
    16d6:	51 f1       	breq	.+84     	; 0x172c <__ultoa_invert+0x5c>
    16d8:	20 31       	cpi	r18, 0x10	; 16
    16da:	81 f1       	breq	.+96     	; 0x173c <__ultoa_invert+0x6c>
    16dc:	e8 94       	clt
    16de:	6f 93       	push	r22
    16e0:	6e 7f       	andi	r22, 0xFE	; 254
    16e2:	6e 5f       	subi	r22, 0xFE	; 254
    16e4:	7f 4f       	sbci	r23, 0xFF	; 255
    16e6:	8f 4f       	sbci	r24, 0xFF	; 255
    16e8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ea:	af 4f       	sbci	r26, 0xFF	; 255
    16ec:	b1 e0       	ldi	r27, 0x01	; 1
    16ee:	3e d0       	rcall	.+124    	; 0x176c <__ultoa_invert+0x9c>
    16f0:	b4 e0       	ldi	r27, 0x04	; 4
    16f2:	3c d0       	rcall	.+120    	; 0x176c <__ultoa_invert+0x9c>
    16f4:	67 0f       	add	r22, r23
    16f6:	78 1f       	adc	r23, r24
    16f8:	89 1f       	adc	r24, r25
    16fa:	9a 1f       	adc	r25, r26
    16fc:	a1 1d       	adc	r26, r1
    16fe:	68 0f       	add	r22, r24
    1700:	79 1f       	adc	r23, r25
    1702:	8a 1f       	adc	r24, r26
    1704:	91 1d       	adc	r25, r1
    1706:	a1 1d       	adc	r26, r1
    1708:	6a 0f       	add	r22, r26
    170a:	71 1d       	adc	r23, r1
    170c:	81 1d       	adc	r24, r1
    170e:	91 1d       	adc	r25, r1
    1710:	a1 1d       	adc	r26, r1
    1712:	20 d0       	rcall	.+64     	; 0x1754 <__ultoa_invert+0x84>
    1714:	09 f4       	brne	.+2      	; 0x1718 <__ultoa_invert+0x48>
    1716:	68 94       	set
    1718:	3f 91       	pop	r19
    171a:	2a e0       	ldi	r18, 0x0A	; 10
    171c:	26 9f       	mul	r18, r22
    171e:	11 24       	eor	r1, r1
    1720:	30 19       	sub	r19, r0
    1722:	30 5d       	subi	r19, 0xD0	; 208
    1724:	31 93       	st	Z+, r19
    1726:	de f6       	brtc	.-74     	; 0x16de <__ultoa_invert+0xe>
    1728:	cf 01       	movw	r24, r30
    172a:	08 95       	ret
    172c:	46 2f       	mov	r20, r22
    172e:	47 70       	andi	r20, 0x07	; 7
    1730:	40 5d       	subi	r20, 0xD0	; 208
    1732:	41 93       	st	Z+, r20
    1734:	b3 e0       	ldi	r27, 0x03	; 3
    1736:	0f d0       	rcall	.+30     	; 0x1756 <__ultoa_invert+0x86>
    1738:	c9 f7       	brne	.-14     	; 0x172c <__ultoa_invert+0x5c>
    173a:	f6 cf       	rjmp	.-20     	; 0x1728 <__ultoa_invert+0x58>
    173c:	46 2f       	mov	r20, r22
    173e:	4f 70       	andi	r20, 0x0F	; 15
    1740:	40 5d       	subi	r20, 0xD0	; 208
    1742:	4a 33       	cpi	r20, 0x3A	; 58
    1744:	18 f0       	brcs	.+6      	; 0x174c <__ultoa_invert+0x7c>
    1746:	49 5d       	subi	r20, 0xD9	; 217
    1748:	31 fd       	sbrc	r19, 1
    174a:	40 52       	subi	r20, 0x20	; 32
    174c:	41 93       	st	Z+, r20
    174e:	02 d0       	rcall	.+4      	; 0x1754 <__ultoa_invert+0x84>
    1750:	a9 f7       	brne	.-22     	; 0x173c <__ultoa_invert+0x6c>
    1752:	ea cf       	rjmp	.-44     	; 0x1728 <__ultoa_invert+0x58>
    1754:	b4 e0       	ldi	r27, 0x04	; 4
    1756:	a6 95       	lsr	r26
    1758:	97 95       	ror	r25
    175a:	87 95       	ror	r24
    175c:	77 95       	ror	r23
    175e:	67 95       	ror	r22
    1760:	ba 95       	dec	r27
    1762:	c9 f7       	brne	.-14     	; 0x1756 <__ultoa_invert+0x86>
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	61 05       	cpc	r22, r1
    1768:	71 05       	cpc	r23, r1
    176a:	08 95       	ret
    176c:	9b 01       	movw	r18, r22
    176e:	ac 01       	movw	r20, r24
    1770:	0a 2e       	mov	r0, r26
    1772:	06 94       	lsr	r0
    1774:	57 95       	ror	r21
    1776:	47 95       	ror	r20
    1778:	37 95       	ror	r19
    177a:	27 95       	ror	r18
    177c:	ba 95       	dec	r27
    177e:	c9 f7       	brne	.-14     	; 0x1772 <__ultoa_invert+0xa2>
    1780:	62 0f       	add	r22, r18
    1782:	73 1f       	adc	r23, r19
    1784:	84 1f       	adc	r24, r20
    1786:	95 1f       	adc	r25, r21
    1788:	a0 1d       	adc	r26, r0
    178a:	08 95       	ret

0000178c <_exit>:
    178c:	f8 94       	cli

0000178e <__stop_program>:
    178e:	ff cf       	rjmp	.-2      	; 0x178e <__stop_program>
